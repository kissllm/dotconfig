
# remap prefix from 'C-b' to 'C-a'
# unbind C-b
# bind C-a send-prefix
# set -g prefix C-a
# better prefix key

unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix
set-option -sg escape-time 10

# disable bell in tmux
# disable sound bell
set -g bell-action none
# disable visual bell
set -g visual-bell off
set-environment -g PATH "/usr/local/bin:/bin:/usr/bin:/usr/sbin"
# set *sh as your default Tmux shell
set-option -g default-shell "${SHELL}"
# https://github.com/gigglegrig/dotfiles/blob/master/.tmux.conf
# set-option -g default-command "${SHELL} -l"
# set-option -g default-command ". $HOME/.profile"
# set-option -g default-command "${SHELL}"

# https://github.com/tmux-plugins/tmux-resurrect/blob/master/docs/restoring_pane_contents.md
# Will load nothing if defined this
# set -g default-command "${SHELL}"

# The following line will kill tmux
# set -g default-command "reattach-to-user-namespace -l ${SHELL}"

# # 1:1140/117:20
# # https://www.youtube.com/watch?v=5r6yzFEXajQ&t=660s

# https://superuser.com/questions/767178/how-do-i-create-ctrl-key-bindings-in-vim-when-using-tmux
set-window-option -g xterm-keys on
set-option -gw xterm-keys on
set -g xterm-keys on
# set-option -g SuppressDEC 12
# https://superuser.com/questions/310251/use-terminal-scrollbar-with-tmux
set -ga terminal-overrides ',$TERM*:smcup@:rmcup@'
# https://gist.github.com/simme/1297707
# set-option -g mouse-select-pane on
# set-option -g mouse-select-window on
# set-window-option -g mode-mouse on

set -g mouse on
# set -g mouse off
# https://www.guyrutenberg.com/2021/07/02/tmux-wayland-clipboard-integration/
set -s copy-command 'wl-copy'

# # bind v, y, Escape keys in vi-copy mode
# bind-key -t vi-copy v begin-selection
# bind-key -t vi-copy y copy-selection
# bind-key -t vi-copy Escape cancel

# bind <prefix> + p to "paste"
unbind p
bind-key p paste-buffer
# https://stackoverflow.com/questions/51639540/tmux-scroll-mode-vim-keybindings
# https://blog.sanctum.geek.nz/vi-mode-in-tmux/
# turn on vi key mode
setw -g mode-keys vi
bind-key 'v' copy-mode
set-window-option -g mode-keys vi
list-keys -T copy-mode-v

bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi V send -X select-line
# bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'wl-copy -sel clip -i'
bind-key -T copy-mode-vi y send-keys -X copy-pipe 'wl-copy -sel clip -i'
bind-key -T copy-mode-vi uu send-keys -X halfpage-up
bind-key -T copy-mode-vi mm send-keys -X halfpage-down

# bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel 'xclip -in -selection clipboard'
# C-[ euqals to Esc. So you can not quit vim insert mode normally if entered
# bind-key -n 'C-[' copy-mode


set-window-option -g status-keys vi



# set -g @plugin 'git@bitbucket.com:user/plugin'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'github_username/plugin_name'
# Other examples:

# smart pane switching with awareness of vim splits
# https://thoughtbot.com/blog/seamlessly-navigate-vim-and-tmux-splits
# # https://github.com/christoomey/vim-tmux-navigator
# /mnt/vinit/nvim/init.vim
# " let g:vim_packages_use['christoomey/vim-tmux-navigator']             = { 'type' : 'start' }
# /mnt/vinit/vim/pack/packager/start/keys/after/plugin/keys.vim
# "     silent! execute(a:navigate[a:direction])
# /mnt/tinit/tmux.conf
set -g @plugin 'christoomey/vim-tmux-navigator'

set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tpm'
# xclip dependent
# set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/vim-tmux'
set -g @plugin 'tmux-plugins/vim-sidebar'
set -g @sidebar-tree-focus 'e'
set -g @plugin 'tmux-plugins/tmux-pain-control'
set -g @plugin 'tmux-plugins/tmux-logging'
# set -g @plugin 'tmux-plugins/vim-tmux-focus-events'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-resurrect'
# prefix + Ctrl-s - save
# prefix + Ctrl-r - restore
# prefix + I to fetch the plugin and source it

set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @plugin 'tmux-plugins/tmux-vim-exit'
# set -g @plugin 'ddelnano/tmux-vim-exit'
set -g @plugin 'run27017/tmux-vim-exit'
set -g @plugin 'roxma/vim-tmux-clipboard'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @resurrect-dir '$HOME/.cache/tmux'
# https://github.com/kristijanhusak/tmux-simple-git-status
set -g @plugin 'kristijanhusak/tmux-simple-git-status'
# List of plugins
# https://github.com/tmux-plugins/tpm
set -g @continuum-restore 'on'
set -g focus-events on
set -g @resurrect-capture-pane-contents 'on'
set -g @continuum-save-interval '0'
set-option -g @pane_resize "5"

# https://github.com/tmux-plugins/tmux-logging/issues/19
set -g @logging-path '$XDG_DATA_HOME/tmux/logs'
set -g @logging-filename "%Y-%m-%d_#{session_name}-#{window_index}-#{pane_index}.log"

set -g status-fg white
# https://stackoverflow.com/questions/22303820/tmux-transparent-status-bar
# error 'no current session'
# set status-bg default
# set -g status-bg colour240
set -g status-bg default
set-option -g status-style bg=default

set-window-option -g alternate-screen off
# https://github.com/tmux-plugins/tmux-resurrect/blob/master/docs/restoring_vim_and_neovim_sessions.md
set -g @resurrect-strategy-vim 'session'


# less colourful status
# https://medium.com/@findingedward/configuring-vim-and-tmux-to-boost-your-productivity-dab44ba7db11

set -g status-right '#{prefix_highlight} | %a %Y-%m-%d %H:%M'

# use vim-like keys for splits and windows
bind-key v split-window -h
bind-key s split-window -v
bind - split-window -v -c "#{pane_current_path}"
# bind _ split-window -fv -c "#{pane_current_path}"
bind | split-window -h -c "#{pane_current_path}"
# bind \ split-window -fh -c "#{pane_current_path}"
unbind '"'
unbind %

# https://gist.github.com/MohamedAlaa/2961058
# reload config file (change file location to your the tmux.conf you want to use)
bind r source-file ~/.tmux.conf

# # switch panes using Alt-arrow without prefix
# bind -n M-Left select-pane -L
# bind -n M-Right select-pane -R
# bind -n M-Up select-pane -U
# bind -n M-Down select-pane -D
#
# bind -n C-Left select-pane -L
# bind -n C-Right select-pane -R
# bind -n C-Up select-pane -U
# bind -n C-Down select-pane -D

# https://thoughtbot.com/blog/seamlessly-navigate-vim-and-tmux-splits
# smart pane switching with awareness of vim splits
# bind -n C-k  run "(tmux display-message -p '#{pane_current_command}' | grep -i vim && tmux send-keys C-k) || tmux select-pane -U"
# bind -n C-j  run "(tmux display-message -p '#{pane_current_command}' | grep -i vim && tmux send-keys C-j) || tmux select-pane -D"
# bind -n C-h  run "(tmux display-message -p '#{pane_current_command}' | grep -i vim && tmux send-keys C-h) || tmux select-pane -L"
# bind -n C-l  run "(tmux display-message -p '#{pane_current_command}' | grep -i vim && tmux send-keys C-l) || tmux select-pane -R"
# bind -n C-\\ run "(tmux display-message -p '#{pane_current_command}' | grep -i vim && tmux send-keys 'C-\\') || tmux select-pane -l"




# neomux tends to modify EDITOR value
# bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -i '${EDITOR}' && tmux send-keys C-k) || tmux select-pane -U"
# bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -i '${EDITOR}' && tmux send-keys C-j) || tmux select-pane -D"
# bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -i '${EDITOR}' && tmux send-keys C-h) || tmux select-pane -L"
# bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -i '${EDITOR}' && tmux send-keys C-l) || tmux select-pane -R"
# # C-\ will generate error: "Unkown key: C- run" -- use shell command t to reproduce it
# # function t() { run_under_tmux rtorrent 'nice -n 19 ionice -c 3 rtorrent'; }
# bind -n C-\\ run "(tmux display-message -p '#{pane_current_command}' | grep -i '${EDITOR}' && tmux send-keys 'C-\\') || tmux select-pane -l"





# bind -n 'C-k' run "(tmux display-message '#{pane_current_command}' |  grep -i vim && tmux send-keys C-k) || tmux select-pane -U"
# bind -n 'C-j' run "(tmux display-message '#{pane_current_command}' |  grep -i vim && tmux send-keys C-j) || tmux select-pane -D"
# bind -n 'C-h' run "(tmux display-message '#{pane_current_command}' |  grep -i vim && tmux send-keys C-h) || tmux select-pane -L"
# bind -n 'C-l' run "(tmux display-message '#{pane_current_command}' |  grep -i vim && tmux send-keys C-l) || tmux select-pane -R"
# bind -n 'C-\' run "(tmux display-message '#{pane_current_command}' |  grep -i vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# # https://gist.github.com/mislav/5189704
# bind -n C-k if "[ $(tmux display -p '#{pane_current_command}') = vim-huge ]" "send-keys C-w C-k" "select-pane -U"
# bind -n C-j if "[ $(tmux display -p '#{pane_current_command}') = vim-huge ]" "send-keys C-w C-j" "select-pane -D"
# bind -n C-h if "[ $(tmux display -p '#{pane_current_command}') = vim-huge ]" "send-keys C-w C-h" "select-pane -L"
# bind -n C-l if "[ $(tmux display -p '#{pane_current_command}') = vim-huge ]" "send-keys C-w C-l" "select-pane -R"

# bind -n C-k if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C-<" "select-pane -U"
# bind -n C-j if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C->" "select-pane -D"
# bind -n C-h if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C-," "select-pane -L"
# bind -n C-l if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C-." "select-pane -R"

# # works design
# bind -n C-k if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C-k" "select-pane -U"
# bind -n C-j if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C-j" "select-pane -D"
# bind -n C-h if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C-h" "select-pane -L"
# bind -n C-l if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C-l" "select-pane -R"

# bind -n M-k if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys M-k" "resize-pane -U 5"
# bind -n M-j if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys M-j" "resize-pane -D 5"
# bind -n M-h if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys M-h" "resize-pane -L 10"
# bind -n M-l if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys M-l" "resize-pane -R 10"

# https://vi.stackexchange.com/questions/8538/how-to-remap-c-whjkl-to-navigate-tmux-panes-and-vim-splits
# https://github.com/christoomey/vim-tmux-navigator
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
# :TmuxNavigatorProcessList
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# # https://gist.github.com/mislav/5189704
# is_vim="ps c -o 'stat=,command=' -t '#{pane_tty}' 2>/dev/null \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# is_vim="ps -o stat,comm= -T /dev/pts/9|grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# is_vim="tmux display-message -p '#{pane_current_command}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# is_vim="tmux display-message -p '#{pane_current_command}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
is_vim="tmux display-message -p '#{pane_current_command}' | grep -iqE 'vi'"

# smart pane switching with awareness of vim splits
# https://stackoverflow.com/questions/47400291/tmux-run-fish-shell-functions-returns-error-127
# 'if tmux display-message -p 'nvim' | grep -iqE 'vi'; then tmux send-keys C-h   ; else  tmux select-pane -L; fi' returned 127
# bind -n C-h   run-shell "if $is_vim; then tmux send-keys C-h   ; else  tmux select-pane -L; fi"
# bind -n C-j   run-shell "if $is_vim; then tmux send-keys C-j   ; else  tmux select-pane -D; fi"
# bind -n C-k   run-shell "if $is_vim; then tmux send-keys C-k   ; else  tmux select-pane -U; fi"
# bind -n C-l   run-shell "if $is_vim; then tmux send-keys C-l   ; else  tmux select-pane -R; fi"
# bind -n 'C-\' run-shell "if $is_vim; then tmux send-keys 'C-\\'; else  tmux select-pane -l; fi"

# bind -n C-l   run 'container=$(tmux display-message -p "#{pane_current_command}") ; [ "${container}" = "nvim" ] && tmux send-keys C-l || tmux select-pane -R'
# Also works
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
bind-key -n 'C-\' if-shell "$is_vim" 'send-keys C-\'  'select-pane -l'

bind -n C-Up    if-shell "$is_vim" 'send-keys C-k' 'select-pane -U'
bind -n C-Down  if-shell "$is_vim" 'send-keys C-j' 'select-pane -D'
bind -n C-Left  if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
bind -n C-Right if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'
# Add Nvim terminal emulator key mappings #172
# https://github.com/christoomey/vim-tmux-navigator/pull/172

# # is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
# #     | grep -iE 'vim'"
#
# bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' 'select-pane -U'
# bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' 'select-pane -D'
# bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
# bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'


# bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-w C-h' 'select-pane -L'
# bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-w C-j' 'select-pane -D'
# bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-w C-k' 'select-pane -U'
# bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-w C-l' 'select-pane -R'

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Doesn't work
# bind-key -n C-w switch-client -T VIMWINDOWS
# bind-key -T VIMWINDOWS h if-shell "$is_vim" "send-keys C-a C-h" "select-pane -L"
# bind-key -T VIMWINDOWS j if-shell "$is_vim" "send-keys C-a C-j" "select-pane -D"
# bind-key -T VIMWINDOWS k if-shell "$is_vim" "send-keys C-a C-k" "select-pane -U"
# bind-key -T VIMWINDOWS l if-shell "$is_vim" "send-keys C-a C-l" "select-pane -R"

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l


bind C-l send-keys 'C-l'

bind -r 'C-k' run "tmux select-pane -U"
bind -r 'C-j' run "tmux select-pane -D"
bind -r 'C-h' run "tmux select-pane -L"
bind -r 'C-l' run "tmux select-pane -R"
# https://github.com/tmux/tmux/issues/1827
bind -r "C-\\" run "tmux select-pane -l"


# Smart pane resizing with awareness of Vim splits.
# See: https://github.com/RyanMillerC/better-vim-tmux-resizer
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# Edit values if you use custom resize_count variables
# bind-key -n M-k if-shell "$is_vim" "send-keys M-k" "resize-pane -U 5"
# bind-key -n M-j if-shell "$is_vim" "send-keys M-j" "resize-pane -D 5"
# bind-key -n M-h if-shell "$is_vim" "send-keys M-h" "resize-pane -L 10"
# bind-key -n M-l if-shell "$is_vim" "send-keys M-l" "resize-pane -R 10"

bind-key -n M-k "resize-pane -U 2"
bind-key -n M-j "resize-pane -D 2"
bind-key -n M-h "resize-pane -L 5"
bind-key -n M-l "resize-pane -R 5"

bind-key -T copy-mode-vi M-k resize-pane -U 2
bind-key -T copy-mode-vi M-j resize-pane -D 2
bind-key -T copy-mode-vi M-h resize-pane -L 5
bind-key -T copy-mode-vi M-l resize-pane -R 5

# https://unix.stackexchange.com/questions/293746/tmux-how-to-bind-a-key-to-enter-in-vi-mode-and-search-backwards
bind -n M-s copy-mode \
# bind -n M-s copy-mode \; send-keys ?

# # For Void Linux
# # ctrl + return
# bind-key -T copy-mode-vi "\x1b[13;5u" send-keys C-CR
# # ctrl + return
# bind-key -n "\x1b[13;5u" send-keys C-CR
# # shift + return
# bind-key -T copy-mode-vi "\x1b[13;2u" send-keys S-CR
# # shift + return
# bind-key -n "\x1b[13;2u" send-keys S-CR

# bind-key -n S-Enter send-keys [-Space
bind-key -n S-Enter send-keys '[ '
# bind-key -n C-Enter send-keys ]-Space
bind-key -n C-Enter send-keys '] '

# set inactive/active window styles
# https://stackoverflow.com/questions/25532773/change-background-color-of-active-or-inactive-pane-in-tmux

# https://superuser.com/questions/1601701/tmux-how-to-move-current-pane-to-far-left-right-up-down-like-in-vim
# move pane to the far right/left/bottom/top
bind H splitw -fhb \; swapp -t ! \; killp -t !
bind L splitw -fh  \; swapp -t ! \; killp -t !
bind J splitw -fv  \; swapp -t ! \; killp -t !
bind K splitw -fvb \; swapp -t ! \; killp -t !

# https://github.com/vimpostor/vim-tpipeline
set -g status-style bg=default
set -g status-left '#(cat #{socket_path}-\#{session_id}-vimbridge)'
set -g status-left-length 80
set -g status-right '#(cat #{socket_path}-\#{session_id}-vimbridge-R)'
# https://stackoverflow.com/questions/12921852/tmux-conf-update-status-commands-on-panel-focus?noredirect=1&lq=1
set -g status-right '#(cd #{pane_current_path}; git rev-parse --abbrev-ref HEAD)'
set -g status-right-length 80
set -g status-justify right

# Color settings might erase the transparency
# better splitting
# set the pane border colors
set -g pane-border-style 'fg=default,bg=default'
set -g pane-active-border-style 'fg=default,bg=default'

# set-option -g pane-border-style fg=default,bg=default
# set-option -g pane-active-border-style fg=default,bg=default

# set -g window-style 'fg=colour247,bg=colour236'
# set -g window-active-style 'fg=colour247,bg=colour234'

# https://www.reddit.com/r/tmux/comments/8mfc2d/looking_for_a_way_to_format_paneborderstatus_via/
# https://github.com/tmux/tmux/issues/1852
set-option -g status off
set-window-option -g automatic-rename off
set-window-option -g pane-border-status bottom


# https://www.reddit.com/r/tmux/comments/55i80p/tmux_statusbar_inside_pane_rather_than_bottomtop/
# set-window-option -g pane-border-format " #P: #{pane_current_path} #{pane_current_command} "
# set -g pane-border-format "#{pane_current_path}"

# if "[ $(tmux display -p '#{pane_current_command}') = 'nvim' ]" \

# if-shell "$is_vim" \
# "set-window-option -g pane-border-format ' #P: #{pane_current_path} #{pane_title} #(cat #{socket_path}-\#{session_id}-vimbridge) #(cat #{socket_path}-\#{session_id}-vimbridge-R) '" \
# "set-window-option -g pane-border-format ' #P: #{pane_current_path} #{pane_title} ) '"

# Must use single quote
# set-window-option -g pane-border-format ' #{pane_title} #(cat #{socket_path}-\#{session_id}-vimbridge) #(cat #{socket_path}-\#{session_id}-vimbridge-R) '

# run '(tmux display-message -p "#{pane_title}" | grep -i "NVIM" \
# && "set-window-option -g pane-border-format \" #P: #{pane_current_path} #{pane_title} #(cat #{socket_path}-\#{session_id}-vimbridge) #(cat #{socket_path}-\#{session_id}-vimbridge-R) \" " ) \
# || "set-window-option -g pane-border-format \" #{pane_index} #{pane_current_command} #{pane_current_path} #{pane_title} ) \" " '


# https://www.markneuburger.com/git-statuses-in-tmux-panes/
set-window-option -g pane-border-format ' \
#P: #{pane_index} #{pane_title} #{simple_git_status} #{pane_current_path} \
#(cat #{socket_path}-\#{session_id}-vimbridge) #(cat #{socket_path}-\#{session_id}-vimbridge-R) \
#(bash ${SHARE_PREFIX}/tinit/tmux/pane-border-format.sh --pane-current-path=#{pane_current_path} --pane-active=#{pane_active})'
#P: #{pane_index} #{pane_title} #{simple_git_status} #{pane_current_command} #{pane_current_path} \

# no crrrent session
# set status-interval 1
# set -s status-interval 1
set -g status-interval 5

# https://gist.github.com/tsl0922/d79fc1f8097dde660b34
bind-key space  next-window
bind-key bspace previous-window
bind-key enter  next-layout


# https://vi.stackexchange.com/questions/7112/tmux-messing-with-vim-highlighting
# https://stackoverflow.com/questions/45931164/duplicated-characters-and-non-updating-input-using-tmux-in-zsh
# https://github.com/alacritty/alacritty/issues/2487
# https://sunaku.github.io/vim-256color-bce.html


# https://invisible-island.net/ncurses/terminfo.src.html#tic-xterm_256color



# set -g default-terminal "xterm-256color"
# set -g default-terminal "screen-256color"
# set -g default-terminal "screen-256color-bce-s"

set -g default-terminal "$TERM"
# set -g default-terminal "tmux-256color"


# set -g terminal-overrides ",alacritty:RGB"
# set -g terminal-overrides ",alacritty:Tc"

# set -as terminal-overrides ',xterm*:sitm=\E[3m'
# set -as terminal-overrides "*-256color:Tc"
# set -ga terminal-overrides ',xterm-256color:Tc'
# set -ga terminal-overrides ",*256col*:Tc"
set -g terminal-overrides ",$TERM:Tc"


# returned 127 in busybox
# run-shell $HOME/.tmux/plugins/tmux-prefix-highlight/prefix-highlight.tmux
run-shell $HOME/.tmux/plugins/tmux-resurrect/resurrect.tmux
run-shell $HOME/.tmux/plugins/tmux-continuum/continuum.tmux

# https://arcolinux.com/everything-you-need-to-know-about-tmux-plugins-manager/
# prefix + I (capital i, as in Install) to fetch the plugin
# prefix + alt + u (lowercase u as in uninstall) to remove the plugin
# run -b '~/.tmux/plugins/tpm/tpm'

# returned 1 in busybox
run-shell '$HOME/.tmux/plugins/tpm/tpm'

# run '/usr/bin/tpm'
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)

# run-shell -b '$HOME/.tmux/plugins/tmux-resurrect/scripts/restore.sh r'
# With the tmux-resurrect plugin registered in this configuration file, login tmux without parameters first,
# tmux
# then press,
# prefix + r
# will restore the previous session

# # if run as "tmux attach", create a session if one does not already exist
# new-session -n "${HOST}"


# # Smart pane switching with awareness of vim splits
# bind -n C-k run-shell '$SHARE_PREFIX/local/bin/tmux-vim-select-pane -U'
# bind -n C-j run-shell '$SHARE_PREFIX/local/bin/tmux-vim-select-pane -D'
# bind -n C-h run-shell '$SHARE_PREFIX/local/bin/tmux-vim-select-pane -L'
# bind -n C-l run-shell '$SHARE_PREFIX/local/bin/tmux-vim-select-pane -R'
# bind -n "C-\\" run-shell '$SHARE_PREFIX/local/bin/tmux-vim-select-pane -l'
