
# If you happened to trigger this key combination, $mod+shift+q in wayland will save you
# https://superuser.com/questions/1271190/restore-tmux-client-after-suspend-client
# kill -CONT <pid>
# bind-key -T prefix C-z suspend-client

# How to debug
# tmux source-file -nv $DOT_CONFIG/terminal/tmux.conf

# https://unix.stackexchange.com/questions/57641/reload-of-tmux-config-not-unbinding-keys-bind-key-is-cumulative
# Unbind ALL keybindings whilst REBINDING defaults
# unbind-key -a
# source ~/.tmux.reset.conf

  run-shell '\
    export f=$(mktemp -t) \
    && tmux -f /dev/null -L temp start-server \; list-keys > $f \
    && tmux unbind-key -a \; && tmux unbind-key -n -a \; source-file $f'
#   && tmux unbind-key -a \; source-file $f'

# %hidden prefix_background="colour007"
  %hidden prefix_background="colour003"
          prefix_background="colour003"

# Escape is in charge of quiting edit mode in vi -- ModeChanged might help
# %hidden prefix_key="Escape"
#         prefix_key="Escape"
  %hidden prefix_key="`"         # Use M-` to input ` in the terminal
#         prefix_key="`"
# Suppose you are in command mode in vim, Escape and Backtick are all occupied
  %hidden copy_mode_key="Escape" #
# %hidden copy_mode_key="`"      # using Backtic as copy-mode initiator does not work without restart tmux
                                 # sh: syntax error: EOF in backquote substitution
                                 # /bin/ash:     if-shell -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' send-keys: not found
								 # unknown key:
    # bind-key -T root       "$prefix_key"    if-shell -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' "send-keys $prefix_key" "switch-client -T prefix"
    # Will generate \\$prefix_key
    # bind-key -T root       "$prefix_key"    if-shell -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' 'send-keys $prefix_key' 'switch-client -T prefix'
    # This is because
    # 1. Backtick is a special key in shell
    # 2. Read and re-applying it from vim/nvim side is not a trivial task

#         copy_mode_key="Escape"
  %hidden copy_mode_color="colour000"
# C-[, C-3, and Alt-u in nvim euqals to Esc. So you can not quit vim insert mode normally if entered
# [alt + single-normal-mode-key](https://vi.stackexchange.com/questions/300/other-ways-to-exit-insert-mode-besides-escape)
# bind-key -n 'C-['  copy-mode

  unbind-key -n              'C-['
  # For copy-mode-vi
# bind-key   -T copy-mode    Escape           send-keys -X cancel
# bind-key   -T copy-mode-vi Escape           send-keys -X clear-selection
# unbind-key -T copy-mode    Escape
# unbind-key -T copy-mode-vi Escape
# prefix_key_1_2

# The following code will run after the first run of the conig file
# So, it will remove Escape key settings set in the first run
# if -b '[ "$prefix_key" == "Escape" ]' \
# 'unbind-key -n ` ; unbind-key -T prefix `' \
# 'unbind-key -n Escape ; unbind-key -T prefix Escape'

# https://superuser.com/questions/1788219/tmux-if-else-endif-syntax-misbehaving-when-using-a-string-comparison-statemen
  %if #{=:$prefix_key, "Escape"}
  unbind-key -n              '`'
  unbind-key -T prefix       '`'
  %else
  unbind-key -n              Escape
  unbind-key -T prefix       Escape
  %endif

# bind-key   -n 'M-Up' copy-mode
# bind-key   -n 'M-s'  copy-mode
# vim help use C-] to jump
# bind-key   -n 'C-]'  copy-mode

# unbind-key -n 'C-]'

# unbind-key -n 'C-c'

# https://unix.stackexchange.com/questions/293746/tmux-how-to-bind-a-key-to-enter-in-vi-mode-and-search-backwards
# bind -n M-s  copy-mode
# bind -n M-Up copy-mode
# C-3, C-\[ equal to 'Escape'. You don't want to use it
# How to quit insert mode under this circumstance? quit tmux copy-mode and press F1
# C-\[ equals Esc
# bind -n C-\[ copy-mode

  unbind                     C-b
  bind-key   -n              C-b              run-shell "$DOT_CONFIG/terminal/tmux-layout-dwindle brvc"

# https://stackoverflow.com/questions/51181608/make-tmux-prefix-binding-always-act-as-prefix-and-prefix-only-idempotent-bindi
# Equivalent to 'set-option -g prefix C-b'?
# bind-key   -T root         C-b              switch-client -T prefix

# remap prefix from C-b to C-a
# bind C-a        send-prefix
# set -g prefix C-a
# better prefix key

# set-option -g prefix C-a
# bind-key C-a    send-prefix

# prefix_key_1_0
# unbind-key                 "$prefix_key"
# unbind                     '`'
# unbind                     Escape
# When using Escape as prefix and triggerd prefix-w, use ctrl-m to quit it
  unbind-key -T prefix       "$prefix_key"
# unbind     -T prefix Escape
# unbind-key -T prefix Escape

# bind "$prefix_key" \
# if-shell '[ "$(tmux display -p "#{pane-border-status}")" = "off" ]' 'set-option -wp pane-border-status top' 'set-option -wp pane-border-status off' \; \
# send-keys "$prefix_key" \; \
# set -g window-active-style        'fg=default,   bg=terminal' \; \
# display-panes -N

# bind "$prefix_key" \
# send-keys "$prefix_key" \; \
# set -g window-active-style        fg=default,bg=terminal \; \
# display-panes -N

# set-option -g prefix       "$prefix_key"
# bind-key                   "$prefix_key"    send-prefix
# set happens during execution
  setenv     -g prefix_key   "$prefix_key"
# prefix_key_1_1
# set        -g prefix_key   "$prefix_key"
# set        -g prefix       "$prefix_key"

# For twice prefix-key
# bind-key                   "$prefix_key"    send-prefix
# bind-key   -T prefix       "$prefix_key"    send-prefix # won't work when tmux just has one pane

# %if #{!=:$copy_mode_key, "`"}

  %if #{!=:$copy_mode_key, $prefix_key}
  # bind-key   -T prefix       "$prefix_key"    if-shellF -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' 'send-keys $prefix_key' 'switch-client -T prefix'
  # bind-key   -T prefix       "$prefix_key"    if-shellF -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' "send-keys $prefix_key" "switch-client -T prefix"
    bind-key   -T prefix       "$prefix_key"    switch-client -T prefix
  %endif

# prefix_key_1_2
# if -b '[ "$prefix_key" == "Escape" ]' \
# 'bind-key -T prefix  "$prefix_key" \
# set -g window-active-style        fg=default,bg=$prefix_background \; \
# send-prefix \; \
# display-panes -N \; \
# set -g window-active-style        fg=default,bg=terminal' \
# 'bind-key -T prefix  "$prefix_key" send-prefix'

# %if #{=:$prefix_key, "Escape"}
#   bind-key -T prefix "$prefix_key" \
#   set -g window-active-style        fg=default,bg=$prefix_background \; \
#   send-prefix \; \
#   display-panes -N \; \
#   set -g window-active-style        fg=default,bg=terminal
# %else
# # bind-key -T prefix "$prefix_key" send-prefix \; \
# # if -F '#{&&:#{pane_active},#{client_prefix}}' \
# # 'set -g window-active-style fg=default,bg=$prefix_background' \
# # 'set -g window-active-style fg=default,bg=terminal'
#   bind-key -T prefix "$prefix_key" \
#   set -g window-active-style        fg=default,bg=$prefix_background \; \
#   send-prefix \; \
#   display-panes -N \; \
#   set -g window-active-style        fg=default,bg=terminal
# %endif

# bind-key -n `     if-shell "$is_vim" 'set prefix None; unbind \`; unbind -T root \`; bind -T root \` send-keys \`; send-keys \`' 'set prefix \`; bind -T root \` switch-client -T prefix; switch-client -T prefix'
# bind-key -n `     if-shell "$is_vim" 'set prefix None; unbind \`; unbind -T root \`; send-keys \`' 'set prefix \`; switch-client -T prefix'

# https://gist.github.com/darkdreamingdan/8b04a1ee25d7e984f35908a1b9bdf0f7
# Add ` as prefix
# set-option -g prefix2 '`'
# set-option -g prefix2 "$prefix_key"
# Double tap ` to get a real `
# bind ` send-keys `
# bind "$prefix_key" send-keys "$prefix_key"

# send-keys "$prefix_key" \; \
# switch-client -T prefix \; \

# bind -T prefix       "$prefix_key" \
# set -g window-active-style        "fg=default,bg=$prefix_background" \; \
# send-keys "$prefix_key" \; \
# display-panes -N \; \
# set -g window-active-style        fg=default,bg=terminal

# switch-client -T prefix \; \

# For idempotent binding
# bind-key             "$prefix_key" switch-client -T prefix
# bind "$prefix_key" \
# if-shell '[ "$(tmux display -p "#{pane-border-status}")" = "off" ]' 'set-option -wp pane-border-status top' 'set-option -wp pane-border-status off' \; \
# switch-client -T prefix

# bind-key -T root     "$prefix_key" switch-client -T prefix

# bind -T root "$prefix_key" \
# if-shell '[ "$(tmux display -p "#{pane-border-status}")" = "off" ]' 'set-option -wp pane-border-status top' 'set-option -wp pane-border-status off' \; \
# switch-client -T prefix \; \
# set -g window-active-style        'fg=default,   bg=colour020' \; \
# display-panes -N \; \
# set -g window-active-style        'fg=default,   bg=terminal'

# bind -T root "$prefix_key" \
# switch-client -T prefix \; \
# set -g window-active-style        fg=default,bg=colour020 \; \
# display-panes -N \; \
# set -g window-active-style        fg=default,bg=terminal

# prefix_key_2_0
  unbind-key -T root         "$prefix_key"
# bind-key   -T root         "$copy_mode_key" copy-mode
# unbind     -T root         "$prefix_key"
# unbind-key -T root         "$prefix_key"

# prefix_key_2_1

# if -b '[ "$prefix_key" == "Escape" ]' \
# 'bind-key -T root    "$prefix_key" \
# switch-client -T prefix \; \
# set -g window-active-style        fg=default,bg=$prefix_background' \
# 'bind-key -T root    "$prefix_key" send-keys "$prefix_key"'

# if -b '[ "$prefix_key" == "Escape" ]' \
# 'bind-key -T root    "$prefix_key" \
# set -g window-active-style        fg=default,bg=$prefix_background \; \
# send-keys "$prefix_key" \; \
# display-panes -N \; \
# set -g window-active-style        fg=default,bg=terminal' \
# 'bind-key -T root    "$prefix_key" send-prefix'
# 'bind-key -T root    "$prefix_key" send-keys "$prefix_key"'

  %if #{=:$prefix_key, "Escape"}
    bind-key -T root         "$prefix_key" \
    set -g window-active-style        fg=default,bg=$prefix_background \; \
    send-prefix \; \
    display-panes -N \; \
    set -g window-active-style        fg=default,bg=terminal
  %else
  # %if #{!=:$copy_mode_key, "`"}

    %if #{!=:$copy_mode_key, $prefix_key}
    # bind-key -T root       "$prefix_key"    send-prefix # won't work when tmux just has one pane
    # bind-key -T root       "$prefix_key"    if-shellF -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' 'send-keys $prefix_key' 'switch-client -T prefix'
    # bind-key -T root       "$prefix_key"    if-shellF -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' "send-keys $prefix_key" "switch-client -T prefix"
      bind-key -T root       "$prefix_key"    switch-client -T prefix
    %endif

  # bind     -n              "$copy_mode_key" copy-mode
  # bind-key -T root         "$prefix_key" send-prefix \; \
  # if -F '#{&&:#{pane_active},#{client_prefix}}' \
  # 'set -g window-active-style fg=default,bg=$prefix_background' \
  # 'set -g window-active-style fg=default,bg=terminal'
  # run-shell -b '[ "$(tmux display -p "#{client_prefix}")" -eq 1 ] && [ "$(tmux display -p "#{pane_active}")" -eq 1 ] && \
  # tmux set -g window-active-style fg=default,bg=$prefix_background || \
  # tmux set -g window-active-style fg=default,bg=terminal'
  # %if '#{&&:#{pane_active},#{client_prefix}}'
  # if-shell -F '[ "$(tmux display -p "#{client_prefix}")" -eq 1 ] && [ "$(tmux display -p "#{pane_active}")" -eq 1 ]' \
  # 'set -g window-active-style fg=default,bg=$prefix_background' \
  # 'set -g window-active-style fg=default,bg=terminal'
  %endif
# https://superuser.com/questions/1050485/can-tmux-highlight-change-color-on-control-key-send-prefix-event
  set -g window-active-style '#{?client_prefix,fg=default,bg=$prefix_background,fg=default,bg=terminal}'
# bind-key -T root "$prefix_key" \
# send-keys "$prefix_key" \; \
# set -g window-active-style        fg=default,bg=$prefix_background \; \
# display-panes -N \; \
# set -g window-active-style        fg=default,bg=terminal

# switch-client -T prefix \; \
# switch-client -T prefix
# set -g window-active-style        fg=default,bg=terminal

# bind -n "$prefix_key" set-option -wp pane-border-status top \; \
# switch-client -T prefix \; \
# run-shell -d 1 -b "while [ $(tmux display-message -p '##{client_prefix}') -eq 1 ]; do sleep 0.5; done; tmux set-option -wp pane-border-status off"

# bind       -T copy-mode-vi "$prefix_key" \
# if-shell '[ "$(tmux display -p "#{pane-border-status}")" = "off" ]' 'set-option -wp pane-border-status top' 'set-option -wp pane-border-status off' \; \
# switch-client -T prefix \; \
# set -g window-active-style        'fg=default,   bg=colour020' \; \
# display-panes -N \; \
# set -g window-active-style        'fg=default,   bg=terminal'

# prefix_key_3_0
  unbind-key -T copy-mode-vi "$prefix_key"
# unbind     -T copy-mode-vi "$prefix_key"
# unbind-key -T copy-mode-vi "$prefix_key"

# prefix_key_3_1

# Recursive calling ?
# if -b '[ "$prefix_key" == "Escape" ]' \
# 'bind-key  -T copy-mode-vi  "$prefix_key" \
# set -g window-active-style        fg=default,bg=$prefix_background \; \
# switch-client -T prefix \; \
# display-panes -N \; \
# set -g window-active-style        fg=default,bg=terminal' \
# 'bind-key  -T copy-mode-vi  "$prefix_key" send-prefix'
# 'bind-key  -T copy-mode-vi  "$prefix_key" send-keys "$prefix_key"'

# %if #{=:$prefix_key, "Escape"}
#   bind-key -T copy-mode-vi "$prefix_key" \
#   set -g window-active-style        fg=default,bg=$prefix_background \; \
#   switch-client -T prefix \; \
#   display-panes -N \; \
#   set -g window-active-style        fg=default,bg=terminal
# %else
    %if #{!=:$copy_mode_key, $prefix_key}
      bind-key -T copy-mode-vi "$prefix_key"    switch-client -T prefix
    %else
      bind-key -T copy-mode-vi "$prefix_key"    if-shell -F '#{selection_present}' 'send-keys -X clear-selection' 'send-keys -X cancel'
    # 'send-keys -X cancel \; switch-client -T prefix'
    %endif

  # bind-key -T copy-mode-vi "$prefix_key" \
  # set -g window-active-style        fg=default,bg=$prefix_background \; \
  # switch-client -T prefix \; \
  # display-panes -N \; \
  # set -g window-active-style        fg=default,bg=terminal

# %endif

# send-keys "$prefix_key" \; \
# switch-client -T prefix \; \

# bind-key   -T copy-mode-vi "$prefix_key" \
# send-keys "$prefix_key" \; \
# set -g window-active-style        fg=default,bg=$prefix_background \; \
# display-panes -N \; \
# set -g window-active-style        fg=default,bg=terminal

# switch-client -T prefix \; \

# Keeping the default key as a backup
# unbind-key -T copy-mode-vi q

# [Is it possible to support interactive command in run-shell?](https://github.com/tmux/tmux/issues/3187)
  unbind-key -T root   [
  unbind-key -T prefix [
# bind    [ run-shell 'tmux-vim-pager'
  unbind-key -T root         Escape
  unbind-key -T prefix       Escape
# bind -n Escape copy-mode
# Reducing the dependencies on @is-vim is a better choice because vim might be failed
# bind-key   -T root         "$copy_mode_key" if-shell -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' "send-keys $copy_mode_key" "copy-mode"
# set-option -g @is-vim      false # if-shell -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' only read the pane option value
# Makes vim/nvim complicated if $copy_mode_key == Escape
# bind-key   -T root         "$copy_mode_key" if-shell -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' "send-keys \"$copy_mode_key\"" "copy-mode"
  bind-key   -T root         "$copy_mode_key" if-shell -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' "send-keys $copy_mode_key" "copy-mode"
# bind       -n              "$copy_mode_key" copy-mode

# bind       -n              "$prefix_key"    copy-mode # using Backtic as copy-mode initiator does not work without restart tmux
# bind       -n              "`"              copy-mode
# bind-key   -T root         "$copy_mode_key" copy-mode
# run 'tmux bind -n Escape copy-mode'
# bind       -n              Tab              copy-mode
# bind       -n              Escape           send-keys "$prefix_key-["
  unbind-key -T copy-mode-vi Escape
  unbind-key -T copy-mode    Escape
# https://stackoverflow.com/questions/47848463/tmux-variable-indicating-whether-text-is-selected
# bind-key   -T copy-mode-vi Escape send-keys -X clear-selection

# Recursive calling
# bind-key   -T copy-mode-vi "$copy_mode_key" { if-shell -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' "send-keys $copy_mode_key"; \
# if-shell -F '#{selection_present}' \
#     'send-keys -X clear-selection' \
#     'send-keys -X cancel'; }

# bind-key   -T copy-mode-vi "$copy_mode_key" if-shell -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' "send-keys C-c \; send-keys C-c" { if-shell -F '#{selection_present}' 'send-keys -X clear-selection' 'send-keys -X cancel'; }
  bind-key   -T copy-mode-vi "$copy_mode_key" if-shell -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' "send-keys C-c \; send-keys C-c" { if-shell -F '#{selection_present}' 'send-keys -X clear-selection' 'send-keys -X cancel'; }

# bind-key   -T copy-mode    Escape send-keys -X cancel
# bind -n M-s copy-mode \; send-keys ?

  unbind-key -n              C-d
# bind-key   -T copy-mode-vi C-d              send-keys -X halfpage-down

  unbind-key -n              C-x

  bind       -n              C-x              copy-mode
  bind       -T copy-mode-vi C-x              if-shell -F '#{selection_present}' 'send-keys -X clear-selection' 'send-keys -X cancel'
# Unknown command: copy-mode-vi -- it's a mode, not a command
# bind       -n C-x                           copy-mode-vi
# bind       -n Escape                        copy-mode-vi
# bind-key   -n C-x                           confirm-before -p "kill-pane #P? (y/n)" kill-pane
# bind-key   -n C-x                           copy-mode \; \
# set -g window-active-style        fg=default,bg=$copy_mode_color


# https://stackoverflow.com/questions/59717644/tmux-force-repeat-prefix-key-for-every-command?rq=3
  set-option  -g repeat-time 0
# Remove the delay of escape key
# set        -sg escape-time 0
# set-option -sg escape-time 10
# nvim checkhealth reported error
  set-option -sg escape-time 0
  set-option -sg focus-events on
# set-option  -g focus-events on

# Tab == Ctrl-I It is jump forward
# set-option -g prefix Tab
# bind-key Tab    send-prefix

# unbind     -n              BTab
# set-option -g prefix       BTab
# bind-key                   BTab             send-prefix

# unbind -n S-Tab
# set-option -g prefix       S-Tab
# bind-key                   S-Tab            send-prefix

# Pass on Ctrl+Tab and Ctrl+Shift+Tab
# bind-key   -n              C-Tab            send-keys Escape [27\;5\;9~
# bind-key   -n              C-S-Tab          send-keys Escape [27\;6\;9~
# bind-key   -n              S-Tab            send-keys Escape Tab
# bind-key   -n              S-Tab            send-keys Shift_L Control_i

# https://unix.stackexchange.com/questions/751388/does-any-terminal-multiplexer-screen-tmux-zellij-support-job-suspension-ctr
# bind-key -T root C-z suspend-client
  unbind-key -T root C-z
# This is an error
# bind-key   -T root C-z ""
  bind-key   -T root         C-z              send-keys C-z
  bind-key   -T prefix       C-z              send-keys C-z

# For BSDs
# set -g status-utf8 on
# set -g utf8 on

# disable bell in tmux
# disable sound bell
  set -g bell-action none
# disable visual bell
  set -g visual-bell off

  set-option -g update-environment "HOME XDG_DATA_HOME MNGR_ROOT DOT_CONFIG DISPLAY WAYLAND_DISPLAY SSH_AUTH_SOCK XDG_RUNTIME_DIR"
  set-environment -g PATH "$DOT_CONFIG/terminal:/usr/local/bin:/bin:/usr/bin:/usr/sbin"

# set *sh as your default Tmux shell
  set-option -g default-shell "${SHELL}"
  set-option -g history-limit 640000
# Display status bar errors forever until any key press
  set-option -g display-time 0
# https://github.com/gigglegrig/dotfiles/blob/master/.tmux.conf
# Function keys doesn't work when using tmux/screen as TERM
# Cursor does not display in command mode in Neovim whit the following config
# https://superuser.com/questions/968942/why-does-tmux-create-new-windows-as-login-shells-by-default

# set-option -g default-command "${SHELL} -l"
# set-option -g default-command "env TERM=vt102 ${SHELL} -l"

  set-option -g default-command "TERM=linux ${SHELL} -l"
# set-option -g default-command "ENV=$HOME/.profile ${SHELL} -si"

# set-option -g default-command "env TERM=linux ${SHELL} -l"
# set-option -g default-command "env TERM=tmux-256color   ${SHELL} -l"
# set-option -g default-command "env TERM=screen-256color ${SHELL} -l"
# set-option -g default-command "${SHELL} -i"
# set-option -g default-command ". $HOME/.profile"
# https://github.com/tmux-plugins/tmux-resurrect/blob/master/docs/restoring_pane_contents.md
# Will load nothing if defined this
# set-option -g default-command "${SHELL}"
# set-option -g default-command 'printf "\033c" > "$(tmux display -p "#{client_tty}")"'
# set-option -g default-command 'printf "\033c" > $(tty)'
# The following line will  kill tmux -- MacOS only
# set-option -g default-command "reattach-to-user-namespace -l ${SHELL}"
# The following line won't kill tmux -- MacOS only
# set-option -g default-command 'reattach-to-user-namespace $SHELL --login'
# 1:1140/117:20
# https://www.youtube.com/watch?v=5r6yzFEXajQ&t=660s

# https://superuser.com/questions/767178/how-do-i-create-ctrl-key-bindings-in-vim-when-using-tmux
# set-window-option -g xterm-keys on
# set-option -gw xterm-keys on
  set-option -g  xterm-keys on
# set-option -g SuppressDEC 12
# set -s extended-keys on
  set -s extended-keys always

# https://invisible-island.net/ncurses/terminfo.src.html#tic-xterm_256color
# https://vi.stackexchange.com/questions/7112/tmux-messing-with-vim-highlighting
# https://stackoverflow.com/questions/45931164/duplicated-characters-and-non-updating-input-using-tmux-in-zsh
# https://github.com/alacritty/alacritty/issues/2487
# https://sunaku.github.io/vim-256color-bce.html

# In GUI
# [True Color (24-bit) and italics with alacritty + tmux + vim (neovim)](https://gist.github.com/andersevenrud/015e61af2fd264371032763d4ed965b6)
# [Enable italic font on tmux](https://gist.github.com/gyribeiro/4192af1aced7a1b555df06bd3781a722)

# In tty
# How to set TERM
# 1. _tmux alias
# 2. default-terminal in tmux.conf

# neovim: checkhealth
# - ERROR $TERM should be "screen-256color" or "tmux-256color" in tmux. Colors might look wrong.

# https://github.com/neovim/neovim/issues/7353
# tmux-256color to be used inside of tmux (instead of screen)
# set-option -g default-terminal    "xterm-256color"
# set-option -g default-terminal    "screen-256color-bce-s"
# set-option -g default-terminal    "screen-256color"
# set-option -g default-terminal    "tmux-256color"
  set-option -g default-terminal    "$TERM"
# terminal-overrides applies to the outside $TERM. It basically says: When starting tmux in a shell that has $TERM set to xterm-256color, add the Tc capability to tmux's internal image of tmux-256color to signalize it to use true colors.
# set-option -ga terminal-overrides ",xterm-256color:Tc"
  set-option -ga terminal-overrides ",$TERM:Tc"
  # - Put this in your ~/.tmux.conf and replace XXX by your $TERM outside of tmux:
  set-option -sa terminal-features  ',$TERM:RGB'
# tmux info | grep Tc

# https://gist.github.com/andersevenrud/015e61af2fd264371032763d4ed965b6
# TERM == tmux version
# set-option -g default-terminal "tmux-256color"

# TERM == linux version
# set-option -g default-terminal "$TERM"
# [How to pipe vim clipboard through tmux?](https://superuser.com/questions/1742713/how-to-pipe-vim-clipboard-through-tmux)
  set-option -sa terminal-features ',$TERM:clipboard'
  set-option -sa terminal-features ',foot:clipboard'
  set-option -sa terminal-features ',$TERM:256:ccolour:cstyle:extkeys:focus:margins:overline:rectfill:RGB:strikethrough:sync:title:usstyle'

# set-option -ga terminal-overrides ",tmux-256color:RGB"
# set-option -as terminal-overrides ',xterm*:sitm=\033[3m'
# set-option -as terminal-overrides "*-256color:Tc"
# set-option -ga terminal-overrides ',xterm-256color:Tc'
# set-option -ga terminal-overrides ",*256col*:Tc"

# Without this, neovim in tmux without cursorline
  set-option -sa terminal-overrides ',*:RGB'
  set-option -sa terminal-overrides ',*256col*:RGB'
  set-option -sa terminal-overrides ',$TERM:RGB'
  set-option -sa terminal-overrides ',*256col*:Tc'
# set-option -sa terminal-overrides ',*24bit:Tc'

# https://superuser.com/questions/310251/use-terminal-scrollbar-with-tmux
  set-option -ga terminal-overrides ',$TERM*:XT:smcup@:rmcup@'
# set-option -ga terminal-overrides ',screen-256color*:XT:smcup@:rmcup@'
  set-option -ga terminal-overrides ',$TERM:RGB'
# set-option -ga terminal-overrides ',screen-256color:RGB'
  set-option -ga terminal-overrides ',$TERM:Tc'
  set-option -ga terminal-overrides ',*:cud1=\033[1B'

# nvim:help tui-cursor-tmux
# set-option -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q'
# set-option -ga terminal-overrides ',*:Ss=\033[%p1%d q:Se=\033[2 q'

# Works on GUI
  set-option -ga terminal-overrides ',*:Ss=\033[%p1%d q:Se=\033[5 q'
# set-option -ga terminal-overrides ',*:Ss=\033[%p1%d q:Se=\033[ q'
# set-option -ga terminal-overrides ',*:Ss=\033[ q:Se=\033[ q'
# set-option -ga terminal-overrides ',*:Ss=\033[34l:Se=\033[?8c'

# Reset
# set-option -ga terminal-overrides ',*:Ss=\033[0 q'

# Cursor coordinates messed up
# set-option -ga terminal-overrides ',*:Ss=\033[%p1%dD:Se=\033[25h\033[?112c'
# set-option -ga terminal-overrides ',*:Ss=\033[%p1%dD:Se=\033[?112c'
#
# set-option -g cursor-style 'blinking-bar'

# https://gist.github.com/simme/1297707
# set-option -g mouse-select-pane on
# set-option -g mouse-select-window on
# set-window-option -g mode-mouse on

# [O was printed to current buffer when vim lost focus
# set-window-option -g focus-filter on
# set-option -g focus-filter on

# set-option -g mouse on
  set-option -g mouse off
  unbind-key -n M-MouseDown3Pane
  unbind-key -n M-MouseDown3Status
  unbind-key -n M-MouseDown3StatusLeft
  unbind-key -T copy-mode-vi MouseDown1Pane
  unbind-key -T copy-mode    MouseDown1Pane
  unbind-key -T copy-mode-vi MouseDrag1Pane
  unbind-key -T copy-mode    MouseDrag1Pane
  unbind-key -T copy-mode-vi MouseDragEnd1Pane
  unbind-key -T copy-mode    MouseDragEnd1Pane
  unbind-key -n   MouseDrag1Pane
  unbind-key -n   MouseDrag1Border
  unbind-key -n   MouseDown1Pane
  unbind-key -n   MouseDown1Status
  unbind-key -n   MouseDown2Pane
  unbind-key -n   MouseDown3Pane
  unbind-key -n   MouseDown3Status
  unbind-key -n   MouseDown3StatusLeft
# show-options set-clipboard
  set-option -g -s set-clipboard on
# https://github.com/ojroques/nvim-osc52
  set-option -g -s allow-passthrough all # allow passthrough of escape sequences

# https://www.guyrutenberg.com/2021/07/02/tmux-wayland-clipboard-integration/
  set-option -g -s copy-command 'wl-copy'
# tmux show-environment
# tmux showenv | awk -F= -v key="$key" '$1==key {print $2}'
# tmux setenv -t ${SESSION_NAME} "key" "value"

# [The vi-copy and emacs-copy mode key tables are gone](https://github.com/tmux/tmux/commit/76d6d3641f271be1756e41494960d96714e7ee58)
# # bind v, y, Escape keys in vi-copy mode
# bind-key   -t vi-copy v begin-selection
# bind-key   -t vi-copy y copy-selection
# bind-key   -t vi-copy Escape cancel
# bind-key   -T vi-copy      Escape send-keys -X cancel
# bind-key   -T copy-mode-vi Escape send-keys -X cancel

# https://stackoverflow.com/questions/51639540/tmux-scroll-mode-vim-keybindings
# https://blog.sanctum.geek.nz/vi-mode-in-tmux/
# https://github.com/jbranchaud/til/blob/master/tmux/enabling-vi-mode.md
# turn on vi key mode
# ["set -w" is the exact same as "setw"](https://superuser.com/questions/1425920/different-between-set-g-and-setw-g-and-set)
# setw -g mode-keys vi
  set-window-option -g mode-keys vi

# config copy-mode colors
  set-window-option -g mode-style "fg=default,bg=default,reverse"
# options: primary|secondary|clipboard
  setenv -g @yank-selection 'clipboard'

# bind-key 'v' copy-mode
  bind-key   -T copy-mode-vi v send      -X begin-selection
  bind-key   -T copy-mode-vi V send      -X select-line
# bind-key   -T copy-mode-vi y send-keys -X copy-selection-and-cancel 'xclip -in -selection clipboard'
# bind-key   -T copy-mode-vi y send-keys -X copy-selection-and-cancel 'wl-copy -sel clip -i'
# bind-key   -T copy-mode-vi y send-keys -X copy-selection 'wl-copy -sel clip -i'
# How to debug
# tmux display -p '#{@buffer_content}'
  %hidden buffer_content=""
# Works on wayland
# bind-key   -T copy-mode-vi y send-keys -X copy-selection 'wl-copy'
# Version 03
# bind-key   -T copy-mode-vi y run '[ -z "${WAYLAND_DISPLAY:+x}" ] && tmux send-keys -X copy-pipe || tmux send-keys -X copy-pipe "wl-copy -sel clip -i" ; \
# bind-key   -T copy-mode-vi y run 'tmux send-keys -X copy-pipe "wl-copy -sel clip -i" ; \
# bind-key   -T copy-mode-vi y run 'tmux send-keys -X copy-pipe ; \
# The line continuation after run does not work!
# bind-key   -T copy-mode-vi y run '\
# [ -z "${WAYLAND_DISPLAY:+x}" ] && tmux send-keys -X copy-selection || \
# tmux send-keys -X copy-pipe "wl-copy -sel clip -i" ; \
# tmux set -q @buffer_content "$(tmux show-buffer)"'
# Does not work in chroot
# bind-key   -T copy-mode-vi y run '[ -z "${WAYLAND_DISPLAY:+x}" ] && tmux send-keys -X copy-selection || \
# tmux send-keys -X copy-selection "wl-copy -sel clip -i" ; \
# tmux set -q @buffer_content "$(tmux show-buffer)"'

  unbind-key -T copy-mode-vi y

# bind-key   -T copy-mode-vi y run 'tmux send-keys -X copy-selection "wl-copy"; \
# tmux set -q @buffer_content "$(tmux show-buffer)"'

# This is the default setting -- It ensures that the tmux cache/buffer contents are sent to the system clipboard
  bind-key   -T copy-mode-vi y     send-keys -X copy-pipe
# bind-key   -T copy-mode-vi y     send-keys -X copy-selection

# tmux send-keys -X copy-selection "wl-copy -sel clip -i" ; \
# copy-pipe "wl-copy -sel clip -i" won't work on copying to wayland clipboard
# tmux send-keys -X copy-pipe "wl-copy -sel clip -i" ; \

# bind-key   -T copy-mode-vi y run 'tmux set -q "@buffer_content" "$(tmux show-buffer)"'

# bind-key   -T copy-mode-vi y send-keys -X copy-selection "sed -e 's/\#/\\\\\#/g' -e 's/\?/\\\\\?/g' | tee /tmp/tmux"
# Original definition
# bind-key   -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel # default setting
# bind-key   -T copy-mode-vi Enter send-keys -X copy-pipe
  bind       -T copy-mode-vi Enter            if-shell -F '#{selection_present}' 'send-keys -X copy-pipe' 'send-keys -X cancel'

# bind <prefix> + p to "paste"
# unbind p
# Duplicated with prefix-]
# bind-key p paste-buffer -p
# bind-key p display -p '#{@buffer_content}'
# bind-key p run 'tmux display -p "#{@buffer_content}"'
# bind-key p display '#{@buffer_content}'

  unbind-key -T copy-mode-vi C-p
# bind-key   -T copy-mode-vi C-p paste-buffer
# ctrl-shift-v
# Will wipe the tmux buffers
  unbind-key -n C-p
# bind -n C-p paste-buffer -p

  bind -n C-p run '\
  [ -z "$(tmux show-option -gqv "@display-value")" ] ||\
  $(tmux show-option -gqv "@paste-command") | tmux load-buffer -w -;\
  tmux paste-buffer -p'

# tmux show-option -gqv "@display-name"
# set-option -g @display-name  'WAYLAND_DISPLAY'
# tmux show-option -gqv "@display-value"
  set-option -g @display-value "$WAYLAND_DISPLAY"
# run 'tmux set-option -g "@display-value" "$(printf "%s" "$WAYLAND_DISPLAY")"'
# tmux show-option -gqv '@paste-command'
  set-option -g @paste-command 'wl-paste --no-newline'
# bind -n C-p run "tmux set-buffer \"$(eval \"$(tmux show-option -gqv \"@paste-command\")\")\"; tmux paste-buffer -p"
# Works. Tmux will transfer single quotes to double quotes
# bind -n C-p run '[ -z "$(tmux show-option -gqv "@display-value")" ] || tmux set-buffer "$($(tmux show-option -gqv "@paste-command"))"; tmux paste-buffer -p'


  unbind-key -T prefix :

# Works
# bind-key : run-shell "tmux set-option -wp pane-border-status off ; \
# tmux command-prompt -I \"#{l:$(tmux show-buffer)}\" -p \">\""

# tmux command-prompt -I \"#{l:$(cat /tmp/tmux)}\" -p \">\""
# tmux command-prompt -I \"#{$(cat /tmp/tmux)}\" -p \">\" \"%%%\""
# sed -e 's/\#/\\\#/g' < /tmp/tmux > _ ; mv -f _ /tmp/tmux ; \

# Version 04 -- "pane-border-status off" depends on hook
# bind-key : command-prompt -I '#{@buffer_content}' -p '>'

# Version 03
# Works for formats
  bind-key : set-option -wp pane-border-status off \; \
  command-prompt -I '#{@buffer_content}' -p '>' \; \
  run 'tmux set -u "@buffer_content"'
# run 'tmux set -u "@buffer_content" ; tmux set-option -wp pane-border-status bottom'

# command-prompt -I "#{l:#(tmux show-buffer)}" -p ">"

# Won't wait for enter
# bind-key : set-option -wp pane-border-status off \; \
# command-prompt -I '#{@buffer_content}' -p '>' \
# set-option -wp pane-border-status bottom

# "-k" doesn't work
# command-prompt -k -I '#{@buffer_content}' -p '>' \

# https://github.com/vimpostor/vim-tpipeline
# Default "bind-key :"
# command-prompt -p "(goto line)" "send -X goto-line \"%%%\""
# # bind-key : command-prompt 'set -g status-left "#{pane_id}"'
# bind-key : set-option -wp pane-border-status off \; command-prompt \; set-option -wp pane-border-status bottom
# bind-key : set-option -wp pane-border-status off \; command-prompt

# Works for formats
# bind-key : set-option -wp pane-border-status off \; \
# run 'tmux set -q @buffer_content "$(tmux show-buffer)"' \; \
# command-prompt -I "\#{@buffer_content}" -p \> \; \
# run 'tmux set -u @buffer_content'

# Won't work
# set -q @buffer_content_01 "#(tmux show-buffer)" \; \

# just work for plain-text
# command-prompt -I "\#(cat /tmp/tmux)" -p \> \; \
# set -ru @buffer_content_01
# The main reason show-buffer being failed is this line -- the "run"
# run 'command-prompt -I "\#{@buffer_content_01}" -p \> \;' \

# Works for plain-text
# bind-key : run-shell 'tmux set-option -wp pane-border-status off; tmux command-prompt -I "$(tmux show-buffer)" -p \>'
# bind-key : 'run-shell "tmux set-option -wp pane-border-status off; tmux command-prompt -I \"\$(tmux show-buffer)\" -p \\>"'

# Works for plain-text
# bind-key : run-shell "tmux set-option -wp pane-border-status off ; \
# tmux command-prompt -I \$(tmux show-buffer | sed 's/\#/\\\#/g') -p \">\""

# bind-key : run-shell "tmux set-option -wp pane-border-status off ; \
# tmux show-buffer | sed 's/\#/\\\#/g' | tee /tmp/tmux  > /dev/null ; \
# tmux command-prompt -I \$(cat /tmp/tmux) -p \">\""

# tmux command-prompt -I $(tmux show-buffer | sed -e 's/[\"\\]/\\\\&/g' -e 's/.*/\"&\"/') -p >'

# Partially Worked
# When cursor line is a tmux script, this function will fail (enter view mode)
# bind-key : run-shell "tmux set-option -wp pane-border-status off ; \
# tmux command-prompt -I \"\#{copy_cursor_word}\" -p \">\""

# Works
# bind-key : set-option -wp pane-border-status off \; \
# command-prompt -I "#{copy_cursor_word}" -p ">"

# Won't work
# bind-key : run-shell "tmux set-option -wp pane-border-status off \; tmux command-prompt -I $(printf %s $(tmux show-buffer)) -p \>"
# bind-key : set-option -wp pane-border-status off \; command-prompt -I '#(sh "$(echo $(tmux show-buffer))")' -p \>

  bind-key   -T copy-mode-vi u send-keys -X halfpage-up
  bind-key   -T copy-mode-vi , send-keys -X halfpage-down
  bind-key   -T copy-mode-vi m send-keys -X halfpage-down

# bind-key   -T copy-mode C-r command-prompt -i -I "#{pane_search_string}" -p "search up>" "send -X search-backward-incremental \"%%%\""
# bind-key   -T copy-mode C-s command-prompt -i -I "#{pane_search_string}" -p "(search down)" "send -X search-forward-incremental \"%%%\""
# bind-key   -T copy-mode-vi / command-prompt -p "(search down)" "send -X search-forward \"%%%\""
# bind-key   -T copy-mode-vi \# send-keys -FX search-backward "#{copy_cursor_word}"
# bind-key   -T copy-mode-vi *  send-keys -FX search-forward "#{copy_cursor_word}"


# unbind-key -T copy-mode-vi /
# bind-key   -T copy-mode-vi \\ command-prompt paste-buffer -p "send -X search-forward \"%%%\""
  unbind-key -T copy-mode-vi \\
# Won't work
# bind-key   -T copy-mode-vi \\ command-prompt "send -X search-forward \"#{copy_cursor_word}\""
# bind-key   -T copy-mode-vi \\ send-keys -X copy-selection \; "send -X search-forward \"%%%\""
# bind-key   -T copy-mode-vi \\ send-keys -X copy-selection send -X search-forward "%%%"
# Works
# bind-key   -T copy-mode-vi \\ command-prompt -I "#{copy_cursor_word}" -p "search up>" "send -X search-forward \"%%%\""
# bind-key   -T copy-mode-vi \\ run-shell 'tmux command-prompt -I "$(tmux show-buffer)" -p "search up>" "send -X search-forward \"%%%\""'
# bind-key   -T copy-mode-vi \\ run 'tmux command-prompt -I "$(tmux show-buffer)" -p "search up>" "send -X search-backward \"%%%\""'
# Works Version 03
# bind-key   -T copy-mode-vi \\ set-option -wp pane-border-status off \; \
# command-prompt -I '#{@buffer_content}' -p 'search up>' 'send -X search-backward "%%%"'

# Works Version 04
  bind-key   -T copy-mode-vi \\ set-option -wp pane-border-status off \; \
  send-keys -X copy-selection \; \
  run 'tmux set -q @buffer_content "$(tmux show-buffer)"' \; \
  command-prompt -I '#{@buffer_content}' -p 'search up>' 'send -X search-backward "%%%"' \; \
  run 'tmux set -u "@buffer_content"'
# run 'tmux set -u "@buffer_content" ; tmux set-option -wp pane-border-status bottom'
# send-keys -X -t '\#(cat #{pane_id})' copy-selection \; \
  unbind-key -T copy-mode-vi :
# Works Version 04
  bind-key   -T copy-mode-vi : set-option -wp pane-border-status off \; \
  send-keys -X copy-selection \; \
  run 'tmux set -q @buffer_content "$(tmux show-buffer)"' \; \
  command-prompt -p '>' -I '#{@buffer_content}' \; \
  run 'tmux set -u "@buffer_content"'
# run 'tmux set -u "@buffer_content" ; tmux set-option -wp pane-border-status bottom'

# run 'tmux command-prompt -p "cmd:" -I "$(tmux show-buffer)"'
# command-prompt -p "cmd:" -I 'send-keys -X copy-selection-no-clear ; run-shell "tmux show-buffer | %%%" '
# command-prompt -p "cmd:" -I 'send-keys -X copy-selection-no-clear ; run-shell "tmux show-buffer | %1" '

# This will lock tmux (c-q to quit)
# bind-key V run-shell "'tmux capture-pane' \; tmux capture-pane -S - \; tmux save-buffer /tmp/tmux \; \
# nvim \"+normal\ G\" +\"?^> \" /tmp/tmux"

# send-keys Escape 'invim "+normal\ G" +"?^> " /tmp/tmux' Enter

  set -g display-panes-time 4000
  set -g status-keys vi
  set-window-option -g status-keys vi
# no crrrent session
# set    status-interval 1
# set -s status-interval 1
# set -g status-interval 1
  set -g status-interval 50

# Command line style
  set -g message-style bg=default

# set-hook -g after-command-prompt 'set-option -wp pane-border-status bottom'
# set-hook -g after-refresh-client 'set-option -wp pane-border-status bottom'
# set-hook -g after-resize-pane    'set-option -wp pane-border-status bottom'
# set-hook -g after-resize-window  'set-option -wp pane-border-status bottom'
# set-hook -g after-queue          'set-option -wp pane-border-status bottom'

# set-hook -ug after-command-prompt
  set-hook -ug after-refresh-client
  set-hook -ug after-resize-pane
  set-hook -ug after-resize-window
  set-hook -ug after-queue
  set-hook -ug client-resized
  set-hook -ug pane-mode-changed
# set-hook -ug paste-buffer-changed

  set-hook -g after-queue[0] 'set-option -wp pane-border-status off'

# tmux show-hooks -g pane-mode-changed
# set-hook -g pane-mode-changed[0] 'set -g #{?pane_in_mode, #[fg=default#,bg=$prefix_background, #[fg=default#,bg=terminal}#W'
# set-hook -g pane-mode-changed[0] 'run "[ \"$(tmux display -p \"#{pane_in_mode}\")\" -ne \"0\" ] && tmux set -g window-active-style fg=default,bg=$copy_mode_color || tmux set -g window-active-style fg=default,bg=terminal"'
  set-hook -g pane-mode-changed[0] 'run "[ \"$(tmux display -p \"#{pane_in_mode}\")\" -eq 1 ] &&
  tmux set -g window-active-style fg=default,bg=$copy_mode_color ||
  tmux set -g window-active-style fg=default,bg=terminal"'
# set-hook -g pane-mode-changed[1] 'run "[ \"$(tmux display -p \"#{client_prefix}\")\" -eq 1 ] &&
# tmux set -g window-active-style fg=default,bg=$copy_mode_color ||
# tmux set -g window-active-style fg=default,bg=terminal"'
# https://github.com/tmux/tmux/issues/634
# set-hook -g pane-mode-changed { if -F "#{pane_in_mode}" "selectp -P bg=blue" "selectp -P default" }
# set-hook -g pane-mode-changed \
# '#{?pane_in_mode, \
# set -g window-active-style        fg=default,bg=$prefix_background, \
# set -g window-active-style        fg=default,bg=terminal}#W'

# set-hook -g pane-mode-changed \
# 'run "[ \"$(tmux display -p \"#{pane_in_mode}\")\" -ne \"0\" ] && \
# tmux set-option -wp pane-border-status off || \
# tmux set-option -wp pane-border-status bottom"'

# 'run "[ \"$(tmux display -p \"#{pane_in_mode}\")\" -eq \"0\" ] && \
# tmux set-option -wp pane-border-status bottom || \
# tmux set-option -wp pane-border-status off"'

# set-hook -g pane-mode-changed '#{?pane_in_mode, \
# set-option -g pane-border-status off, \
# set-option -g pane-border-status bottom}'

# set-hook -g paste-buffer-changed["buffer0"] 'run "tmux show-buffer | wl-copy"'
# set-hook -g paste-buffer-changed["buffer0"] 'run "tmux save-buffer - | wl-copy"'

  set-hook -g pane-focus-in[0] 'run "[ \"$(tmux display -p \"#{pane_in_mode}\")\" -eq 1 ] &&
  tmux set -g window-active-style fg=default,bg=$copy_mode_color ||
  tmux set -g window-active-style fg=default,bg=terminal"'

# Just disable the hook because it is counter intuitive :)
# set-hook -g after-resize-pane[0] 'run-shell "! { tmux list-panes -F \"#F\" | grep -q Z; } && \
# tmux set-option -wp pane-border-status off || \
# tmux set-option -wp pane-border-status top"'

# This is because if you don't turn off tmux screen occupation, the display status of some terminal applications might be very confusing
  set-hook -g after-resize-pane[0] 'run-shell "! { tmux list-panes -F \"#F\" | grep -q Z; } || \
  tmux set-option -wp pane-border-status off'

# set-hook -g after-resize-pane 'run-shell "tmux list-panes -F \"#F\" | grep -q Z && \
# tmux set-option -wp pane-border-status bottom || \
# tmux set-option -wp pane-border-status off"'

# set -g status-left '#(cat #{socket_path}-\#{session_id}-vimbridge)'
# set -g status-left-length 80
# set -g status-right '#(cat #{socket_path}-\#{session_id}-vimbridge-R)'
# # https://stackoverflow.com/questions/12921852/tmux-conf-update-status-commands-on-panel-focus?noredirect=1&lq=1
# set -g status-right '#(cd #{pane_current_path}; git rev-parse --abbrev-ref HEAD)'
# set -g status-right-length 80
# set -g status-justify right
# set -g status-right '#{prefix_highlight} | %a %Y-%m-%d %H:%M'

# set inactive/active window styles
# https://stackoverflow.com/questions/25532773/change-background-color-of-active-or-inactive-pane-in-tmux

# https://superuser.com/questions/480809/updating-window-indexes-with-tmux
  set-option -g renumber-windows on

# https://www.reddit.com/r/tmux/comments/8mfc2d/looking_for_a_way_to_format_paneborderstatus_via/
# https://github.com/tmux/tmux/issues/1852

# Remove tmux's status bar
  set -g status off

# https://stackoverflow.com/questions/22303820/tmux-transparent-status-bar
# error 'no current session'
# set -g status-bg colour240
# set -g status-bg default
  set -g status-style bg=default

# set -g pane-border-lines number
  set -g pane-border-lines single

# Get the border status
# show-option -vqp pane-border-status

# Default pane-border-status
  set -g pane-border-status off
# set -g pane-border-status left
# set -g pane-border-status bottom
# set -g pane-border-status top

  %hidden background="colour147"
# %hidden background="colour021"
# [tmux_256_colors.pl](https://gist.github.com/invalidusrname/1101565)
# Color settings might erase the transparency
# better splitting
# set the pane border colors
# set -g pane-border-style        'fg=default,       bg=default'
# set -g pane-border-style        'fg=#111111,       bg=default'
# set -g pane-border-style        'fg=colour020,     bg=colour020'
  set -g pane-border-style        'fg=#{background}, bg=#{background}'

# set -g pane-border-style        'hidden'
# set -g pane-active-border-style 'fg=default,       bg=default'
# set -g pane-active-border-style 'fg=colour102,     bg=default'
# set -g pane-active-border-style 'fg=#222222,       bg=default'
# set -g pane-active-border-style 'fg=colour14,      bg=default'
# set -g pane-active-border-style 'fg=colour020,     bg=terminal'
# set -g pane-active-border-style 'fg=colour020,     bg=colour020'
  set -g pane-active-border-style 'fg=#{background}, bg=#{background}'
# set -g pane-active-border-style 'hidden'


# set -g window-style             'fg=colour247,     bg=colour236'
  set -g window-style             'fg=default,       bg=#{background}'
# set -g window-style             'fg=default,       bg=default'
# set -g window-style             'hidden'

# set -g window-active-style      'fg=colour247,     bg=colour234'
# This setting will dim shell PS1
# set -g window-active-style      'fg=#111111,       bg=default'
# set -g window-active-style      'fg=default,       bg=default'
# https://unix.stackexchange.com/questions/494237/tmux-is-it-possible-to-dim-the-inactive-window-and-on-the-same-time-have-transp
# prefix_key_4
# Test this static setting off for dynamic setting
# set -g window-active-style      'fg=default,       bg=terminal'

# bind-key -T prefix b set-option -wp pane-border-status bottom

  bind-key -T prefix b \
  if-shell '[ "$(tmux display -p "#{pane-border-status}")" = "off" ]' 'set-option -wp pane-border-status top' 'set-option -wp pane-border-status off'
# echo -ne "\e]2;New Title\007"
  set-option -g set-titles on


  set -g allow-rename on
# set-window-option -g automatic-rename off
  set-option -g automatic-rename on

# Will send keystrokes to all panes
# set-window-option -g synchronize-panes on
# set-option -t 0 remain-on-exit on
# tmux respawn-pane -k -t 3.1 nvim $DOT_CONFIG/terminal/tmux.conf

# https://www.reddit.com/r/tmux/comments/55i80p/tmux_statusbar_inside_pane_rather_than_bottomtop/
# set-window-option -g pane-border-format " #P: #{pane_current_path} #{pane_current_command} "
# set -g pane-border-format "#{pane_current_path}"

# if "[ $(tmux display -p '#{pane_current_command}') = 'nvim' ]" \

# if-shell "$is_vim" \
# "set-window-option -g pane-border-format ' #P: #{pane_current_path} #{pane_title} #(cat #{socket_path}-\#{session_id}-vimbridge) #(cat #{socket_path}-\#{session_id}-vimbridge-R) '" \
# "set-window-option -g pane-border-format ' #P: #{pane_current_path} #{pane_title} ) '"

# Must use single quote
# set-window-option -g pane-border-format ' #{pane_title} #(cat #{socket_path}-\#{session_id}-vimbridge) #(cat #{socket_path}-\#{session_id}-vimbridge-R) '

# run '(tmux display-message -p "#{pane_title}" | grep -i "NVIM" \
# && "set-window-option -g pane-border-format \" #P: #{pane_current_path} #{pane_title} #(cat #{socket_path}-\#{session_id}-vimbridge) #(cat #{socket_path}-\#{session_id}-vimbridge-R) \" " ) \
# || "set-window-option -g pane-border-format \" #{pane_index} #{pane_current_command} #{pane_current_path} #{pane_title} ) \" " '

# "date" format
# -- $(date +%a\ %b\ %d,\ %H:%M:%S\ %Z\ %Y)\n\
# https://www.markneuburger.com/git-statuses-in-tmux-panes/
  set-window-option -g window-status-separator ''
# set-window-option -g window-status-current-format ' \
# #{?window_zoomed_flag, #[fg=red]#[italics], #[fg=default]#W#[fg=default]}
# '

# How to reference: #{pane_border_format}
# But can not been interpreted by tmux by default
# %hidden pane_border_format=' \
# #D : #P #T #{simple_git_status} \
# #(sh $DOT_CONFIG/terminal/pane-border-format.sh \
# "--pane-current-path=#{pane_current_path}" "--pane-active=#{pane_active}") \
# #{pane_current_command} \
# #(date)'

  set-window-option -g pane-border-format ' \
  #{?window_zoomed_flag, \
  #[fg=#ffffff]#[bg=#d70000], \
  #[fg=#00aa99]#[bg=default]} \
  #D : #P #T \
  #($DOT_CONFIG/terminal/pane-border-format.sh \
  "--pane-current-path=#{pane_current_path}" "--pane-active=#{pane_active}") #{pane_current_command} #(date) '

# set-window-option -g pane-border-format ' \
# #{?window_zoomed_flag, #[fg=#d70000]#[bg=#ffffff]#[italics], #[fg=#007777]#[bg=default]} \
# #[fg=##007777] #D: #P #T #{simple_git_status} \
# #{pane_current_command} \
# #(cat #{socket_path}-\#{session_id}-vimbridge) \
# #(cat #{socket_path}-\#{session_id}-vimbridge-R) \
# #(sh $DOT_CONFIG/terminal/pane-border-format.sh \
# "--pane-current-path=#{pane_current_path}" "--pane-active=#{pane_active}") \
# #(date)#[fg=default] \
# '

# #{?window_zoomed_flag, #[fg=#d70000]#[bg=#ffffff]#[italics], #[fg=black]#W#[fg=default]} \
# #[fg=#ffff00]#F#[fg=default] #P: #{pane_index} #{pane_title} #{simple_git_status} \
# #{pane_current_command} #{pane_current_path} \
# #P: #{pane_index} [#I #W#T] #{pane_title} #{simple_git_status} \

# https://gist.github.com/tsl0922/d79fc1f8097dde660b34
  bind-key space  next-window
  bind-key bspace previous-window
  bind-key enter  next-layout

# [How to write if statement in .tmux.conf to set different options for different tmux versions?](https://stackoverflow.com/questions/35016458/how-to-write-if-statement-in-tmux-conf-to-set-different-options-for-different-t)
if -b 'command -v /usr/bin/bash > /dev/null 2>&1' {
# %if '#(command -v /usr/bin/bash > /dev/null 2>&1)'
# %if '#{=:#(command -v /usr/bin/bash > /dev/null 2>&1 && echo "on" || echo ""),"on"}'
# has_bash='command -v /usr/bin/bash > /dev/null 2>&1 && echo "on" || echo ""'
# %if '#{=:#(if -F "$has_bash" {echo "on"} {}),"on"}'
  display -p "Has bash (it's not necessary). \"tmux-plugins\" applied on TERM: $TERM"

# set -g @plugin 'git@bitbucket.com:user/plugin'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'github_username/plugin_name'
# Other examples:

# smart pane switching with awareness of vim splits
# https://thoughtbot.com/blog/seamlessly-navigate-vim-and-tmux-splits
# # https://github.com/christoomey/vim-tmux-navigator
# /mnt/vinit/nvim/init.vim
# " let g:vim_packages_use['christoomey/vim-tmux-navigator'] = { 'type' : 'start' }
# /mnt/vinit/vim/pack/packager/start/keys/after/plugin/keys.vim
# "     silent! execute(a:navigate[a:direction])
# $DOT_CONFIG/terminal/tmux.conf

# set -g @plugin 'christoomey/vim-tmux-navigator' # Do not need it

  set -g @plugin 'tmux-plugins/tmux-sensible'

# xclip dependent -- ever
# set -g @plugin 'tmux-plugins/tmux-yank' # Do not need it
  set -g @plugin 'tmux-plugins/vim-tmux'
  set -g @plugin 'tmux-plugins/tmux-pain-control'
  set -g @plugin 'tmux-plugins/tmux-logging'
# set -g @plugin 'tmux-plugins/vim-tmux-focus-events'
  set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
  set -g @plugin 'andersondanilo/tmux-onehalf-theme'
  set -g @plugin 'tmux-plugins/tmux-cpu'
  # pip3 install --user pynvim
# set -g @plugin 'tmux-plugins/tmux-sidebar'
  set -g @plugin 'tmux-plugins/vim-sidebar'
  set -g @sidebar-tree-focus 'e'
  set -g @treemux-tree-nvim-init-file '$HOME/.tmux/plugins/treemux/configs/treemux_init.lua'
  set -g @plugin 'kiyoon/treemux'
# %endif
}

# Because of bash doesn't exist on the system
# set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @plugin 'tmux-plugins/tmux-resurrect'

# prefix + Ctrl-s - save
# prefix + Ctrl-r - restore
# prefix + I to fetch the plugin and source it



# less colourful status
# https://medium.com/@findingedward/configuring-vim-and-tmux-to-boost-your-productivity-dab44ba7db11


  set-option -g @pane_resize "5"
# No current window
  set-option -g -u window-size
# set-option -g    window-size largest
  set-window-option -g aggressive-resize
  set-window-option -g alternate-screen off

# split ratio
# use vim-like keys for splits and windows
  bind-key v run-shell 'tmux split-window -fbh -c "#{pane_current_path}"; \
  tmux resize-pane -t #{pane_id} -x $(( 2 * #{pane_width} / 3 ))'

  bind-key s run-shell 'tmux split-window -fbv -c "#{pane_current_path}"; \
  tmux resize-pane -t #{pane_id} -y $(( 2 * #{pane_height} / 3 ))'
# -y $(( $(tmux display-message -p "#{pane_height}") / 3 ))'

# bind-key - run-shell 'tmux split-window -vb -c "#{pane_current_path}"; \
# $DOT_CONFIG/terminal/tmux-layout-dwindle tlvs'
# bind-key - run-shell 'tmux split-window -vb -c "#{pane_current_path}"; \
# tmux resize-pane -t #{pane_id} -y $(( 2 * #{pane_height} / 3 ))'
  bind-key - run-shell 'tmux split-window -v -c "#{pane_current_path}"; \
  tmux resize-pane -t #{pane_id} -y $(( 5 * #{pane_height} / 7 ))'

# bind-key \\ run-shell 'tmux split-window -fhb -c "#{pane_current_path}"; \
# $DOT_CONFIG/terminal/tmux-layout-dwindle tlhs'
# bind-key \\ run-shell 'tmux split-window -hb -c "#{pane_current_path}"; \
# tmux resize-pane -t #{pane_id} -x $(( 2 * #{pane_width} / 3 ))'
  bind-key \\ run-shell 'tmux split-window -h -c "#{pane_current_path}"; \
  tmux resize-pane -t #{pane_id} -x $(( 2 * #{pane_width} / 7 ))'

# bind-key _ run-shell 'tmux split-window -fbv -c "#{pane_current_path}"; \
# $DOT_CONFIG/terminal/tmux-layout-dwindle tlvs'
# bind-key _ run-shell 'tmux split-window -fv -c "#{pane_current_path}"; \
# tmux resize-pane -t #{pane_id} -y $(( 2 * #{window_height} / 3 ))'
  bind-key _ run-shell 'tmux split-window -fv -c "#{pane_current_path}"; \
  tmux resize-pane -t #{window_id} -y $(( 2 * #{window_height} / 7 ))'

# bind-key | run-shell 'tmux split-window -hb -c "#{pane_current_path}"; \
# $DOT_CONFIG/terminal/tmux-layout-dwindle tlhs'
# bind-key | run-shell 'tmux split-window -hf -c "#{pane_current_path}"; \
# tmux resize-pane -t #{pane_id} -x $(( 2 * #{window_width} / 3 ))'
  bind-key | run-shell 'tmux split-window -fh -c "#{pane_current_path}"; \
  tmux resize-pane -t #{window_id} -x $(( 2 * #{window_width} / 7 ))'

  bind J join-pane -h -s !

  unbind '"'
  unbind %

  bind-key z resize-pane -Z
# bind-key z run-shell 'tmux resize-pane -Z; tmux send-keys -t "#{pane_id}" F7; tmux refresh-client -S'
# bind-key z run-shell 'tmux resize-pane -Z; tmux refresh-client -S'
# bind-key z resize-pane -Z \; refresh-client -S

# bind-key z set -g pane-active-border-style 'fg=colour116,bg=default' \; resize-pane -Z
# bind-key z resize-pane -Z \; send-keys F8
# Doesn't work
# bind-key z resize-pane -Z \; send-keys -t #{pane_id} F7
# bind-key x confirm-before -p "kill-pane #P? (y/n)" kill-pane \; send-keys -t "#{pane_id}" F7
  bind-key x confirm-before -p "kill-pane #P? (y/n)" kill-pane

# https://gist.github.com/MohamedAlaa/2961058
# reload config file (change file location to your the tmux.conf you want to use)
# bind-key r source-file ~/.tmux.conf\; set-option -wp pane-border-status off\; display-message \-p "refreshed"
  bind-key r source-file "$DOT_CONFIG/terminal/tmux.conf" \; \
  set-option -wp pane-border-status off \; display -p "$DOT_CONFIG/terminal/tmux.conf refreshed \nIf you see line numbers, you have encountered some errors" \; \
  display "#[fill=white bg=red align=left][$copy_mode_key/Enter to quit the prompt]" \; set -u message-style

# Does not work?
# bind -n S-Left  move-pane -h -t '.{left-of}'
# Capital H same as h
  bind <   move-pane -h -t '.{left-of}'
# bind -n S-Right move-pane -h -t '.{right-of}'
  bind >   move-pane -h -t '.{right-of}'
# bind -n S-Up    move-pane -h -t '.{up-of}'
  bind ,   move-pane -h -t '.{up-of}'
# bind -n S-Down  move-pane -h -t '.{down-of}'
  bind .   move-pane -h -t '.{down-of}'

# https://superuser.com/questions/1601701/tmux-how-to-move-current-pane-to-far-left-right-up-down-like-in-vim
# move pane to the far right/left/bottom/top
# b -- back, f[h/v] -- full height/width
  bind      H  splitw -fhb \; swapp -t ! \; killp -t !
  bind      L  splitw -fh  \; swapp -t ! \; killp -t !
  bind      J  splitw -fv  \; swapp -t ! \; killp -t !
  bind      K  splitw -fvb \; swapp -t ! \; killp -t !
# https://superuser.com/questions/1079462/tmux-keybinding-to-swap-pane-left-or-right?rq=1
# Works only in GUI environment
# bind -n M-\{ select-pane -L \; swap-pane -s !
# bind -n M-\} select-pane -U \; swap-pane -s !
# Works both in tty and GUI environments
  bind -n M-[ select-pane -L \; swap-pane -s !
  bind -n M-] select-pane -U \; swap-pane -s !
# # For Void Linux
# # ctrl + return
# bind-key -T copy-mode-vi "\x1b[13;5u" send-keys C-CR
# # ctrl + return
# bind-key -n "\x1b[13;5u" send-keys C-CR
# # shift + return
# bind-key -T copy-mode-vi "\x1b[13;2u" send-keys S-CR
# # shift + return
# bind-key -n "\x1b[13;2u" send-keys S-CR

# Paired with keybindings.lua

# bind-key -n \{ if-shell "$is_vim" 'send-keys "[ "' 'send-keys \{'
# bind-key -n S-Enter send-keys '[ '
  bind-key -n S-Enter send-keys '{'

# bind-key -n S-Enter send-keys [-Space
# Does not work in tty, and works in GUI(foot/alacritty)
# C-[ is ESC. Don't do it!
# bind-key -n C-[ send-keys '[ '
# bind-key -n '[ ' send-keys S-Enter

# Paired with keybindings.lua

# bind-key -n \} if-shell "$is_vim" 'send-keys "] "' 'send-keys \}'
# bind-key -n C-Enter send-keys '] '
  bind-key -n C-Enter send-keys '}'

# bind-key -n C-Enter send-keys ]-Space
# Does not work in tty, and works in GUI(foot/alacritty)
# bind-key -n C-] send-keys '] '
# bind-key -n '] ' send-keys C-Enter

# kf3=\033[C
# bind-key -n F2 send-keys 'OQ'
# bind-key -n F3 send-keys '[13~'
# bind-key -n F3 send-keys 'OR'
# bind-key -n 'OR' send-keys '[13~'
# bind-key -n 'C' send-keys '[13~'
# bind-key -n 'F3' send-keys '[[C'

if -b 'command -v /usr/bin/bash > /dev/null 2>&1' {
# %if '#{=:#(if -F "$has_bash" {echo "on"} {}),"on"}'
# set -g @plugin 'tmux-plugins/tmux-vim-exit'
# set -g @plugin 'ddelnano/tmux-vim-exit'
  set -g @plugin 'run27017/tmux-vim-exit'
  set -g @plugin 'roxma/vim-tmux-clipboard'
  set -g @plugin 'tmux-plugins/tmux-copycat'
  set -g @resurrect-dir '$HOME/.cache/tmux'
# https://github.com/kristijanhusak/tmux-simple-git-status
  set -g @plugin 'kristijanhusak/tmux-simple-git-status'
# List of plugins
# https://github.com/tmux-plugins/tpm
  set -g @continuum-restore 'on'
  set -g @resurrect-capture-pane-contents 'on'
  set -g @continuum-save-interval '0'

# https://github.com/tmux-plugins/tmux-logging/issues/19
  set -g @logging-path '$XDG_DATA_HOME/tmux/logs'
  set -g @logging-filename "%Y-%m-%d_#{session_name}-#{window_index}-#{pane_index}.log"


# https://github.com/tmux-plugins/tmux-resurrect/blob/master/docs/restoring_vim_and_neovim_sessions.md
  set -g @resurrect-strategy-vim 'session'

# returned 127 in busybox
# run-shell $HOME/.tmux/plugins/tmux-prefix-highlight/prefix-highlight.tmux

# Because of bash doesn't exist on the system
# run-shell $HOME/.tmux/plugins/tmux-resurrect/resurrect.tmux
# run-shell $HOME/.tmux/plugins/tmux-continuum/continuum.tmux

# https://arcolinux.com/everything-you-need-to-know-about-tmux-plugins-manager/
# prefix + I (capital i, as in Install) to fetch the plugin
# prefix + alt + u (lowercase u as in uninstall) to remove the plugin

# Because of bash doesn't exist on the system
# returned 1 in busybox
# Will demage split ratio, border color settings and has bash dependency
# run-shell '$HOME/.tmux/plugins/tpm/tpm'
  run -b '$HOME/.tmux/plugins/tpm/tpm'
# run    '$DOT_CONFIG/terminal/clone "prefix"'
# run '/usr/bin/tpm'
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)

# run-shell -b '$HOME/.tmux/plugins/tmux-resurrect/scripts/restore.sh r'
# With the tmux-resurrect plugin registered in this configuration file, login tmux without parameters first,
# tmux
# then press,
# prefix + r
# will restore the previous session

# # if run as "tmux attach", create a session if one does not already exist
# new-session -n "${HOST}"
# %endif
}

# set-option -g @use_tmux_nvim true

# if -F '#{@use_tmux_nvim}' {
if -b '[ -e "$XDG_DATA_HOME/nvim/lazy/tmux.nvim/tmux.nvim.tmux" ]' {
# %if '#{&&:#{@use_tmux_nvim}, true}'
# %if '#{@use_tmux_nvim}'
# tmux show-option -gqv '@tmux-nvim-resize'
  set-option -g @tmux-nvim-resize           true
  set-option -g @tmux-nvim-navigation-cycle true
  run -b '. $XDG_DATA_HOME/nvim/lazy/tmux.nvim/tmux.nvim.tmux'
  display -p "Using tmux.nvim \n@tmux-nvim-resize: #{@tmux-nvim-resize}\n@tmux-nvim-navigation-cycle: #{@tmux-nvim-navigation-cycle}\n[$copy_mode_key/Enter to quit the prompt]"
# %endif
} {
# if -F '#{@use_tmux_nvim}' {} {
# display -p "@use_tmux_nvim: #{@use_tmux_nvim}\nDefault key bindings for navigation and resize applied"
  display -p "Default key bindings for navigation and resize applied"
# %if '#{&&:#{@use_tmux_nvim}, false}'
# %if '! #{@use_tmux_nvim}'

# @is-vim was set in keys.vim/tmux.lua: tmux show-option '#(tmux show -pqv '@is-vim')'
  bind -n C-h if-shell -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' "send-keys C-h"  "select-pane -L"
  bind -n C-j if-shell -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' "send-keys C-j"  "select-pane -D"
  bind -n C-k if-shell -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' "send-keys C-k"  "select-pane -U"
  bind -n C-l if-shell -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' "send-keys C-l"  "select-pane -R"
# bind -n 'C-\' if-shell -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' "send-keys 'C-\\'" "select-pane -l"

  bind -n C-Up    if-shell -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' 'send-keys C-k' 'select-pane -U'
  bind -n C-Down  if-shell -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' 'send-keys C-j' 'select-pane -D'
  bind -n C-Left  if-shell -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' 'send-keys C-h' 'select-pane -L'
  bind -n C-Right if-shell -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' 'send-keys C-l' 'select-pane -R'

# Add Nvim terminal emulator key mappings #172
# https://github.com/christoomey/vim-tmux-navigator/pull/172

  tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
  if-shell -b '[ "$(echo "$tmux_version <  3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell -b '[ \"$(tmux show -pqv '@is-vim')\" = \"on\" ]' 'send-keys C-\\' 'select-pane -l'"
  if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell -b '[ \"$(tmux show -pqv '@is-vim')\" = \"on\" ]' 'send-keys C-\\\\' 'select-pane -l'"

  bind-key -T copy-mode-vi C-k select-pane -U
  bind-key -T copy-mode-vi C-j select-pane -D
  bind-key -T copy-mode-vi C-h select-pane -L
  bind-key -T copy-mode-vi C-l select-pane -R

# bind-key -T copy-mode-vi 'C-\' select-pane -l
# Works on Openmandriva
# bind-key -n 'C-\;' send-keys 'C-\;'
# wayland and tty have different effects
# bind-key -n 'C-;' send-keys 'C-;'

  bind -r C-k select-pane -U
  bind -r C-j select-pane -D
  bind -r C-h select-pane -L
  bind -r C-l select-pane -R
# https://github.com/tmux/tmux/issues/1827

# bind -r "C-\\" select-pane -l

# Smart pane resizing with awareness of Vim splits.
# See: https://github.com/RyanMillerC/better-vim-tmux-resizer
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# Edit values if you use custom resize_count variables
  bind-key -n M-k if-shell -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' "send-keys M-k" "resize-pane -U 2"
  bind-key -n M-j if-shell -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' "send-keys M-j" "resize-pane -D 2"
  bind-key -n M-h if-shell -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' "send-keys M-h" "resize-pane -L 5"
  bind-key -n M-l if-shell -b '[ "$(tmux show -pqv '@is-vim')" = "on" ]' "send-keys M-l" "resize-pane -R 5"

  bind-key -T copy-mode-vi M-k resize-pane -U 2
  bind-key -T copy-mode-vi M-j resize-pane -D 2
  bind-key -T copy-mode-vi M-h resize-pane -L 5
  bind-key -T copy-mode-vi M-l resize-pane -R 5
# %endif
}

# https://www.reddit.com/r/bash/comments/zg069a/reset_terminal_but_keep_scrollback_buffer/
  bind -n M-b send-keys -R \; clear-history


