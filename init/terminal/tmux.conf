
# If you happened to trigger this key combination, $mod+shift+q in wayland will save you
# https://superuser.com/questions/1271190/restore-tmux-client-after-suspend-client
# kill -CONT <pid>
# bind-key -T prefix C-z suspend-client

# https://unix.stackexchange.com/questions/57641/reload-of-tmux-config-not-unbinding-keys-bind-key-is-cumulative
# Unbind ALL keybindings whilst REBINDING defaults
# unbind-key -a
# source ~/.tmux.reset.conf
run-shell '\
	export f=$(mktemp -t) \
	&& tmux -f /dev/null -L temp start-server \; list-keys > $f \
	&& tmux unbind-key -a \; && tmux unbind-key -n -a \; source-file $f'

# bind-key -T copy-mode-vi y send -X copy-selection-and-cancel 'xclip -in -selection clipboard'
# C-[, C-3 euqals to Esc. So you can not quit vim insert mode normally if entered
# bind-key -n 'C-['  copy-mode
unbind-key -n 'C-['
unbind-key -n Escape
# bind-key -n 'M-Up' copy-mode
# bind-key -n 'M-s'  copy-mode
# vim help use C-] to jump
# bind-key -n 'C-]'  copy-mode
unbind-key -n 'C-]'

# unbind-key -n 'C-c'

# https://unix.stackexchange.com/questions/293746/tmux-how-to-bind-a-key-to-enter-in-vi-mode-and-search-backwards
# bind -n M-s  copy-mode
# bind -n M-Up copy-mode
# C-3, C-\[ equal to 'Escape'. You don't want to use it
# How to quit insert mode under this circumstance? quit tmux copy-mode and press F1
# C-\[ equals Esc
# bind -n C-\[ copy-mode
# /mnt/init/terminal/tmux.conf:297: unknown command: copy-mode-vi
# bind -n C-x copy-mode-vi
# bind -n C-x copy-mode
# bind -n M-s copy-mode \; send-keys ?

bind-key -n 'C-x' copy-mode
unbind C-b
bind-key -n 'C-b' run-shell "/mnt/init/terminal/tmux-layout-dwindle brvc"

# remap prefix from 'C-b' to 'C-a'
# bind C-a send-prefix
# set -g prefix C-a
# better prefix key

# set-option -g prefix C-a
# bind-key C-a send-prefix
set-option -g prefix `
bind-key ` send-prefix
# Tab == Ctrl-I It is jump forward
# set-option -g prefix Tab
# bind-key Tab send-prefix
# Escape is in charge of quiting edit mode in vi
# set-option -g prefix Escape
# bind-key Escape send-prefix

# https://unix.stackexchange.com/questions/751388/does-any-terminal-multiplexer-screen-tmux-zellij-support-job-suspension-ctr
# bind-key -T root C-z suspend-client
unbind-key -T root C-z
# This is an error
# bind-key -T root C-z ""
bind-key -T root   C-z send-keys C-z
bind-key -T prefix C-z send-keys C-z

# For BSDs
# set -g status-utf8 on
# set -g utf8 on

set-option -g focus-events on
set-option -sg escape-time 10
# nvim checkhealth reported error
# set-option -sg escape-time 0

# disable bell in tmux
# disable sound bell
set -g bell-action none
# disable visual bell
set -g visual-bell off
set-environment -g PATH "/usr/local/bin:/bin:/usr/bin:/usr/sbin"
# set *sh as your default Tmux shell
set-option -g default-shell "${SHELL}"
set-option -g history-limit 640000
# Display status bar errors forever until any key press
set-option -g display-time 0
# https://github.com/gigglegrig/dotfiles/blob/master/.tmux.conf
# Function keys doesn't work when using tmux/screen as TERM
# Cursor does not display in command mode in Neovim whit the following config
# https://superuser.com/questions/968942/why-does-tmux-create-new-windows-as-login-shells-by-default
# set-option -g default-command "${SHELL} -l"
# set-option -g default-command "env TERM=vt102 ${SHELL} -l"
# set-option -g default-command "TERM=linux ${SHELL} -l"
# set-option -g default-command "env TERM=linux ${SHELL} -l"
# set-option -g default-command "env TERM=tmux-256color ${SHELL} -l"
# set-option -g default-command "env TERM=screen-256color ${SHELL} -l"
# set-option -g default-command ". $HOME/.profile"
# set-option -g default-command "${SHELL}
# https://github.com/tmux-plugins/tmux-resurrect/blob/master/docs/restoring_pane_contents.md
# Will load nothing if defined this
# set-option -g default-command "${SHELL}"

# The following line will kill tmux
# set-option -g default-command "reattach-to-user-namespace -l ${SHELL}"

# # 1:1140/117:20
# # https://www.youtube.com/watch?v=5r6yzFEXajQ&t=660s

# https://superuser.com/questions/767178/how-do-i-create-ctrl-key-bindings-in-vim-when-using-tmux
# set-window-option -g xterm-keys on
# set-option -gw xterm-keys on
set-option -g xterm-keys on
# set-option -g SuppressDEC 12
set -s extended-keys on

# https://invisible-island.net/ncurses/terminfo.src.html#tic-xterm_256color
# https://vi.stackexchange.com/questions/7112/tmux-messing-with-vim-highlighting
# https://stackoverflow.com/questions/45931164/duplicated-characters-and-non-updating-input-using-tmux-in-zsh
# https://github.com/alacritty/alacritty/issues/2487
# https://sunaku.github.io/vim-256color-bce.html

# In GUI
# [True Color (24-bit) and italics with alacritty + tmux + vim (neovim)](https://gist.github.com/andersevenrud/015e61af2fd264371032763d4ed965b6)
# [Enable italic font on tmux](https://gist.github.com/gyribeiro/4192af1aced7a1b555df06bd3781a722)

# In tty
# How to set TERM
# 1. _tmux alias
# 2. default-terminal in tmux.conf

# neovim: checkhealth
# - ERROR $TERM should be "screen-256color" or "tmux-256color" in tmux. Colors might look wrong.
# set-option -g default-terminal "xterm-256color"
# set-option -g default-terminal "screen-256color-bce-s"
# set-option -g default-terminal "screen-256color"

# https://gist.github.com/andersevenrud/015e61af2fd264371032763d4ed965b6
# TERM == tmux version
# set-option -g default-terminal "tmux-256color"

# TERM == linux version
set-option -g default-terminal "$TERM"

set-option -sa terminal-features 'clipboard:256:ccolour:cstyle:extkeys:focus:margins:overline:rectfill:RGB:strikethrough:sync:title:usstyle'

# set -ga terminal-overrides ",tmux-256color:RGB"
# set -as terminal-overrides ',xterm*:sitm=\033[3m'
# set -as terminal-overrides "*-256color:Tc"
# set -ga terminal-overrides ',xterm-256color:Tc'
# set -ga terminal-overrides ",*256col*:Tc"

# Without this, neovim in tmux without cursorline
set-option -sa terminal-overrides ',*:RGB'
set-option -sa terminal-overrides ',*256col*:Tc'
# set-option -sa terminal-overrides ',*24bit:Tc'

# https://superuser.com/questions/310251/use-terminal-scrollbar-with-tmux
set-option -ga terminal-overrides ',$TERM*:XT:smcup@:rmcup@'
# set-option -ga terminal-overrides ',screen-256color*:XT:smcup@:rmcup@'
set-option -ga terminal-overrides ',$TERM:RGB'
# set-option -ga terminal-overrides ',screen-256color:RGB'
set-option -ga terminal-overrides ',$TERM:Tc'
set-option -ga terminal-overrides ',*:cud1=\033[1B'

# nvim:help tui-cursor-tmux
# set -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q'
# set-option -ga terminal-overrides ',*:Ss=\033[%p1%d q:Se=\033[2 q'

# Works on GUI
set-option -ga terminal-overrides ',*:Ss=\033[%p1%d q:Se=\033[5 q'

# set-option -ga terminal-overrides ',*:Ss=\033[%p1%d q:Se=\033[ q'

# set-option -ga terminal-overrides ',*:Ss=\033[ q:Se=\033[ q'

# set-option -ga terminal-overrides ',*:Ss=\033[34l:Se=\033[?8c'

# Reset
# set-option -ga terminal-overrides ',*:Ss=\033[0 q'

# Cursor coordinates messed up
# set-option -ga terminal-overrides ',*:Ss=\033[%p1%dD:Se=\033[25h\033[?112c'
# set-option -ga terminal-overrides ',*:Ss=\033[%p1%dD:Se=\033[?112c'

# set-option -g cursor-style 'blinking-bar'

# https://gist.github.com/simme/1297707
# set-option -g mouse-select-pane on
# set-option -g mouse-select-window on
# set-window-option -g mode-mouse on

# [O was printed to current buffer when vim lost focus
# set-window-option -g focus-filter on
# set-option -g focus-filter on

# set-option -g mouse on
set-option -g mouse off
# show-options set-clipboard
set-option -g -s set-clipboard on
# https://www.guyrutenberg.com/2021/07/02/tmux-wayland-clipboard-integration/
set-option -g -s copy-command 'wl-copy'
# tmux show-environment
# tmux showenv | awk -F= -v key="$key" '$1==key {print $2}'
# tmux setenv -t ${SESSION_NAME} "key" "value"

set-option -g update-environment "DISPLAY WAYLAND_DISPLAY SSH_AUTH_SOCK XDG_RUNTIME_DIR"

# # bind v, y, Escape keys in vi-copy mode
# bind-key -t vi-copy v begin-selection
# bind-key -t vi-copy y copy-selection
# bind-key -t vi-copy Escape cancel

# bind <prefix> + p to "paste"
unbind p
bind-key p paste-buffer
# https://stackoverflow.com/questions/51639540/tmux-scroll-mode-vim-keybindings
# https://blog.sanctum.geek.nz/vi-mode-in-tmux/
# turn on vi key mode
# ["set -w" is the exact same as "setw"](https://superuser.com/questions/1425920/different-between-set-g-and-setw-g-and-set)
setw -g mode-keys vi

# bind-key 'v' copy-mode
set-window-option -g mode-keys vi
# config copy-mode colors
set-window-option -g mode-style "fg=default,bg=default,reverse"
# options: primary|secondary|clipboard
setenv -g @yank-selection 'clipboard'

bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi V send -X select-line
# bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel 'wl-copy -sel clip -i'
# bind-key -T copy-mode-vi y send-keys -X copy-selection 'wl-copy -sel clip -i'
%hidden buffer_content=""
# Works on wayland
# bind-key -T copy-mode-vi y send-keys -X copy-selection 'wl-copy'
# Version 03
# bind-key -T copy-mode-vi y run '[ -z "${WAYLAND_DISPLAY:+x}" ] && tmux send-keys -X copy-pipe || tmux send-keys -X copy-pipe "wl-copy -sel clip -i" ; \
# bind-key -T copy-mode-vi y run 'tmux send-keys -X copy-pipe "wl-copy -sel clip -i" ; \
# bind-key -T copy-mode-vi y run 'tmux send-keys -X copy-pipe ; \
# The line continuation after run does not work!
# bind-key -T copy-mode-vi y run '\
# [ -z "${WAYLAND_DISPLAY:+x}" ] && tmux send-keys -X copy-selection || \
# tmux send-keys -X copy-pipe "wl-copy -sel clip -i" ; \
# tmux set -q @buffer_content "$(tmux show-buffer)"'
bind-key -T copy-mode-vi y run '[ -z "${WAYLAND_DISPLAY:+x}" ] && tmux send-keys -X copy-selection || \
tmux send-keys -X copy-pipe "wl-copy -sel clip -i" ; \
tmux set -q @buffer_content "$(tmux show-buffer)"'
# bind-key -T copy-mode-vi y run 'tmux set -q "@buffer_content" "$(tmux show-buffer)"'

# bind-key -T copy-mode-vi y send-keys -X copy-selection "sed -e 's/\#/\\\\\#/g' -e 's/\?/\\\\\?/g' | tee /tmp/tmux"

# Original definition
# bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe

bind-key -T copy-mode-vi C-p paste-buffer
bind -n C-p run '\
[ -z "${WAYLAND_DISPLAY:+x}" ] || \
wl-paste --no-newline | tmux load-buffer - ; \
tmux paste-buffer'

# bind-key -T copy-mode-vi y send-keys -X copy-selection

unbind-key -T prefix :

# Works
# bind-key : run-shell "tmux set-option -wp pane-border-status off ; \
# tmux command-prompt -I \"#{l:$(tmux show-buffer)}\" -p \">\""

# tmux command-prompt -I \"#{l:$(cat /tmp/tmux)}\" -p \">\""
# tmux command-prompt -I \"#{$(cat /tmp/tmux)}\" -p \">\" \"%%%\""
# sed -e 's/\#/\\\#/g' < /tmp/tmux > _ ; mv -f _ /tmp/tmux ; \

# Version 04 -- "pane-border-status off" depends on hook
# bind-key : command-prompt -I '#{@buffer_content}' -p '>'

# Version 03
# Works for formats
bind-key : set-option -wp pane-border-status off \; \
command-prompt -I '#{@buffer_content}' -p '>' \; \
run 'tmux set -u "@buffer_content"'
# run 'tmux set -u "@buffer_content" ; tmux set-option -wp pane-border-status bottom'

# command-prompt -I "#{l:#(show-buffer)}" -p ">"

# Won't wait for enter
# bind-key : set-option -wp pane-border-status off \; \
# command-prompt -I '#{@buffer_content}' -p '>' \
# set-option -wp pane-border-status bottom

# "-k" doesn't work
# command-prompt -k -I '#{@buffer_content}' -p '>' \

# https://github.com/vimpostor/vim-tpipeline
# Default "bind-key :"
# command-prompt -p "(goto line)" "send -X goto-line \"%%%\""
# # bind-key : command-prompt 'set -g status-left "#{pane_id}"'
# bind-key : set-option -wp pane-border-status off \; command-prompt \; set-option -wp pane-border-status bottom
# bind-key : set-option -wp pane-border-status off \; command-prompt

# Works for formats
# bind-key : set-option -wp pane-border-status off \; \
# run 'tmux set -q @buffer_content "$(tmux show-buffer)"' \; \
# command-prompt -I "\#{@buffer_content}" -p \> \; \
# run 'tmux set -u @buffer_content'

# Won't work
# set -q @buffer_content_01 "#(tmux show-buffer)" \; \

# just work for plain-text
# command-prompt -I "\#(cat /tmp/tmux)" -p \> \; \
# set -ru @buffer_content_01
# The main reason show-buffer being failed is this line -- the "run"
# run 'command-prompt -I "\#{@buffer_content_01}" -p \> \;' \

# Works for plain-text
# bind-key : run-shell 'tmux set-option -wp pane-border-status off; tmux command-prompt -I "$(tmux show-buffer)" -p \>'
# bind-key : 'run-shell "tmux set-option -wp pane-border-status off; tmux command-prompt -I \"\$(tmux show-buffer)\" -p \\>"'

# Works for plain-text
# bind-key : run-shell "tmux set-option -wp pane-border-status off ; \
# tmux command-prompt -I \$(tmux show-buffer | sed 's/\#/\\\#/g') -p \">\""

# bind-key : run-shell "tmux set-option -wp pane-border-status off ; \
# tmux show-buffer | sed 's/\#/\\\#/g' | tee /tmp/tmux  > /dev/null ; \
# tmux command-prompt -I \$(cat /tmp/tmux) -p \">\""

# tmux command-prompt -I $(tmux show-buffer | sed -e 's/[\"\\]/\\\\&/g' -e 's/.*/\"&\"/') -p >'

# Partially Worked
# When cursor line is a tmux script, this function will fail (enter view mode)
# bind-key : run-shell "tmux set-option -wp pane-border-status off ; \
# tmux command-prompt -I \"\#{copy_cursor_word}\" -p \">\""

# Works
# bind-key : set-option -wp pane-border-status off \; \
# command-prompt -I "#{copy_cursor_word}" -p ">"

# Won't work
# bind-key : run-shell "tmux set-option -wp pane-border-status off \; tmux command-prompt -I $(printf %s $(tmux show-buffer)) -p \>"
# bind-key : set-option -wp pane-border-status off \; command-prompt -I '#(sh "$(echo $(tmux show-buffer))")' -p \>

bind-key -T copy-mode-vi u send-keys -X halfpage-up
bind-key -T copy-mode-vi , send-keys -X halfpage-down
bind-key -T copy-mode-vi m send-keys -X halfpage-down

# bind-key -T copy-mode C-r command-prompt -i -I "#{pane_search_string}" -p "search up>" "send -X search-backward-incremental \"%%%\""
# bind-key -T copy-mode C-s command-prompt -i -I "#{pane_search_string}" -p "(search down)" "send -X search-forward-incremental \"%%%\""
# bind-key -T copy-mode-vi / command-prompt -p "(search down)" "send -X search-forward \"%%%\""
# bind-key -T copy-mode-vi \# send-keys -FX search-backward "#{copy_cursor_word}"
# bind-key -T copy-mode-vi *  send-keys -FX search-forward "#{copy_cursor_word}"


# unbind-key  -T copy-mode-vi /
# bind-key -T copy-mode-vi \\ command-prompt paste-buffer -p "send -X search-forward \"%%%\""
unbind-key -T copy-mode-vi \\
# Won't work
# bind-key -T copy-mode-vi \\ command-prompt "send -X search-forward \"#{copy_cursor_word}\""
# bind-key -T copy-mode-vi \\ send-keys -X copy-selection \; "send -X search-forward \"%%%\""
# bind-key -T copy-mode-vi \\ send-keys -X copy-selection send -X search-forward "%%%"
# Works
# bind-key -T copy-mode-vi \\ command-prompt -I "#{copy_cursor_word}" -p "search up>" "send -X search-forward \"%%%\""
# bind-key -T copy-mode-vi \\ run-shell 'tmux command-prompt -I "$(tmux show-buffer)" -p "search up>" "send -X search-forward \"%%%\""'
# bind-key -T copy-mode-vi \\ run 'tmux command-prompt -I "$(tmux show-buffer)" -p "search up>" "send -X search-backward \"%%%\""'
# Works Version 03
# bind-key -T copy-mode-vi \\ set-option -wp pane-border-status off \; \
# command-prompt -I '#{@buffer_content}' -p 'search up>' 'send -X search-backward "%%%"'

# Works Version 04
bind-key -T copy-mode-vi \\ set-option -wp pane-border-status off \; \
send-keys -X copy-selection \; \
run 'tmux set -q @buffer_content "$(tmux show-buffer)"' \; \
command-prompt -I '#{@buffer_content}' -p 'search up>' 'send -X search-backward "%%%"' \; \
run 'tmux set -u "@buffer_content"'
# run 'tmux set -u "@buffer_content" ; tmux set-option -wp pane-border-status bottom'
# send-keys -X -t '\#(cat #{pane_id})' copy-selection \; \
unbind-key -T copy-mode-vi :
# Works Version 04
bind-key -T copy-mode-vi : set-option -wp pane-border-status off \; \
send-keys -X copy-selection \; \
run 'tmux set -q @buffer_content "$(tmux show-buffer)"' \; \
command-prompt -p '>' -I '#{@buffer_content}' \; \
run 'tmux set -u "@buffer_content"'
# run 'tmux set -u "@buffer_content" ; tmux set-option -wp pane-border-status bottom'

# run 'tmux command-prompt -p "cmd:" -I "$(tmux show-buffer)"'
# command-prompt -p "cmd:" -I 'send-keys -X copy-selection-no-clear ; run-shell "tmux show-buffer | %%%" '
# command-prompt -p "cmd:" -I 'send-keys -X copy-selection-no-clear ; run-shell "tmux show-buffer | %1" '

# This will lock tmux (c-q to quit)
# bind-key V run-shell "'tmux capture-pane' \; tmux capture-pane -S - \; tmux save-buffer /tmp/tmux \; \
# nvim \"+normal\ G\" +\"?^> \" /tmp/tmux"

# send-keys Escape 'invim "+normal\ G" +"?^> " /tmp/tmux' Enter


set -g status-keys vi
set-window-option -g status-keys vi
# no crrrent session
# set status-interval 1
# set -s status-interval 1
# set -g status-interval 1
set -g status-interval 50

# https://stackoverflow.com/questions/22303820/tmux-transparent-status-bar
# error 'no current session'
# set status-bg default
# set -g status-bg colour240
set -g status-bg default
# set -g status-style bg=default
set-option -g status-style bg=default

# Command line style
set -g message-style bg=default

# set-hook -g after-command-prompt 'set-option -wp pane-border-status bottom'
# set-hook -g after-refresh-client 'set-option -wp pane-border-status bottom'
# set-hook -g after-resize-pane    'set-option -wp pane-border-status bottom'
# set-hook -g after-resize-window  'set-option -wp pane-border-status bottom'
# set-hook -g after-queue          'set-option -wp pane-border-status bottom'

# set-hook -ug after-command-prompt
set-hook -ug after-refresh-client
set-hook -ug after-resize-pane
set-hook -ug after-resize-window
set-hook -ug after-queue
set-hook -ug client-resized
set-hook -ug pane-mode-changed

set-hook -g after-queue 'set-option -wp pane-border-status off'

# set-hook -g pane-mode-changed \
# 'run "[ \"$(tmux display -p \"#{pane_in_mode}\")\" -ne \"0\" ] && \
# tmux set-option -wp pane-border-status off || \
# tmux set-option -wp pane-border-status bottom"'

# 'run "[ \"$(tmux display -p \"#{pane_in_mode}\")\" -eq \"0\" ] && \
# tmux set-option -wp pane-border-status bottom || \
# tmux set-option -wp pane-border-status off"'

# set-hook -g pane-mode-changed '#{?pane_in_mode, \
# set-option -g pane-border-status off, \
# set-option -g pane-border-status bottom}'
#
# Just disable the hook because it is counter intuitive :)
set-hook -g after-resize-pane 'run-shell "! { tmux list-panes -F \"#F\" | grep -q Z; } && \
tmux set-option -wp pane-border-status off || \
tmux set-option -wp pane-border-status top"'

# set-hook -g after-resize-pane 'run-shell "tmux list-panes -F \"#F\" | grep -q Z && \
# tmux set-option -wp pane-border-status bottom || \
# tmux set-option -wp pane-border-status off"'

# set -g status-left '#(cat #{socket_path}-\#{session_id}-vimbridge)'
# set -g status-left-length 80
# set -g status-right '#(cat #{socket_path}-\#{session_id}-vimbridge-R)'
# # https://stackoverflow.com/questions/12921852/tmux-conf-update-status-commands-on-panel-focus?noredirect=1&lq=1
# set -g status-right '#(cd #{pane_current_path}; git rev-parse --abbrev-ref HEAD)'
# set -g status-right-length 80
# set -g status-justify right
# set -g status-right '#{prefix_highlight} | %a %Y-%m-%d %H:%M'

# set inactive/active window styles
# https://stackoverflow.com/questions/25532773/change-background-color-of-active-or-inactive-pane-in-tmux

# set -g window-style 'fg=colour247,bg=colour236'
# set -g window-style 'fg=default,bg=default'
set -g window-style 'hidden'
# set -g window-active-style 'fg=colour247,bg=colour234'
# This setting will dim shell PS1
# set -g window-active-style 'fg=#111111,bg=default'
set -g window-active-style 'fg=default,bg=default'

# https://www.reddit.com/r/tmux/comments/8mfc2d/looking_for_a_way_to_format_paneborderstatus_via/
# https://github.com/tmux/tmux/issues/1852

# Remove tmux's status bar
set-option -g status off

# set-option -g pane-border-lines number
set-option -g pane-border-lines single
# Default pane-border-status
# set-option -g pane-border-status off
# set-option -g pane-border-status left
# set-option -g pane-border-status bottom
set-option -g pane-border-status top
# Get the border status
# show-option -vqp pane-border-status
# bind-key -T prefix b set-option -wp pane-border-status bottom
bind-key -T prefix b \
if-shell '[ "$(tmux display -p "#{pane-border-status}")" = "off" ]' 'set-option -wp pane-border-status top' 'set-option -wp pane-border-status off'
# echo -ne "\e]2;New Title\007"
set-option -g set-titles on


set -g allow-rename on
# set-window-option -g automatic-rename off
set-option -g automatic-rename on

# Will send keystrokes to all panes
# set-window-option -g synchronize-panes on
# set-option -t 0 remain-on-exit on
# tmux respawn-pane -k -t 3.1 nvim /mnt/init/terminal/tmux.conf

# https://www.reddit.com/r/tmux/comments/55i80p/tmux_statusbar_inside_pane_rather_than_bottomtop/
# set-window-option -g pane-border-format " #P: #{pane_current_path} #{pane_current_command} "
# set -g pane-border-format "#{pane_current_path}"

# if "[ $(tmux display -p '#{pane_current_command}') = 'nvim' ]" \

# if-shell "$is_vim" \
# "set-window-option -g pane-border-format ' #P: #{pane_current_path} #{pane_title} #(cat #{socket_path}-\#{session_id}-vimbridge) #(cat #{socket_path}-\#{session_id}-vimbridge-R) '" \
# "set-window-option -g pane-border-format ' #P: #{pane_current_path} #{pane_title} ) '"

# Must use single quote
# set-window-option -g pane-border-format ' #{pane_title} #(cat #{socket_path}-\#{session_id}-vimbridge) #(cat #{socket_path}-\#{session_id}-vimbridge-R) '

# run '(tmux display-message -p "#{pane_title}" | grep -i "NVIM" \
# && "set-window-option -g pane-border-format \" #P: #{pane_current_path} #{pane_title} #(cat #{socket_path}-\#{session_id}-vimbridge) #(cat #{socket_path}-\#{session_id}-vimbridge-R) \" " ) \
# || "set-window-option -g pane-border-format \" #{pane_index} #{pane_current_command} #{pane_current_path} #{pane_title} ) \" " '

# "date" format
# -- $(date +%a\ %b\ %d,\ %H:%M:%S\ %Z\ %Y)\n\
# https://www.markneuburger.com/git-statuses-in-tmux-panes/

# set-window-option -g window-status-current-format ' \
# #{?window_zoomed_flag, #[fg=red]#[italics], #[fg=default]#W#[fg=default]}
# '

# Color settings might erase the transparency
# better splitting
# set the pane border colors
# set -g pane-border-style 'fg=colour16,bg=default'
set -g pane-border-style 'hidden'
# set -g pane-active-border-style 'fg=colour102,bg=default'
# set -g pane-active-border-style 'fg=#222222,bg=default'
set -g pane-active-border-style 'fg=#111111,bg=default'

# set-option -g pane-border-style fg=default,bg=default
# set-option -g pane-active-border-style fg=default,bg=default

# How to reference: #{pane_border_format}
# But can not been interpreted by tmux by default
# %hidden pane_border_format=' \
# #D : #P #T #{simple_git_status} \
# #(sh ${SHARE_PREFIX}/init/terminal/pane-border-format.sh \
# "--pane-current-path=#{pane_current_path}" "--pane-active=#{pane_active}") \
# #{pane_current_command} \
# #(date)'

set-window-option -g pane-border-format ' \
#{?window_zoomed_flag, \
#[fg=#ffffff]#[bg=#d70000], \
#[fg=#00aa99]#[bg=default]} \
#D : #P #T \
#(${SHARE_PREFIX}/init/terminal/pane-border-format.sh \
"--pane-current-path=#{pane_current_path}" "--pane-active=#{pane_active}") #{pane_current_command} #(date) '

# set-window-option -g pane-border-format ' \
# #{?window_zoomed_flag, #[fg=#d70000]#[bg=#ffffff]#[italics], #[fg=#007777]#[bg=default]} \
# #[fg=##007777] #D: #P #T #{simple_git_status} \
# #{pane_current_command} \
# #(cat #{socket_path}-\#{session_id}-vimbridge) \
# #(cat #{socket_path}-\#{session_id}-vimbridge-R) \
# #(sh ${SHARE_PREFIX}/init/terminal/pane-border-format.sh \
# "--pane-current-path=#{pane_current_path}" "--pane-active=#{pane_active}") \
# #(date)#[fg=default] \
# '

# #{?window_zoomed_flag, #[fg=#d70000]#[bg=#ffffff]#[italics], #[fg=black]#W#[fg=default]} \
# #[fg=#ffff00]#F#[fg=default] #P: #{pane_index} #{pane_title} #{simple_git_status} \
# #{pane_current_command} #{pane_current_path} \
# #P: #{pane_index} [#I #W#T] #{pane_title} #{simple_git_status} \

# https://gist.github.com/tsl0922/d79fc1f8097dde660b34
bind-key space  next-window
bind-key bspace previous-window
bind-key enter  next-layout




# set -g @plugin 'git@bitbucket.com:user/plugin'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'github_username/plugin_name'
# Other examples:

# smart pane switching with awareness of vim splits
# https://thoughtbot.com/blog/seamlessly-navigate-vim-and-tmux-splits
# # https://github.com/christoomey/vim-tmux-navigator
# /mnt/vinit/nvim/init.vim
# " let g:vim_packages_use['christoomey/vim-tmux-navigator'] = { 'type' : 'start' }
# /mnt/vinit/vim/pack/packager/start/keys/after/plugin/keys.vim
# "     silent! execute(a:navigate[a:direction])
# /mnt/init/terminal/tmux.conf
# set -g @plugin 'christoomey/vim-tmux-navigator'

set -g @plugin 'tmux-plugins/tmux-sensible'
# xclip dependent
# set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/vim-tmux'
set -g @plugin 'tmux-plugins/vim-sidebar'
set -g @sidebar-tree-focus 'e'
set -g @plugin 'tmux-plugins/tmux-pain-control'
set -g @plugin 'tmux-plugins/tmux-logging'
# set -g @plugin 'tmux-plugins/vim-tmux-focus-events'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'andersondanilo/tmux-onehalf-theme'
set -g @plugin 'tmux-plugins/tmux-cpu'

# Because of bash doesn't exist on the system
# set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @plugin 'tmux-plugins/tmux-resurrect'

# prefix + Ctrl-s - save
# prefix + Ctrl-r - restore
# prefix + I to fetch the plugin and source it



# less colourful status
# https://medium.com/@findingedward/configuring-vim-and-tmux-to-boost-your-productivity-dab44ba7db11


set-option -g @pane_resize "5"
# No current window
set-option -g -u window-size
set-window-option -g alternate-screen off

# split ratio
# use vim-like keys for splits and windows
bind-key v run-shell 'tmux split-window -hb -c "#{pane_current_path}"; \
tmux resize-pane -t #{pane_id} -x $(( 2 * #{pane_width} / 3 ))'

bind-key s run-shell 'tmux split-window -vb -c "#{pane_current_path}"; \
tmux resize-pane -t #{pane_id} -y $(( 2 * #{pane_height} / 3 ))'
# -y $(( $(tmux display-message -p "#{pane_height}") / 3 ))'

# bind - run-shell 'tmux split-window -vb -c "#{pane_current_path}"; \
# /mnt/init/terminal/tmux-layout-dwindle tlvs'
# bind - run-shell 'tmux split-window -vb -c "#{pane_current_path}"; \
# tmux resize-pane -t #{pane_id} -y $(( 2 * #{pane_height} / 3 ))'
bind - run-shell 'tmux split-window -v -c "#{pane_current_path}"; \
tmux resize-pane -t #{pane_id} -y $(( #{pane_height} / 3 ))'

# bind \\ run-shell 'tmux split-window -fhb -c "#{pane_current_path}"; \
# /mnt/init/terminal/tmux-layout-dwindle tlhs'
# bind \\ run-shell 'tmux split-window -hb -c "#{pane_current_path}"; \
# tmux resize-pane -t #{pane_id} -x $(( 2 * #{pane_width} / 3 ))'
bind \\ run-shell 'tmux split-window -h -c "#{pane_current_path}"; \
tmux resize-pane -t #{pane_id} -x $(( #{pane_width} / 3 ))'

# bind _ run-shell 'tmux split-window -fvb -c "#{pane_current_path}"; \
# /mnt/init/terminal/tmux-layout-dwindle tlvs'
# bind _ run-shell 'tmux split-window -fv -c "#{pane_current_path}"; \
# tmux resize-pane -t #{pane_id} -y $(( 2 * #{window_height} / 3 ))'
bind _ run-shell 'tmux split-window -fv -c "#{pane_current_path}"; \
tmux resize-pane -t #{pane_id} -y $(( #{window_height} / 3 ))'

# bind | run-shell 'tmux split-window -hb -c "#{pane_current_path}"; \
# /mnt/init/terminal/tmux-layout-dwindle tlhs'
# bind | run-shell 'tmux split-window -hf -c "#{pane_current_path}"; \
# tmux resize-pane -t #{pane_id} -x $(( 2 * #{window_width} / 3 ))'
bind | run-shell 'tmux split-window -hf -c "#{pane_current_path}"; \
tmux resize-pane -t #{pane_id} -x $(( #{window_width} / 3 ))'

bind j join-pane -h -s !

unbind '"'
unbind %

bind-key z resize-pane -Z
# bind-key z run-shell 'tmux resize-pane -Z; tmux send-keys -t "#{pane_id}" F7; tmux refresh-client -S'
# bind-key z run-shell 'tmux resize-pane -Z; tmux refresh-client -S'
# bind-key z resize-pane -Z \; refresh-client -S

# bind-key z set -g pane-active-border-style 'fg=colour116,bg=default' \; resize-pane -Z
# bind-key z resize-pane -Z \; send-keys F8
# Doesn't work
# bind-key z resize-pane -Z \; send-keys -t #{pane_id} F7
# bind-key x confirm-before -p "kill-pane #P? (y/n)" kill-pane \; send-keys -t "#{pane_id}" F7
bind-key x confirm-before -p "kill-pane #P? (y/n)" kill-pane

# https://gist.github.com/MohamedAlaa/2961058
# reload config file (change file location to your the tmux.conf you want to use)
# bind r source-file ~/.tmux.conf\; set-option -wp pane-border-status off\; display-message \-p "refreshed"
bind r source-file ~/.tmux.conf \; \
run 'tmux set-option -wp pane-border-status off; tmux display-message -p "refreshed"'

# # switch panes using Alt-arrow without prefix
# bind -n M-Left select-pane -L
# bind -n M-Right select-pane -R
# bind -n M-Up select-pane -U
# bind -n M-Down select-pane -D
#
# bind -n C-Left select-pane -L
# bind -n C-Right select-pane -R
# bind -n C-Up select-pane -U
# bind -n C-Down select-pane -D

# https://thoughtbot.com/blog/seamlessly-navigate-vim-and-tmux-splits
# smart pane switching with awareness of vim splits
# bind -n C-k  run "(tmux display-message -p '#{pane_current_command}' | grep -i vim && tmux send-keys C-k) || tmux select-pane -U"
# bind -n C-j  run "(tmux display-message -p '#{pane_current_command}' | grep -i vim && tmux send-keys C-j) || tmux select-pane -D"
# bind -n C-h  run "(tmux display-message -p '#{pane_current_command}' | grep -i vim && tmux send-keys C-h) || tmux select-pane -L"
# bind -n C-l  run "(tmux display-message -p '#{pane_current_command}' | grep -i vim && tmux send-keys C-l) || tmux select-pane -R"
# bind -n C-\\ run "(tmux display-message -p '#{pane_current_command}' | grep -i vim && tmux send-keys 'C-\\') || tmux select-pane -l"




# neomux tends to modify EDITOR value
# bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -i '${EDITOR}' && tmux send-keys C-k) || tmux select-pane -U"
# bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -i '${EDITOR}' && tmux send-keys C-j) || tmux select-pane -D"
# bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -i '${EDITOR}' && tmux send-keys C-h) || tmux select-pane -L"
# bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -i '${EDITOR}' && tmux send-keys C-l) || tmux select-pane -R"
# # C-\ will generate error: "Unkown key: C- run" -- use shell command t to reproduce it
# # function t() { run_under_tmux rtorrent 'nice -n 19 ionice -c 3 rtorrent'; }
# bind -n C-\\ run "(tmux display-message -p '#{pane_current_command}' | grep -i '${EDITOR}' && tmux send-keys 'C-\\') || tmux select-pane -l"





# bind -n 'C-k' run "(tmux display-message '#{pane_current_command}' |  grep -i vim && tmux send-keys C-k) || tmux select-pane -U"
# bind -n 'C-j' run "(tmux display-message '#{pane_current_command}' |  grep -i vim && tmux send-keys C-j) || tmux select-pane -D"
# bind -n 'C-h' run "(tmux display-message '#{pane_current_command}' |  grep -i vim && tmux send-keys C-h) || tmux select-pane -L"
# bind -n 'C-l' run "(tmux display-message '#{pane_current_command}' |  grep -i vim && tmux send-keys C-l) || tmux select-pane -R"
# bind -n 'C-\' run "(tmux display-message '#{pane_current_command}' |  grep -i vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# # https://gist.github.com/mislav/5189704
# bind -n C-k if "[ $(tmux display -p '#{pane_current_command}') = vim-huge ]" "send-keys C-w C-k" "select-pane -U"
# bind -n C-j if "[ $(tmux display -p '#{pane_current_command}') = vim-huge ]" "send-keys C-w C-j" "select-pane -D"
# bind -n C-h if "[ $(tmux display -p '#{pane_current_command}') = vim-huge ]" "send-keys C-w C-h" "select-pane -L"
# bind -n C-l if "[ $(tmux display -p '#{pane_current_command}') = vim-huge ]" "send-keys C-w C-l" "select-pane -R"

# bind -n C-k if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C-<" "select-pane -U"
# bind -n C-j if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C->" "select-pane -D"
# bind -n C-h if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C-," "select-pane -L"
# bind -n C-l if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C-." "select-pane -R"

# # works design
# bind -n C-k if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C-k" "select-pane -U"
# bind -n C-j if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C-j" "select-pane -D"
# bind -n C-h if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C-h" "select-pane -L"
# bind -n C-l if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C-l" "select-pane -R"

# bind -n M-k if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys M-k" "resize-pane -U 5"
# bind -n M-j if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys M-j" "resize-pane -D 5"
# bind -n M-h if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys M-h" "resize-pane -L 10"
# bind -n M-l if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys M-l" "resize-pane -R 10"

# https://vi.stackexchange.com/questions/8538/how-to-remap-c-whjkl-to-navigate-tmux-panes-and-vim-splits
# https://github.com/christoomey/vim-tmux-navigator
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
# :TmuxNavigatorProcessList
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# # https://gist.github.com/mislav/5189704
# is_vim="ps c -o 'stat=,command=' -t '#{pane_tty}' 2>/dev/null \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# is_vim="ps -o stat,comm= -T /dev/pts/9|grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# is_vim="tmux display-message -p '#{pane_current_command}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# is_vim="tmux display-message -p '#{pane_current_command}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
is_vim="tmux display-message -p '#{pane_current_command}' | grep -iqE 'vi'"

# smart pane switching with awareness of vim splits
# https://stackoverflow.com/questions/47400291/tmux-run-fish-shell-functions-returns-error-127
# 'if tmux display-message -p 'nvim' | grep -iqE 'vi'; then tmux send-keys C-h   ; else  tmux select-pane -L; fi' returned 127
# bind -n C-h   run-shell "if $is_vim; then tmux send-keys C-h   ; else  tmux select-pane -L; fi"
# bind -n C-j   run-shell "if $is_vim; then tmux send-keys C-j   ; else  tmux select-pane -D; fi"
# bind -n C-k   run-shell "if $is_vim; then tmux send-keys C-k   ; else  tmux select-pane -U; fi"
# bind -n C-l   run-shell "if $is_vim; then tmux send-keys C-l   ; else  tmux select-pane -R; fi"
# bind -n 'C-\' run-shell "if $is_vim; then tmux send-keys 'C-\\'; else  tmux select-pane -l; fi"

# bind -n C-l   run 'container=$(tmux display-message -p "#{pane_current_command}") ; [ "${container}" = "nvim" ] && tmux send-keys C-l || tmux select-pane -R'
# Also works
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

# bind-key -n 'C-\' if-shell "$is_vim" 'send-keys C-\'  'select-pane -l'

bind -n C-Up    if-shell "$is_vim" 'send-keys C-k' 'select-pane -U'
bind -n C-Down  if-shell "$is_vim" 'send-keys C-j' 'select-pane -D'
bind -n C-Left  if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
bind -n C-Right if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'

# Add Nvim terminal emulator key mappings #172
# https://github.com/christoomey/vim-tmux-navigator/pull/172

# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iE 'vim'"
#
# bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' 'select-pane -U'
# bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' 'select-pane -D'
# bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
# bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'


# bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-w C-h' 'select-pane -L'
# bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-w C-j' 'select-pane -D'
# bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-w C-k' 'select-pane -U'
# bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-w C-l' 'select-pane -R'

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Doesn't work
# bind-key -n C-w switch-client -T VIMWINDOWS
# bind-key -T VIMWINDOWS h if-shell "$is_vim" "send-keys C-a C-h" "select-pane -L"
# bind-key -T VIMWINDOWS j if-shell "$is_vim" "send-keys C-a C-j" "select-pane -D"
# bind-key -T VIMWINDOWS k if-shell "$is_vim" "send-keys C-a C-k" "select-pane -U"
# bind-key -T VIMWINDOWS l if-shell "$is_vim" "send-keys C-a C-l" "select-pane -R"

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
	"bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\' 'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
	"bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\' 'select-pane -l'"

bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-l' select-pane -R

# bind-key -T copy-mode-vi 'C-\' select-pane -l

# C-L are being used for select-pane -R
# bind C-l send-keys 'C-l'
# Works on Openmandriva
# bind-key -n 'C-\;' send-keys 'C-\;'
# wayland and tty have different effects
# bind-key -n 'C-;' send-keys 'C-;'

bind -r 'C-k' run "tmux select-pane -U"
bind -r 'C-j' run "tmux select-pane -D"
bind -r 'C-h' run "tmux select-pane -L"
bind -r 'C-l' run "tmux select-pane -R"
# https://github.com/tmux/tmux/issues/1827

# bind -r "C-\\" run "tmux select-pane -l"


# Smart pane resizing with awareness of Vim splits.
# See: https://github.com/RyanMillerC/better-vim-tmux-resizer
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# Edit values if you use custom resize_count variables
bind-key -n M-k if-shell "$is_vim" "send-keys M-k" "resize-pane -U 5"
bind-key -n M-j if-shell "$is_vim" "send-keys M-j" "resize-pane -D 5"
bind-key -n M-h if-shell "$is_vim" "send-keys M-h" "resize-pane -L 10"
bind-key -n M-l if-shell "$is_vim" "send-keys M-l" "resize-pane -R 10"

# bind-key -n M-k "resize-pane -U 2"
# bind-key -n M-j "resize-pane -D 2"
# bind-key -n M-h "resize-pane -L 5"
# bind-key -n M-l "resize-pane -R 5"

bind-key -T copy-mode-vi M-k resize-pane -U 2
bind-key -T copy-mode-vi M-j resize-pane -D 2
bind-key -T copy-mode-vi M-h resize-pane -L 5
bind-key -T copy-mode-vi M-l resize-pane -R 5

bind -n S-Left  move-pane -h -t '.{left-of}'
bind -n S-Right move-pane -h -t '.{right-of}'
bind -n S-Up    move-pane -h -t '.{up-of}'
bind -n S-Down  move-pane -h -t '.{down-of}'

# https://superuser.com/questions/1601701/tmux-how-to-move-current-pane-to-far-left-right-up-down-like-in-vim
# move pane to the far right/left/bottom/top
bind H splitw -fhb \; swapp -t ! \; killp -t !
bind L splitw -fh  \; swapp -t ! \; killp -t !
bind J splitw -fv  \; swapp -t ! \; killp -t !
bind K splitw -fvb \; swapp -t ! \; killp -t !

set -s extended-keys on
# # For Void Linux
# # ctrl + return
# bind-key -T copy-mode-vi "\x1b[13;5u" send-keys C-CR
# # ctrl + return
# bind-key -n "\x1b[13;5u" send-keys C-CR
# # shift + return
# bind-key -T copy-mode-vi "\x1b[13;2u" send-keys S-CR
# # shift + return
# bind-key -n "\x1b[13;2u" send-keys S-CR

# Paired with keybindings.lua

# bind-key -n \{ if-shell "$is_vim" 'send-keys "[ "' 'send-keys \{'
# bind-key -n S-Enter send-keys '[ '
bind-key -n S-Enter send-keys '{'

# bind-key -n S-Enter send-keys [-Space
# Does not work in tty, and works in GUI(foot/alacritty)
# C-[ is ESC. Don't do it!
# bind-key -n C-[ send-keys '[ '
# bind-key -n '[ ' send-keys S-Enter

# Paired with keybindings.lua

# bind-key -n \} if-shell "$is_vim" 'send-keys "] "' 'send-keys \}'
# bind-key -n C-Enter send-keys '] '
bind-key -n C-Enter send-keys '}'

# bind-key -n C-Enter send-keys ]-Space
# Does not work in tty, and works in GUI(foot/alacritty)
# bind-key -n C-] send-keys '] '
# bind-key -n '] ' send-keys C-Enter

# kf3=\033[C
# bind-key -n F2 send-keys 'OQ'
# bind-key -n F3 send-keys '[13~'
# bind-key -n F3 send-keys 'OR'
# bind-key -n 'OR' send-keys '[13~'
# bind-key -n 'C' send-keys '[13~'
# bind-key -n 'F3' send-keys '[[C'

# set -g @plugin 'tmux-plugins/tmux-vim-exit'
# set -g @plugin 'ddelnano/tmux-vim-exit'
set -g @plugin 'run27017/tmux-vim-exit'
set -g @plugin 'roxma/vim-tmux-clipboard'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @resurrect-dir '$HOME/.cache/tmux'
# https://github.com/kristijanhusak/tmux-simple-git-status
set -g @plugin 'kristijanhusak/tmux-simple-git-status'
# List of plugins
# https://github.com/tmux-plugins/tpm
set -g @continuum-restore 'on'
set -g @resurrect-capture-pane-contents 'on'
set -g @continuum-save-interval '0'

# https://github.com/tmux-plugins/tmux-logging/issues/19
set -g @logging-path '$XDG_DATA_HOME/tmux/logs'
set -g @logging-filename "%Y-%m-%d_#{session_name}-#{window_index}-#{pane_index}.log"


# https://github.com/tmux-plugins/tmux-resurrect/blob/master/docs/restoring_vim_and_neovim_sessions.md
set -g @resurrect-strategy-vim 'session'

# returned 127 in busybox
# run-shell $HOME/.tmux/plugins/tmux-prefix-highlight/prefix-highlight.tmux

# Because of bash doesn't exist on the system
# run-shell $HOME/.tmux/plugins/tmux-resurrect/resurrect.tmux
# run-shell $HOME/.tmux/plugins/tmux-continuum/continuum.tmux

# https://arcolinux.com/everything-you-need-to-know-about-tmux-plugins-manager/
# prefix + I (capital i, as in Install) to fetch the plugin
# prefix + alt + u (lowercase u as in uninstall) to remove the plugin
# run -b '~/.tmux/plugins/tpm/tpm'

# Because of bash doesn't exist on the system
# returned 1 in busybox
# Will demage split ratio, border color settings and has bash dependency
# run-shell '$HOME/.tmux/plugins/tpm/tpm'

# run '/usr/bin/tpm'
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)

# run-shell -b '$HOME/.tmux/plugins/tmux-resurrect/scripts/restore.sh r'
# With the tmux-resurrect plugin registered in this configuration file, login tmux without parameters first,
# tmux
# then press,
# prefix + r
# will restore the previous session

# # if run as "tmux attach", create a session if one does not already exist
# new-session -n "${HOST}"


# # Smart pane switching with awareness of vim splits
# bind -n C-k run-shell '$SHARE_PREFIX/local/bin/tmux-vim-select-pane -U'
# bind -n C-j run-shell '$SHARE_PREFIX/local/bin/tmux-vim-select-pane -D'
# bind -n C-h run-shell '$SHARE_PREFIX/local/bin/tmux-vim-select-pane -L'
# bind -n C-l run-shell '$SHARE_PREFIX/local/bin/tmux-vim-select-pane -R'
# bind -n "C-\\" run-shell '$SHARE_PREFIX/local/bin/tmux-vim-select-pane -l'


