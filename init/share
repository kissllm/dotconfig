#!/bin/sh

# Calling sequence
# share->profile->shrc->env

# Option implementations was deprecated
# How to use
# share -s /mnt -h $HOME

# set -eu

# # shellcheck disable=SC2034
# VERSION="0.1"

# parser_definition() {
#   setup   REST help:usage -- "Usage: example.sh [options]... [arguments]..." ''
#   msg -- 'Options:'
#   flag    FLAG      -f --flag                  -- "takes no arguments"
#   param   SHARE_PREFIX -s --share_root            -- "share shell scripts root"
#   param   HOME  -h --home                  -- "should be applied user home"
#   option  OPTION    -o --option on:"default"   -- "takes one optional argument"
#   disp    :usage    -h --help
#   disp    VERSION   --version
# }
#
# [ "${GETOPTIONS:-}" ] && return 0
#
# case ${MODE:-command} in
#   command | library)
#     if [ "${MODE:-}" = "library" ]; then
#       # shellcheck disable=SC1091
#       . ./getoptions-library.sh
#     fi
#     eval "$(getoptions parser_definition -) exit 1" ;;
#   parser)
#     # shellcheck disable=SC1091
#     . ./getoptions-parser.sh ;;
# esac
#
# echo "FLAG: $FLAG, SHARE_PREFIX: $SHARE_PREFIX, HOME: $HOME, OPTION: $OPTION"
# printf '%s\n' "$@"

alias //='lineno="$LINENO"'

[ ! -z "${SHARE_PREFIX:+x}" ] ||
[ ! -d "/mnt/init" ] || {
    SHARE_PREFIX="/mnt"
    export SHARE_PREFIX
}
[ ! -z "${SHARE_PREFIX:+x}" ] ||
[ ! -d "/opt/init" ] || {
    SHARE_PREFIX="/opt"
    export SHARE_PREFIX
}

[ -z "${USE_SHELDON:+x}" ] || {
    [ -d ${SHELDON_CONFIG_DIR} ] ||
        mkdir -p ${SHELDON_CONFIG_DIR}

    [ -d ${SHELDON_DATA_DIR} ] || {
        mkdir -p ${SHELDON_DATA_DIR}

        [ -d ${SHELDON_DATA_DIR}/repos ] ||
            mkdir -p ${SHELDON_DATA_DIR}/repos

        [ -d ${SHELDON_DATA_DIR}/downloads ] ||
            mkdir -p ${SHELDON_DATA_DIR}/downloads
    }
}

[ -n "${SHELL##*"zsh"*}" ] || {
    ln -sf ${SHARE_PREFIX}/init/shell/zsh          ${HOME}/.zinit
    ln -sf ${SHARE_PREFIX}/init/shell/zsh/zshrc    ${HOME}/.zshrc
    ln -sf ${SHARE_PREFIX}/init/shell/zsh/zshenv   ${HOME}/.zshenv
    ln -sf ${SHARE_PREFIX}/init/shell/zsh/zlogin   ${HOME}/.zlogin
    ln -sf ${SHARE_PREFIX}/init/shell/zsh/zprofile ${HOME}/.zprofile
}

link_correct() {
    local target="$1"
    [ "${target:$((${#target}-1)):1}" = '/' ] && target="${target%/}"
    local anchor="$2"

    [ -n "${anchor:+x}" ] || {
        echo "Empty anchor input for $target ad $lineno"
        exit 1
    }

    { [ -h "$anchor" ] || [ -L "$anchor" ]; } && {
        [ "$(readlink -fn "$anchor")" = "$target" ] || {
            doas \rm -f "$anchor"
            doas \ln -sf -- "$target" "$anchor"
        }
    } || {
        [ "${anchor:$((${#anchor}-1)):1}" = '/' ] && {
            local anchor_standard="${anchor%/}"
            [ "${anchor_standard##*/}" != "${target##*/}" ] || {
                doas \rm -rf "$anchor_standard"
                anchor="$anchor_standard"
            }
        } || {
            [ "${anchor##*/}" != "${target##*/}" ] && {
                "Non link/weird name anchor input for $target at $lineno"
                exit 1
            } ||
            doas \rm -rf "$anchor"
        }
        local anchor_dir="${anchor%/*}"
        [ -d "$anchor_dir" ] || doas \mkdir -p "$anchor_dir"
        doas \ln -sf -- "$target" "$anchor"
    }
    # -T is GNU specific (BusyBox ln doesn't support -h), while -n doesn't work
    # doas \ln -sTf -- "$target" "$anchor"
}

[ "$(cat /etc/hostname)" != "kiss" ] || {
// link_correct "${SHARE_PREFIX}/init/share"                       "/etc/profile.d/share.sh"
// link_correct "${SHARE_PREFIX}/init/xdg-runtime-dir"             "/etc/profile.d/xdg-runtime-dir.sh"
// link_correct "${SHARE_PREFIX}/init/nouveau"                     "/etc/profile.d/nouveau.sh"
// link_correct "${SHARE_PREFIX}/init/iwl"                         "/etc/profile.d/iwl.sh"
// link_correct "${SHARE_PREFIX}/init/kiss-env"                    "/etc/profile.d/kiss-env.sh"
// link_correct "${SHARE_PREFIX}/init/etc/grub.d/10_linux"         "/etc/grub.d/10_linux"
// link_correct "${SHARE_PREFIX}/init/etc/inittab"                 "/etc/inittab"
// link_correct "${SHARE_PREFIX}/init/etc/modprobe.d/iwldvm.conf"  "/etc/modprobe.d/iwldvm.conf"
// link_correct "${SHARE_PREFIX}/init/etc/modprobe.d/iwlmvm.conf"  "/etc/modprobe.d/iwlmvm.conf"
// link_correct "${SHARE_PREFIX}/init/etc/modprobe.d/iwlwifi.conf" "/etc/modprobe.d/iwlwifi.conf"
}

// link_correct "${SHARE_PREFIX}/init/xdg-runtime-dir" "$HOME/.xdg-runtime-dir"
[ -n "${XDG_CONFIG_HOME:+x}" ] || . "$HOME/.xdg-runtime-dir"

[ -n "${WAYLAND_CONFIG_HOME:+x}" ] ||
WAYLAND_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}/wayland"
export WAYLAND_CONFIG_HOME
// link_correct "${SHARE_PREFIX}/init/wayland/env" "${WAYLAND_CONFIG_HOME}/env"

// link_correct "${SHARE_PREFIX}/init/profile"              "${HOME}/.profile"
// link_correct "${SHARE_PREFIX}/init/ashrc"                "${HOME}/.ashrc"
// link_correct "${SHARE_PREFIX}/init/terminal/tmux.conf"   "${HOME}/.tmux.conf"
// link_correct "${SHARE_PREFIX}/init/terminal/tmux"        "${HOME}/.tmux"
// link_correct "${SHARE_PREFIX}/init/editor/nvim/init.vim" "${HOME}/.vimrc"
// link_correct "${SHARE_PREFIX}/init/editor/vim"           "${HOME}/.vim"
// link_correct "${SHARE_PREFIX}/init/editor/nvim"          "${XDG_CONFIG_HOME}/nvim"

[ ! -L "${XDG_DATA_HOME}/nvim" ] || \rm -f "${XDG_DATA_HOME}/nvim"
[ -d "${XDG_DATA_HOME}/nvim" ] || mkdir -p "${XDG_DATA_HOME}/nvim"

[ ! -L "${XDG_DATA_HOME}/nvim/site" ] || \rm -f "${XDG_DATA_HOME}/nvim/site"
[ -d "${XDG_DATA_HOME}/nvim/site" ] || \mkdir -p "${XDG_DATA_HOME}/nvim/site"

# Default editor packages is based on musl libc on current system
// link_correct "${SHARE_PREFIX}/init/editor/nvim/site/pack" \
    "${XDG_DATA_HOME}/nvim/site/pack"
# If you have additional musl libc builds of the editor
# ! expr "$KISS_XHOST_ABI" : "musl" > /dev/null 2>&1 ||
# // link_correct "${SHARE_PREFIX}/init/editor/nvim/site/pack-musl" \
#     "${XDG_DATA_HOME}/nvim/site/pack"

[ ! -L "${XDG_DATA_HOME}/nvim/site/parser" ] ||
\rm -f "${XDG_DATA_HOME}/nvim/site/parser"
[ -d "${XDG_DATA_HOME}/nvim/site/parser" ] ||
\mkdir -p "${XDG_DATA_HOME}/nvim/site/parser"

# [ ! -L ${XDG_CONFIG_HOME}/coc ] ||
#     \rm -f ${XDG_CONFIG_HOME}/coc
# \ln -sf ${SHARE_PREFIX}/init/editor/coc ${XDG_CONFIG_HOME}/coc

export loaded_share=
