#! /bin/sh
# Initialize the environment variables/flags/repositories

alias /='eval'
alias //='lineno="$LINENO"'
newline="
"

SCRIPT_NAME="kiss-env" && export SCRIPT_NAME

[ ! -z "$(type "env_reset" > /dev/null && type "env_reset")" ] &&
[ ! -z "${SHARE_PREFIX:+x}" ] ||
{
	[ -f "/mnt/init/include/route" ] &&
	. /mnt/init/include/route
} || {
	printf '%s %s\n' '$env_reset' "'$env_reset' could not get defined"
	exit 0
}

# SCRIPT_NAME="kiss-env" && export SCRIPT_NAME
#
# # share folder initialization
# [ ! -z "${SHARE_PREFIX:+x}" ] || {
#   [ -d "/mnt/init" ] &&
#   { SHARE_PREFIX="/mnt" && export SHARE_PREFIX; } || {
#       [ -d "/opt/init" ] &&
#       { SHARE_PREFIX="/opt" && export SHARE_PREFIX; } ||
#       printf '%s %s\n' '$SHARE_PREFIX' "not found"
#   }
# }
#
# _functions="/usr/include/kiss/functions"
# [ -f "$_functions" ] ||
# _functions="$SHARE_PREFIX/init/include/functions"
# [ ! -f "$_functions" ] && {
#   printf '%s %s\n' '$_functions' "'$_functions' does not exist"
#   exit 0
# } || {
#   env_reset_type="$(type "env_reset" > /dev/null 2>&1 && type "env_reset")" || :
#   [ ! -z "${env_reset_type:+x}" ] ||
#       . "$_functions"
# }

# kiss_root         : "$1"
# kiss_repo_local   : "$2"
# repo_root         : "$3"
# repo_main_source  : "$4"
repo_main() {

	# local kiss_repo_name="$1"
	# shift 1
	# local kiss_root="${1:?"Fake root can not be empty"}"
	# Empty means the local host
	local kiss_root="$1"
	# In kiss_repo_name="$1" version, if you use "kiss_repo" as local variable name,
	# it will localize the output name "kiss_repo"
	local kiss_repo_local="$2"
	local repo_root="$3"
	local repo_main_source="$4"
	local repo_main_auchor="$kiss_root/${kiss_repo_local#*/}"
	[ -d "$kiss_root/${repo_root#*/}" ] ||  \mkdir -p "$kiss_root/${repo_root#*/}"

	[ ! -e "$repo_main_source" ] &&
		printf '%s %s\n' '$repo_main_source' "'$repo_main_source' [for $kiss_root/${kiss_repo_local#*/}] does not exist" ||
	[ -d "$repo_main_auchor" ] || {
		[ -L "$repo_main_auchor" ] ||
		[ -h "$repo_main_auchor" ]
	} || {
		[ "$(readlink -fn "$repo_root")" != "$(readlink -fn "$REPO_ROOT_IMPL")" ] || {
			printf '%s %s\n' '$repo_root' "'$repo_root' has local settings and can not be same as '$REPO_ROOT_IMPL'"
			printf '%s %s\n' '$LAYOUT_INIT' "'$LAYOUT_INIT' has the details"
			# exit 1
			return 0
		}
		[ ! -L "$repo_main_auchor" ] &&
		$cmd_link -- "$repo_main_source" "$repo_main_auchor" ||
		[ "$(readlink -fn "$repo_main_auchor")" = "$(readlink -fn "$repo_main_source")" ] || {
			\rm -f "$repo_main_auchor" || {
				printf '%s %s\n' '$repo_root/main' "'$repo_root/main' modification failed"
				# exit 1
				return 0
			}

			$cmd_link -- "$repo_main_source" "$repo_main_auchor"
		}
	}
	# / $kiss_repo_name="$repo_main_source"
	printf "$RS%s" "$repo_main_source"
}

# : "${LOGNAME:="$(id -nu)"}" && export LOGNAME
// env_reset LOGNAME "$(id -nu)"
: ${KISS_TMPDIR:="/tmp/$USER/kiss"} && export KISS_TMPDIR
// env_reset SYS_OUTPUT   "$KISS_TMPDIR/logs/sys.log"
[ -d "${SYS_OUTPUT%/*}" ] || \mkdir -p "${SYS_OUTPUT%/*}"

# If you insist to update local system
# KISS_ROOT= && export KISS_ROOT
# Or if unset, kiss package manager will set it to '/'
# [ -z "${KISS_ROOT+x}" ] || unset KISS_ROOT
#
# By default use a target address (/opt/kiss or /mnt/kiss)
# /mnt/kiss might be a mount point of /dev/nvme0n1p3 ... something
# /opt/kiss normally has larger size (20 GB is recommended) on plain local filesystem
# Thiese two values are put to prevent from ruining local systemm by accident
# export KISS_ROOT="/opt/kiss" BOOTSTRAP=
: ${KISS_ROOT="/opt/kiss"} && export KISS_ROOT
[ -d "$KISS_ROOT" ] || \mkdir -p "$KISS_ROOT"

// env_reset SHARE_PREFIX_DEV "/opt"

: "${REPO_ROOT:="/var/db/kiss"}" && export REPO_ROOT
: "${REPO_ROOT_IMPL:="$SHARE_PREFIX_DEV/${REPO_ROOT#*/}"}" && export REPO_ROOT_IMPL


# : "${KISS_REPO="$REPO_ROOT/lm"}" && export KISS_REPO
# Whatever folder name you'd like to use
// env_reset KISS_REPO "$REPO_ROOT/main"
# This is the real KISS_REPO
# Link to a local development repo root
# Actually it is a recommended way to avoid maintaining a seperate repo
repo_main_source="$REPO_ROOT_IMPL/lm"

# repo_main "kiss_repo" "$KISS_ROOT" "$KISS_REPO" "$REPO_ROOT" "$repo_main_source"
kiss_repo="$(// delegate -- repo_main "$KISS_ROOT" "$KISS_REPO" "$REPO_ROOT" "$repo_main_source")"
printf '%s %s\n' '$kiss_repo' "$kiss_repo" >> "$SYS_OUTPUT"
KISS_PATH=''

[ -z "${KISS_DEBUG+x}" ] || {
	# Later ones have higher priority
	[ -z "${KISS_PATH:+x}" ] &&
		KISS_PATH=$REPO_ROOT_IMPL/kiss-repo-repos ||
		KISS_PATH=$REPO_ROOT_IMPL/kiss-repo-repos:$KISS_PATH

	KISS_PATH=$REPO_ROOT_IMPL/repos/flatpak/flatpak:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/cemkeylan/personal:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/cemkeylan/editors:$KISS_PATH

	KISS_PATH=$REPO_ROOT_IMPL/repos/containers:$KISS_PATH

	KISS_PATH=$REPO_ROOT_IMPL/repos/eudaldgr/extra:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/eudaldgr/libs:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/eudaldgr/garbage:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/eudaldgr/gfx:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/eudaldgr/java:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/eudaldgr/lxqt:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/eudaldgr/office:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/eudaldgr/python:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/eudaldgr/science:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/eudaldgr/themes:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/eudaldgr/video:$KISS_PATH

	KISS_PATH=$REPO_ROOT_IMPL/repos/periish/audio:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/periish/cmd-utils:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/periish/containers:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/periish/dbus:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/periish/misc:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/periish/ricing:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/periish/xfce4:$KISS_PATH

	KISS_PATH=$REPO_ROOT_IMPL/noir/wayland:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/noir/testing:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/noir/extra:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/noir/core:$KISS_PATH

	KISS_PATH=$REPO_ROOT_IMPL/sauzer/xorg:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/sauzer/extra:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/sauzer/core:$KISS_PATH

	KISS_PATH=$REPO_ROOT_IMPL/dm/im:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/dm/kernel:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/dm/site:$KISS_PATH

	KISS_PATH=$REPO_ROOT_IMPL/repos/fonts/kiss-fonts:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/himmalerin/modified:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/himmalerin/extra:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/dumpsterfire/wayland:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/dumpsterfire/desktop:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/dumpsterfire/xorg:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/dumpsterfire/extra:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/dumpsterfire/core:$KISS_PATH

	KISS_PATH=$REPO_ROOT_IMPL/kiss-somethingsomethingstatic/bin:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/kiss-somethingsomethingstatic/wayland:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/kiss-somethingsomethingstatic/community:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/kiss-somethingsomethingstatic/extra:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/kiss-somethingsomethingstatic/core:$KISS_PATH

	# KISS_PATH=$REPO_ROOT_IMPL/repo/wayland:$KISS_PATH
	# KISS_PATH=$REPO_ROOT_IMPL/repo/testing:$KISS_PATH
	# KISS_PATH=$REPO_ROOT_IMPL/repo/extra:$KISS_PATH
	# KISS_PATH=$REPO_ROOT_IMPL/repo/core:$KISS_PATH

	# KISS_PATH=$REPO_ROOT_IMPL/repos/mmatongo:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/jedahan:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/ioraff/modified:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/ioraff/dbus:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/ioraff/extra:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/games/equipment:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/games/games:$KISS_PATH

	# KISS_PATH=$REPO_ROOT_IMPL/repos/lang:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/lang/testing:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/lang/languages:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/lang/extra:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/talyn:$KISS_PATH

	KISS_PATH=$REPO_ROOT_IMPL/kiss-repo/dbus:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/kiss-repo/extra:$KISS_PATH
	# KISS_PATH=$REPO_ROOT_IMPL/kiss-repo/modified:$KISS_PATH
	# KISS_PATH=$REPO_ROOT_IMPL/kiss-repo/old:$KISS_PATH

	KISS_PATH=$REPO_ROOT_IMPL/repos/community/wayland:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/community/extra:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/repos/community/core:$KISS_PATH

	# KISS_PATH=$REPO_ROOT_IMPL/glasnost/modules/community/community:$KISS_PATH
	# KISS_PATH=$REPO_ROOT_IMPL/glasnost/modules/repo/wayland:$KISS_PATH
	# KISS_PATH=$REPO_ROOT_IMPL/glasnost/modules/repo/extra:$KISS_PATH
	# KISS_PATH=$REPO_ROOT_IMPL/glasnost/modules/repo/core:$KISS_PATH

	KISS_PATH=$REPO_ROOT_IMPL/community/community:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/boost/community:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/wyverkkiss/wayland:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/wyverkkiss/gnu:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/wyverkkiss/extra:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/wyverkkiss/core:$KISS_PATH

	KISS_PATH=$REPO_ROOT_IMPL/dilyn/wayland:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/dilyn/gpl:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/dilyn/extra:$KISS_PATH
	KISS_PATH=$REPO_ROOT_IMPL/dilyn/core:$KISS_PATH

	if [ -z "${KISS_PATH:+x}" ]; then
		KISS_PATH=$REPO_ROOT_IMPL/kiss-llvm
	else
		KISS_PATH=$REPO_ROOT_IMPL/kiss-llvm:$KISS_PATH
	fi

}

path_prepend KISS_PATH "$kiss_repo/extra"
# [ -z "${KISS_PATH:+x}" ] &&
# 	KISS_PATH=$kiss_repo/extra ||
# 	KISS_PATH=$kiss_repo/extra:$KISS_PATH

path_prepend KISS_PATH "$kiss_repo/fonts"
# KISS_PATH=$kiss_repo/fonts:$KISS_PATH
path_prepend KISS_PATH "$kiss_repo/wayland"
# KISS_PATH=$kiss_repo/wayland:$KISS_PATH
path_prepend KISS_PATH "$kiss_repo/system"
# KISS_PATH=$kiss_repo/system:$KISS_PATH
path_prepend KISS_PATH "$kiss_repo/core"
# KISS_PATH=$kiss_repo/core:$KISS_PATH

# Static version will remove dynamic libraries
# KISS_PATH=$kiss_repo/static/bin:$KISS_PATH
# KISS_PATH=$kiss_repo/static/community:$KISS_PATH
# KISS_PATH=$kiss_repo/static/wayland:$KISS_PATH
# KISS_PATH=$kiss_repo/static/extra:$KISS_PATH
# KISS_PATH=$kiss_repo/static/core:$KISS_PATH

export KISS_PATH

# : "${ARCH:="x86_64"}" && export ARCH
// env_reset ARCH "x86_64"
# : "${KISS_XHOST_ARCH:="$ARCH"}" && export KISS_XHOST_ARCH
// env_reset KISS_XHOST_ARCH "$ARCH"
# : "${KISS_XBUILD_ARCH:="$KISS_XHOST_ARCH"}" && export KISS_XBUILD_ARCH
// env_reset KISS_XBUILD_ARCH "$KISS_XHOST_ARCH"
# : "${CLIBC:="musl"}" && export CLIBC
// env_reset CLIBC "musl"
# : "${KISS_XHOST_ABI:="$CLIBC"}" && export KISS_XHOST_ABI
// env_reset KISS_XHOST_ABI "$CLIBC"
# : "${KISS_XBUILD_ABI:="$KISS_XHOST_ABI"}" && export KISS_XBUILD_ABI
// env_reset KISS_XBUILD_ABI "$KISS_XHOST_ABI"
# : "${KISS_XHOST_TRIPLE:="$KISS_XHOST_ARCH-linux-$KISS_XHOST_ABI"}" && export KISS_XHOST_TRIPLE
// env_reset KISS_XHOST_TRIPLE "$KISS_XHOST_ARCH-linux-$KISS_XHOST_ABI"
# : "${KISS_XBUILD_TRIPLE:="$KISS_XBUILD_ARCH-linux-$KISS_XBUILD_ABI"}" && export KISS_XBUILD_TRIPLE
// env_reset KISS_XBUILD_TRIPLE "$KISS_XBUILD_ARCH-linux-$KISS_XBUILD_ABI"
# For aports
# : "${CARCH:="$ARCH"}" && export CARCH
// env_reset CARCH "$ARCH"
# : "${CTARGET_ARCH:="$ARCH"}" && export CTARGET_ARCH
// env_reset CTARGET_ARCH "$ARCH"
# For cports
# : "${CHOST:="${KISS_XHOST_TRIPLE}"}"   && export CHOST
// env_reset CHOST "${KISS_XHOST_TRIPLE}"
# : "${CTARGET:="${KISS_XHOST_TRIPLE}"}" && export CTARGET
// env_reset CTARGET "${KISS_XHOST_TRIPLE}"
# : "${CBUILD:="${KISS_XBUILD_TRIPLE}"}" && export CBUILD
// env_reset CBUILD "${KISS_XBUILD_TRIPLE}"

# : "${KISS_REMOTE_REPO="$KISS_PATH"}" && export KISS_REMOTE_REPO
// env_reset KISS_REMOTE_REPO "$KISS_PATH"
# https://github.com/glasnostlinux/glasnost/releases
# CFLAGS="-march=x86-64 -mtune=generic -pipe -Os"
# CFLAGS="--target=$KISS_XHOST_TRIPLE -Os -fPIC -no-pie"
# CFLAGS="--target=$KISS_XHOST_TRIPLE -Os -pipe -fPIC -mtune=native --host=x86_64"
# CFLAGS="--target=$KISS_XHOST_TRIPLE -Os -fPIC -mcpu=x86-64"
# : "${CFLAGS:="--target=$KISS_XHOST_TRIPLE -O3 -pipe -fPIC -march=x86-64 -mtune=native"}" && export CFLAGS
// env_reset CFLAGS "--target=$KISS_XHOST_TRIPLE -O3 -pipe -fPIC -march=x86-64 -mtune=native"
# : "${CXXFLAGS="$CFLAGS"}" && export CXXFLAGS
// env_reset CXXFLAGS "$CFLAGS"
# : "${CPPFLAGS="$CXXFLAGS"}" && export CPPFLAGS
// env_reset CPPFLAGS "$CXXFLAGS"

# : "${MAKEFLAGS:="-j $(($(nproc) + 1))"}" && export MAKEFLAGS
// env_reset MAKEFLAGS "-j $(($(nproc) + 1))"

[ -z "${KISS_PROMPT+x}" ] || unset KISS_PROMPT
# export KISS_PROMPT=0
# export KISS_TMPDIR="/tmp/$(/usr/bin/whoami)/kiss"
# [ -d "$KISS_TMPDIR" ] || \mkdir -p "$KISS_TMPDIR"
# : "${DEST_ROOT:="/working/kiss"}" && export DEST_ROOT
: ${DEST_ROOT:="/working/kiss"} && export DEST_ROOT

[ -d "$DEST_ROOT" ] || \mkdir -p "$DEST_ROOT"
# git config --global --add safe.directory "$DEST_ROOT"
# : "${REPO_BASE:="$kiss_repo/base"}" && export REPO_BASE
// env_reset REPO_BASE "$kiss_repo/base"




