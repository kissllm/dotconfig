#! /bin/sh
# System layout maintenance
# Definition sequence
# doas.conf->share->/etc/profile->login shell->.profile->.ashrc->env

# Option implementations was deprecated
# How to use
# share -s /mnt -h $HOME

# set -x
# set -eu

# # shellcheck disable=SC2034
# VERSION="0.1"

# parser_definition() {
#   setup   REST help:usage -- "Usage: example.sh [options]... [arguments]..." ''
#   msg -- 'Options:'
#   flag    FLAG      -f --flag                  -- "takes no arguments"
#   param   SHARE_PREFIX -s --share_root         -- "share shell scripts root"
#   param   HOME  -h --home                      -- "should be applied user home"
#   option  OPTION    -o --option on:"default"   -- "takes one optional argument"
#   disp    :usage    -h --help
#   disp    VERSION   --version
# }
#
# [ "${GETOPTIONS:-}" ] && return 0
#
# case ${MODE:-command} in
#   command | library)
#     if [ "${MODE:-}" = "library" ]; then
#       # shellcheck disable=SC1091
#       . ./getoptions-library.sh
#     fi
#     eval "$(getoptions parser_definition -) exit 1" ;;
#   parser)
#     # shellcheck disable=SC1091
#     . ./getoptions-parser.sh ;;
# esac
#
# echo "FLAG: $FLAG, SHARE_PREFIX: $SHARE_PREFIX, HOME: $HOME, OPTION: $OPTION"
# printf '%s\n' "$@"
#
# Set default path (/usr/sbin:/sbin:/bin included for non-KISS Linux chroots).
export PATH=/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/sbin:/sbin:/bin

# Set default umask.
umask 022

SCRIPT_NAME="share" && export SCRIPT_NAME

[ ! -z "$(type "env_reset" > /dev/null && type "env_reset")" ] &&
[ ! -z "${SHARE_PREFIX:+x}" ] ||
{
	[ -f "/mnt/init/include/route" ] &&
	. /mnt/init/include/route
} || {
	printf '%s %s\n' '$env_reset' "'$env_reset' could not get defined"
	exit 0
}

# alias /='eval'
# # bash does not recognize //
# alias //='lineno="$LINENO"'
#
# SCRIPT_NAME="share" && export SCRIPT_NAME
#
# # share folder initialization
# [ ! -z "${SHARE_PREFIX:+x}" ] || {
#   [ -d "/mnt/init" ] &&
#   { SHARE_PREFIX="/mnt" && export SHARE_PREFIX; } || {
#       [ -d "/opt/init" ] &&
#       { SHARE_PREFIX="/opt" && export SHARE_PREFIX; } ||
#       printf '%s %s\n' '$SHARE_PREFIX' "not found"
#   }
# }
#
# _functions="/usr/include/kiss/functions"
# [ -f "$_functions" ] ||
# _functions="$SHARE_PREFIX/init/include/functions"
# [ ! -f "$_functions" ] && {
#   printf '%s %s\n' '$_functions' "'$_functions' does not exist"
#   exit 0
# } || {
#   env_reset_type="$(type "env_reset" > /dev/null 2>&1 && type "env_reset")" || :
#   [ ! -z "${env_reset_type:+x}" ] ||
#       . "$_functions"
# }

// env_reset UID "$(id -u)"

# found_share_prefix=1
# git_executable="$(which git)"
# for item in $("$git_executable" config --system -l |
#   awk -F = "{print \$2}" 2> /dev/null); do
#   [ "$item" = "$SHARE_PREFIX" ] || continue
#   break
#   found_share_prefix=0
# done
#
# [ "$found_share_prefix" = "0" ] ||
#   "$git_executable" config --system --add safe.directory "$SHARE_PREFIX"

#
# Made in /etc/profile
# [ ! -z "${LOGNAME:+x}" ] || [ ! -z "${HOME:+x}" ] ||
# .  $SHARE_PREFIX/init/profile

[ -z "${USE_SHELDON:+x}" ] || {
	[ -d ${SHELDON_CONFIG_DIR} ] || \mkdir -p ${SHELDON_CONFIG_DIR}

	[ -d ${SHELDON_DATA_DIR} ] || {
		\mkdir -p ${SHELDON_DATA_DIR}

		[ -d ${SHELDON_DATA_DIR}/repos ] || \mkdir -p ${SHELDON_DATA_DIR}/repos

		[ -d ${SHELDON_DATA_DIR}/downloads ] ||
			\mkdir -p ${SHELDON_DATA_DIR}/downloads
	}
}

[ -n "${SHELL##*"zsh"*}" ] || {
	ln -sf $SHARE_PREFIX/init/shell/zsh          $HOME/.zinit
	ln -sf $SHARE_PREFIX/init/shell/zsh/zshrc    $HOME/.zshrc
	ln -sf $SHARE_PREFIX/init/shell/zsh/zshenv   $HOME/.zshenv
	ln -sf $SHARE_PREFIX/init/shell/zsh/zlogin   $HOME/.zlogin
	ln -sf $SHARE_PREFIX/init/shell/zsh/zprofile $HOME/.zprofile
}

prompt() {
	printf '%s %s\n' "$1" "$2"
}

// env_reset XDG_INIT "$SHARE_PREFIX/init/etc/profile.d/xdg-runtime-dir"

link_correct() {
	local target="$1"
	[ -h "$target" ] || [ -L "$target" ] || [ -f "$target" ] || [ -d "$target" ] || {
		# return 1
		prompt '$target' "'$target' does not exist"
		return 0
	}
	# [ "${target:$((${#target}-1)):1}" = '/' ] && target="${target%/}"
	# [ "$(expr substr "$target" "$(expr length "$target")" 1)" != '/' ] ||
	[ "$(awk -- "BEGIN { print substr (ARGV[1], "${#target}", 1) }" "$target")" != '/' ] ||
		target="${target%/}"
	[ ! -z "${target:+x}" ] || {
		prompt '$target' "'$target' is root mount point"
		# return 1
		return 0
	}
	local target_name="${target##*/}"
	[ ! -z "${target_name:+x}" ] || {
		prompt '$target_name' "'$target_name' does not exist"
		# return 1
		return 0
	}
	local anchor="$2"
	local anchor_name="${anchor##*/}"
	# [ "$(expr substr "$anchor" "$(expr length "$anchor")" 1)" != '/' ] ||
	[ "$(awk -- "BEGIN { print substr (ARGV[1], "${#anchor}", 1) }" "$anchor")" != '/' ] ||
		anchor_name="$target_name"

	[ -n "${anchor:+x}" ] || {
		printf '%s %s\n' "Empty anchor input for $target ad line" "$lineno"
		exit 1
	}

	[ -n "${XDG_CACHE_HOME:+x}" ] &&
	[ -d "$XDG_CACHE_HOME" ] || . "$XDG_INIT"

	file_folder_cache() {
		local target="$1"
		local ancher="$2"
		prompt '$target : $ancher' "$target : $ancher"
		[ -n "${XDG_CACHE_HOME:+x}" ] &&
		[ -d "$XDG_CACHE_HOME" ] || {
			prompt '$lineno' "$lineno"
			prompt '$ancher' "$ancher"
			prompt '$XDG_CACHE_HOME' "$XDG_CACHE_HOME"
			exit 1
		}
		local real_ancher="$(readlink -f "$anchor")"
		[ -n "${real_ancher:+x}" ] || {
			prompt '$lineno' "$lineno"
			prompt '$real_ancher' "$real_ancher"
			exit 1
		}
		local ancher_backup_location="$XDG_CACHE_HOME$real_ancher"
		local ancher_backup_dir="${ancher_backup_location%/*}"
		[ -d "$ancher_backup_dir" ] || \mkdir -p "$ancher_backup_dir"

		prompt '$real_ancher' "'$real_ancher' is going to be removed to $ancher_backup_location"

		case "$real_ancher" in *"/usr"*|*"/sbin"*|*"/bin"*|*/etc*|*"/lib"*|*"/var/db"*|*"kiss"*)
			prompt '$real_ancher' "'$real_ancher' is the file/folder, you realy want to remove? If so, remove it manually"
			# return 1
			return 0
		esac

		[ -f "$real_ancher" ] &&
			prompt '$real_ancher' "'$real_ancher' as a file is going to be removed"
		[ -d "$real_ancher" ] &&
			prompt '$real_ancher' "'$real_ancher' as a dir is going to be removed"

		\mv -f "$real_ancher" "$ancher_backup_location" || {
			// prompt '$real_ancher' "'$real_ancher' can not be moved"
			# \mv -f "$real_ancher" "$real_ancher-$(date +%Y-%m-%d-%H-%M)"
			# return 1
			return 0
		}
	}

	link_exists_and_is_correct() {
		local target="$1"
		local anchor="$2"
		local result=1
		[ ! -e "$anchor" ] ||
		! {
			[ -h "$anchor" ] || [ -L "$anchor" ]
		} ||
			[ "$(readlink -fn "$anchor")" != "$(readlink -fn "$target")" ] ||
			result=0
		return $result
	}

	wrong_anchor_clear() {
		local target="$1"
		local wrong_anchor="$2"
		{
			[ -h "$wrong_anchor" ] || [ -L "$wrong_anchor" ]
		} && {
			[ "$(readlink -fn "$wrong_anchor")" = "$(readlink -fn "$target")" ] || {
				# Remove the link
				prompt '$wrong_anchor' "'$wrong_anchor' as a link is going to be removed"
				\rm -f "$wrong_anchor"
			}
			:
		} || {
			# Move file or folder to cache dir
			// file_folder_cache "$target" "$wrong_anchor" || {
				prompt '$wrong_anchor' "'$wrong_anchor' removing failed and no further actions"
				# return 1
				return 0
			}
		}
	}

	# "$anchor" already exists
	# "$anchor" does not have a '/' at the end
	! { [ -h "$anchor" ] || [ -L "$anchor" ]; } || {

		[ "$(readlink -fn "$anchor")" = "$(readlink -fn "$target")" ] &&
		return 0 || {
			\rm -f "$anchor"
			\ln -sf -- "$target" "$anchor"
			return 0
		}

	}

	local anchor_dir=
	# "$anchor" does not exist yet
	# [ "$(expr substr "$anchor" "$(expr length "$anchor")" 1)" != '/' ] && {
	[ "$(awk -- "BEGIN { print substr (ARGV[1], "${#anchor}", 1) }" "$anchor")" != '/' ] && {
		[ "${anchor##*/}" != "$target_name" ] && {
			# $REPO_ROOT_IMPL/usr/bin/kiss <- /usr/bin
			[ -d "$anchor" ] && {
				anchor_dir="$anchor"
			} || {
				[ ! -f "$anchor" ] || {
					# $anchor is a file, so it can not be transfered to a link
					prompt '$anchor' "'$anchor' as a wrong named file (which supposed to be $target) is going to be removed"
					\rm -f "$anchor"
				}
				anchor_dir="${anchor%/*}"
			}
			:
		} || {
			# $REPO_ROOT_IMPL/usr/bin/kiss <- /usr/bin/kiss

			# Might be "$anchor" == "/usr/bin/kiss", "$target_name" == "kiss"
			[ -f "$anchor" ] && {
				# \rm -f "$anchor"
				prompt '$anchor' "'$anchor' is a same named file"
				wrong_anchor_clear "$target" "$ancher" || {
					prompt 'wrong_anchor_clear' "failed"
					# return 1
					return 0
				}
			} || {
				[ ! -d "$anchor" ] || {
					# \rm -rf "$anchor"
					prompt '$anchor' "'$anchor' is a recursive same named dir"
					wrong_anchor_clear "$target" "$ancher" || {
						prompt 'wrong_anchor_clear' "failed"
						# return 1
						return 0
					}
				}
			}

			anchor_dir="${anchor%/*}"
		}
		:
	} || {

		# $REPO_ROOT_IMPL/usr/bin/kiss <- /usr/bin/

		# "$anchor" might have a '/' at the end
		# [ "${anchor:$((${#anchor}-1)):1}" = '/' ] && {
		# [ "$(expr substr "$anchor" "$(expr length "$anchor")" 1)" = '/' ] && {
		# Might be "$anchor" == "/usr/bin/", "$target_name" == "kiss"
		local anchor_standard="${anchor%/}"
		# "$anchor_standard" == "/usr/bin"
		# [ "${anchor_standard##*/}" = "${target##*/}" ] && {
		[ "${anchor_standard##*/}" != "$target_name" ] && {
			# Trying to create a linkage under "$anchor"
			# "$subdir_anchor" == "/usr/bin/kiss"
			local subdir_anchor="$anchor_standard/$target_name"

			# "$anchor" does not exist yet
			[ ! -e "$subdir_anchor" ] || {
				link_exists_and_is_correct "$target" "$subdir_anchor" && return 0 ||
				wrong_anchor_clear "$target" "$subdir_anchor" || {
					prompt 'wrong_anchor_clear' "failed"
					# return 1
					return 0
				}
			}
			anchor_dir="$anchor_standard"
			:
		} || {

			# $REPO_ROOT_IMPL/usr/bin/kiss <- /usr/bin/kiss/

			# Duplicated name exists already
			# Might be "$anchor" == "/usr/bin/kiss/", "$target_name" == "kiss"
			# Recursive linkage
			# "$anchor" already is the real anchor

			[ ! -e "$anchor" ] || {
				link_exists_and_is_correct "$target" "$anchor" && return 0 ||
				wrong_anchor_clear "$target" "$anchor" || {
					prompt 'wrong_anchor_clear' "failed"
					# return 1
					return 0
				}
			}
			anchor_dir="${anchor_standard%/*}"
		}
	}

	[ -d "$anchor_dir" ] || \mkdir -p "$anchor_dir"
	# Redefine anchor from $anchor_dir
	anchor="$anchor_dir/$anchor_name"

	# -T is GNU specific (BusyBox's "ln" doesn't support -h), while -n doesn't work
	# \ln -sTf -- "$target" "$anchor"
	\ln -sf -- "$target" "$anchor" || {
		prompt '$target' "$target"
		prompt '$anchor' "'$anchor' as a link has not been created successfully"
	}
}

init_file_overwrite() {
	local target="$1"
	local source="$2"

	local file_name_source="${source##*/}"

	[ -d "$source" ] && return 0
	[ -h "$source" ] || [ -L "$source" ] || [ -f "$source" ] || {
		prompt '$source' "'$source' does not exist"
		prompt '$lineno' "$lineno"
		prompt '$target' "$target"
		prompt '$source' "$source"
		return 1
	}
	[ -d "$target" ] && {
		target_dir="${target%/}"
		target_folder_name="${target_dir##*/}"
		[ "$target_folder_name" = "$file_name_source" ] && {
			printf '%s %s\n' "$target_dir" "has the same name with $source but it is a folder"
			# return 1
			return 0
		} || {
			[ -s "$target_dir/$file_name_source" ] &&
			diff -bwrB "$target_dir/$file_name_source" "$source" > /dev/null 2>&1 ||
			/bin/cp "$source" "$target_dir/"
			# $(which rsync) -aq "$source" "$target_dir/"
			return 0
		}
	}

	# [ "$(expr substr "$target" "$(expr length "$target")" 1)" != '/' ] ||
	[ "$(awk -- "BEGIN { print substr (ARGV[1], "${#target}", 1) }" "$target")" != '/' ] ||
	target="${target%/}"

	# local file_name_target="${target##*/}"
	#
	# diff -bwrB "/etc/profile" "$SHARE_PREFIX/init/etc/profile" 2> /dev/null ||
	#   \cp "$SHARE_PREFIX/init/etc/profile" "/etc/profile"
	[ ! -h "$target" ] || [ ! -L "$target" ] || \rm -f "$target"
	[ -s "$target" ] &&
	diff -bwrB "$target" "$source" > /dev/null 2>&1 ||
		# Don't force, it might reverse overwriting
		# /bin/cp -f "$source" "$target"
		/bin/cp "$source" "$target"
		# On FreeBSD it is /usr/local/bin/rsync
		# $(which rsync) -aq "$source" "$target"
	[ -s "$target" ] || {
		prompt '$target' "'$target' size is zero"
		prompt '$lineno' "$lineno"
		prompt '$target' "$target"
		prompt '$source' "$source"
		prompt '$XDG_CONFIG_HOME' "$XDG_CONFIG_HOME"
		prompt '$XDG_CACHE_HOME'  "$XDG_CACHE_HOME"
		prompt '$XDG_DATA_HOME'   "$XDG_DATA_HOME"
		return 1
	}
	return 0
}

[ "$UID" != "0" ] ||
# // link_correct "$SHARE_PREFIX/init/etc/profile.d/share" "/etc/profile.d/share.sh"
# // init_file_overwrite "/etc/profile.d/share.sh" "$SHARE_PREFIX/init/etc/profile.d/share"
// init_file_overwrite "/etc/profile.d/xdg-runtime-dir.sh" \
	"$XDG_INIT"
{
	[ -n "${XDG_CONFIG_HOME:+x}" ] && [ -d "$XDG_CONFIG_HOME" ] &&
	[ -n "${XDG_DATA_HOME:+x}" ]   && [ -d "$XDG_DATA_HOME" ]   &&
	[ -n "${XDG_CACHE_HOME:+x}" ]  && [ -d "$XDG_CACHE_HOME" ]  &&
	[ -n "${XDG_RUNTIME_DIR:+x}" ] && [ -d "$XDG_RUNTIME_DIR" ] &&
	[ "${XDG_RUNTIME_DIR}" = "/run/user/$(id -u)" ]
} || . "$XDG_INIT"
{
	[ -n "${XDG_CONFIG_HOME:+x}" ] && [ -d "$XDG_CONFIG_HOME" ] &&
	[ -n "${XDG_DATA_HOME:+x}" ]   && [ -d "$XDG_DATA_HOME" ]   &&
	[ -n "${XDG_CACHE_HOME:+x}" ]  && [ -d "$XDG_CACHE_HOME" ]  &&
	[ -n "${XDG_RUNTIME_DIR:+x}" ] && [ -d "$XDG_RUNTIME_DIR" ] &&
	[ "${XDG_RUNTIME_DIR}" = "/run/user/$(id -u)" ]
} || {
	prompt '$XDG_CONFIG_HOME' "$XDG_CONFIG_HOME"
	prompt '$XDG_CACHE_HOME'  "$XDG_CACHE_HOME"
	prompt '$XDG_DATA_HOME'   "$XDG_DATA_HOME"
	prompt '$XDG_RUNTIME_DIR' "$XDG_RUNTIME_DIR"
	exit 1
}


// link_correct "$XDG_INIT" "$HOME/.xdg-runtime-dir"
[ -L "$HOME/.xdg-runtime-dir" ] ||
	printf '%s %s\n' "$HOME/.xdg-runtime-dir" "creating failed"

// env_reset MNGR_ROOT      "/working/os/kiss"
// env_reset REPO_ROOT      "/var/db/kiss"
// env_reset REPO_ROOT_IMPL "/opt/${REPO_ROOT#*/}"
// env_reset DEST_ROOT      "/working/kiss"
// env_reset DOTCONFIG      "/mnt/init"

[ ! -f "/etc/hostname" ] ||
# : ${os_name:="$(cat /etc/hostname 2> /dev/null)"}
// env_reset os_name "$(cat /etc/hostname 2> /dev/null)"

# : ${os_name:="$(awk -F = '$1 == "ID" {print $2}' < /etc/os-release)"}
# : ${os_pretty_name:="$(awk -F = '$1 == "PRETTY_NAME" {print $2}' < /etc/os-release)"}
# // env_reset os_pretty_name "$(awk -F = "\$1 == \"PRETTY_NAME\" {print \$2}" < /etc/os-release | tr -d "\"")"
// env_reset id "$(awk -F = '$1 == "ID" {print $2}' < /etc/os-release |
	tr '[A-Z]' '[a-z]')"
// env_reset os_pretty_name "$(
awk -F = '$1 == "PRETTY_NAME" {print $2}' < /etc/os-release | tr -d "\"" |
	tr '[A-Z]' '[a-z]')"

case "${id-} ${os_name-} ${os_pretty_name-}" in *"kiss"*)
	IS_KISS= && export IS_KISS

	# // link_correct "$SHARE_PREFIX/init/etc/inittab" "/etc/"
	# // init_file_overwrite "/etc/" "$SHARE_PREFIX/init/etc/inittab"
esac

case "${id-} ${os_name-} ${os_pretty_name-}" in *"kiss"*|*"void"*|*"alpine"*)
	IS_LINUX= && export IS_LINUX
	[ "$UID" != "0" ] || {
		# [ "$(cat /etc/hostname 2> /dev/null)" != "kiss" ] || {
		# diff -bwrB "/etc/profile" "$SHARE_PREFIX/init/etc/profile" 2> /dev/null ||
		#   \cp -f "$SHARE_PREFIX/init/etc/profile" "/etc/profile"
		// init_file_overwrite "/etc/profile" "$SHARE_PREFIX/init/etc/profile"
		# // link_correct "$SHARE_PREFIX/init/etc/profile"                    "/etc/"

		// init_file_overwrite "/etc/profile.d/kiss-env.sh" "$SHARE_PREFIX/init/etc/profile.d/kiss-env"

		# // link_correct "$SHARE_PREFIX/init/etc/profile.d/nouveau"      "/etc/profile.d/nouveau.sh"
		// init_file_overwrite "/etc/profile.d/nouveau.sh" "$SHARE_PREFIX/init/etc/profile.d/nouveau"

		# // link_correct "$SHARE_PREFIX/init/etc/profile.d/iwl"          "/etc/profile.d/iwl.sh"
		// init_file_overwrite "/etc/profile.d/iwl.sh" "$SHARE_PREFIX/init/etc/profile.d/iwl"
		// init_file_overwrite "/etc/profile.d/eth.sh" "$SHARE_PREFIX/init/etc/profile.d/eth"
		// init_file_overwrite "/usr/bin/s" "$SHARE_PREFIX/init/bin/s"

		# [ ! -z "${IS_KISS+x}" ] || {

		{ [ -h "$REPO_ROOT" ] || [ -L "$REPO_ROOT" ]; } && \rm -f "$REPO_ROOT"
		[ -d "$REPO_ROOT" ] || \mkdir -p "$REPO_ROOT"

		[ ! -e "$REPO_ROOT_IMPL/choices" ] ||
		// link_correct "$REPO_ROOT_IMPL/choices" "$REPO_ROOT/"
		[ ! -e "$REPO_ROOT_IMPL/hooks" ] ||
		// link_correct "$REPO_ROOT_IMPL/hooks"   "$REPO_ROOT/"

		# }

		// link_correct "$SHARE_PREFIX/init/etc/grub.d/10_linux"          "/etc/grub.d/"
		// link_correct "$SHARE_PREFIX/init/etc/modprobe.d/iwldvm.conf"   "/etc/modprobe.d/"
		// link_correct "$SHARE_PREFIX/init/etc/modprobe.d/iwlmvm.conf"   "/etc/modprobe.d/"
		// link_correct "$SHARE_PREFIX/init/etc/modprobe.d/iwlwifi.conf"  "/etc/modprobe.d/"
		[ ! -e  "$MNGR_ROOT/usr/bin" ] ||
		for item in $(\ls -1 "$MNGR_ROOT/usr/bin" | grep kiss); do
			// link_correct "$MNGR_ROOT/usr/bin/$item" "/usr/bin/"
		done
		[ ! -e  "$MNGR_ROOT/usr/include" ] ||
		for item in $(\ls -1 "$MNGR_ROOT/usr/include/kiss"); do
			// link_correct "$MNGR_ROOT/usr/include/kiss/$item" "/usr/include/kiss/"
		done
	}
esac

[ "$UID" != "0" ] || {
	[ -f "$MNGR_ROOT/usr/include/kiss/functions" ] &&
	// init_file_overwrite "/etc/profile.d/functions.sh" "$MNGR_ROOT/usr/include/kiss/functions" ||
	// init_file_overwrite "/etc/profile.d/functions.sh" "$SHARE_PREFIX/init/include/functions"
}

[ ! -f "$MNGR_ROOT/usr/include/kiss/functions" ] ||
// init_file_overwrite "$SHARE_PREFIX/init/include/functions" "$MNGR_ROOT/usr/include/kiss/functions"

insert_or_link() {
	local source="$1"
	local target="$2"
	[ -f "$target" ] && {
		diff -bwurB "$target" "$source" > /dev/null 2>&1 ||
		grep -q "$source" "$target" ||
		printf '\n%s\n%s\n' "[ ! -f \"$source\" ] ||" \
		". \"$source\"" >> "$target"
	} ||
	// link_correct "$source" "$target"
}

# : ${WAYLAND_CONFIG_HOME:="${XDG_CONFIG_HOME:-$HOME/.config}/wayland"} &&
// env_reset WAYLAND_CONFIG_HOME "${XDG_CONFIG_HOME:-$HOME/.config}/wayland"
export WAYLAND_CONFIG_HOME
// link_correct "$SHARE_PREFIX/init/wayland/env" "${WAYLAND_CONFIG_HOME}/"

# [ -f "$HOME/.profile" ] && {
#   diff -bwurB "$HOME/.profile" "$SHARE_PREFIX/init/profile" > /dev/null 2>&1 ||
#   grep -q '$SHARE_PREFIX/init/profile' ||
#   printf '\n%s\n%s\n' '[ ! -f "$SHARE_PREFIX/init/profile" ] ||' \
#   '. "$SHARE_PREFIX/init/profile"' >> "$HOME/.profile"
# } ||
# // link_correct "$SHARE_PREFIX/init/profile" "$HOME/.profile"
// insert_or_link "$SHARE_PREFIX/init/profile" "$HOME/.profile"

# // link_correct "$SHARE_PREFIX/init/ashrc" "$HOME/.ashrc"
// insert_or_link "$SHARE_PREFIX/init/ashrc" "$HOME/.ashrc"

// link_correct "$SHARE_PREFIX/init/terminal/tmux.conf"       "$HOME/.tmux.conf"
// link_correct "$SHARE_PREFIX/init/terminal/foot/foot.ini"   "$XDG_CONFIG_HOME/foot/"
// link_correct "$SHARE_PREFIX/init/wayland/river/init"       "$XDG_CONFIG_HOME/river/"
// link_correct "$SHARE_PREFIX/init/wayland/sway/config"      "$XDG_CONFIG_HOME/sway/"
// link_correct "$SHARE_PREFIX/init/wayland/sway/colorscheme" "$XDG_CONFIG_HOME/sway/"
# Keep $SHARE_PREFIX as just a configuration location
folder_tmux="$HOME/.tmux"
[ -L "$folder_tmux" ] && \rm -f "$folder_tmux"
[ -d "$folder_tmux" ] || \mkdir -p "$folder_tmux"
# // link_correct "$SHARE_PREFIX/init/terminal/tmux"       "$HOME/.tmux"
// link_correct "$SHARE_PREFIX/init/editor/vim/init.vim" "$HOME/.vimrc"
folder_vim="$HOME/.vim"
[ -L "$folder_vim" ] && \rm -f "$folder_vim"
[ -d "$folder_vim" ] || \mkdir -p "$folder_vim"

[ ! -e  "$SHARE_PREFIX/init/editor/vim/after" ] ||
// link_correct "$SHARE_PREFIX/init/editor/vim/after"  "$HOME/.vim/"
[ ! -e  "$SHARE_PREFIX/init/editor/vim/indent" ] ||
// link_correct "$SHARE_PREFIX/init/editor/vim/indent" "$HOME/.vim/"
// link_correct "$SHARE_PREFIX/init/editor/nvim"       "$XDG_CONFIG_HOME/"
[ ! -e  "$SHARE_PREFIX/wiki" ] ||
// link_correct "$SHARE_PREFIX/wiki"                   "$HOME/.wiki"
#
# Folder maintenance
folder_nvim="${XDG_DATA_HOME}/nvim"
[ -L "$folder_nvim" ] && \rm -f "$folder_nvim"
[ -d "$folder_nvim" ] || mkdir -p "$folder_nvim"

folder_site="${XDG_DATA_HOME}/nvim/site"
[ -L "$folder_site" ] && \rm -f "$folder_site"
[ -d "$folder_site" ] || \mkdir -p "$folder_site"

# Default editor packages is based on musl libc on current system
# Since I use lazy.nvim, don't need to maintain this link
# // link_correct "$SHARE_PREFIX/init/editor/nvim/site/pack" \
#   "${XDG_DATA_HOME}/nvim/site/pack"
#
# If you have additional musl libc builds of the editor
# ! expr "$KISS_XHOST_ABI" : "musl" > /dev/null 2>&1 ||
# // link_correct "$SHARE_PREFIX/init/editor/nvim/site/pack-musl" \
#     "${XDG_DATA_HOME}/nvim/site/pack"
#
folder_parser="${XDG_DATA_HOME}/nvim/site/parser"
[ -L "$folder_parser" ] && \rm -f "$folder_parser"
[ -d "$folder_parser" ] || \mkdir -p "$folder_parser"

# [ ! -L $XDG_CONFIG_HOME/coc ] ||
#     \rm -f $XDG_CONFIG_HOME/coc
# \ln -sf $SHARE_PREFIX/init/editor/coc $XDG_CONFIG_HOME/coc

export loaded_share=


# vim:  set ts=4 sw=4 tw=0 noet :
# nvim: set ts=4 sw=4 tw=0 noet :
