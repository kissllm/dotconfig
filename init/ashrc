#! /bin/sh
# set -x
# Definition sequence
# doas.conf->share->/etc/profile->login shell->.profile->.ashrc->env

script_scope=${SCRIPT_SCOPE:-${SCRIPT_NAME:-"$0"}}
SCRIPT_SCOPE="${SCRIPT_NAME:-"$0"}"

# shellcheck source=/usr/include/kiss/name
type "script_name" > /dev/null 2>&1 ||
    . "${MNGR_ROOT-}/usr/include/kiss/name"
SCRIPT_NAME="$(script_name)"

# shellcheck source=/usr/include/kiss/see
type "see" > /dev/null 2>&1 && [ ! -z "${SEE+x}" ] ||
    . "${MNGR_ROOT-}/usr/include/kiss/see"

# shellcheck source=/usr/include/kiss/func
type "delegate" > /dev/null 2>&1 && [ ! -z "${FUNC+x}" ] ||
    . "${MNGR_ROOT-}/usr/include/kiss/func"

# shellcheck source=/usr/include/kiss/log
type "trace_line"   > /dev/null 2>&1 &&
type "id_identical" > /dev/null 2>&1 && [ ! -z "${LOG+x}" ] ||
    . "${MNGR_ROOT-}/usr/include/kiss/log"

script_name="$(script_name)"
[ "$SCRIPT_NAME" = "$script_name" ] || SCRIPT_NAME="$script_name"
# unset script_name

env_reset DOT_CONFIG "$(dot_config)"

# : ${UID="$(id -u)"} && export UID
env_reset UID "$(id -u)"

reset_cursor_shape() {
    local term="$1"
    local force_reset="${2-}"

    # This block of code will change cursor shape !
    # [ -z "${term:+x}" ] ||
    # # [ ! -z "${term:+x}" ] &&
    # # [ ! -z "${term##*"linux"*}" ] &&
    # # [ ! -z "${term##*"tmux"*}" ] ||
    # ! command -v "/usr/bin/setterm" > /dev/null 2>&1 ||
    # {
    #     # util-linux-misc
    #     # setterm --term "linux" --cursor on

    #     setterm --term "$term" --cursor on

    #     # tabstop $TERM == linux supports it
    #     # setterm: terminal xterm-256color  does not support --regtabs
    #     # setterm: terminal screen-256color does not support --regtabs
    #     # setterm: terminal tmux-256color   does not support --regtabs
    #     # setterm --regtabs 4
    # }

    # reset
    # printf '%s %s\n' '$term' "$term"

    # ncurses
    # netbsd-curses
    # infocmp -x screen-256color | grep parm
    # infocmp -L1 screen-256color | grep parm
    # infocmp -L1 linux | grep parm

    # How to check key pressed value/keyboard mappings
    # showkey -a
    # doas evtest
    #
    # /usr/share/terminfo/s/screen-256color
    # $term == linux
    # infocmp -L1 linux | grep cursor
    #         cursor_address=\E[%i%p1%d;%p2%dH,
    #         cursor_down=\n,
    #         cursor_home=\E[H,
    #         cursor_invisible=\E[?25l\E[?1c,
    #         cursor_left=^H,
    #         cursor_normal=\E[25h\E[?112c,
    #         cursor_right=\E[C,
    #         cursor_up=\E[A,
    #         cursor_visible=\E[?25h\E[?8c,
    #         parm_down_cursor=\E[%p1%dB,
    #         parm_left_cursor=\E[%p1%dD,
    #         parm_right_cursor=\E[%p1%dC,
    #         parm_up_cursor=\E[%p1%dA,
    #         restore_cursor=\E8,
    #         save_cursor=\E7,
    # ncurses 6.3
    # infocmp -L1 linux | grep cursor
    #         cursor_address=\E[%i%p1%d;%p2%dH,
    #         cursor_down=\n,
    #         cursor_home=\E[H,
    #         cursor_invisible=\E[?25l\E[?1c,
    #         cursor_left=^H,
    #         cursor_normal=\E[?25h\E[?0c,
    #         cursor_right=\E[C,
    #         cursor_up=\E[A,
    #         cursor_visible=\E[?25h\E[?8c,
    #         parm_down_cursor=\E[%p3%dB,
    #         parm_left_cursor=\E[%p1%dD,
    #         parm_right_cursor=\E[%p1%dC,
    #         parm_up_cursor=\E[%p1%dA,
    #         restore_cursor=\E8,
    #         save_cursor=\E7,

    # infocmp -L1 vt102 | grep cursor
    #         cursor_address=\E[%i%p1%d;%p2%dH$<5>,
    #         cursor_down=\n,
    #         cursor_home=\E[H,
    #         cursor_left=^H,
    #         cursor_right=\E[C$<2>,
    #         cursor_up=\E[A$<2>,
    #         parm_down_cursor=\E[%p1%dB,
    #         parm_left_cursor=\E[%p1%dD,
    #         parm_right_cursor=\E[%p1%dC,
    #         parm_up_cursor=\E[%p1%dA,
    #         restore_cursor=\E8,
    #         save_cursor=\E7,

    # infocmp -L1 | grep cursor
    #         cursor_address=\E[%i%p1%d;%p2%dH,
    #         cursor_down=\n,
    #         cursor_home=\E[H,
    #         cursor_invisible=\E[?25l,
    #         cursor_left=^H,
    #         cursor_normal=\E[?12l\E[?25h,
    #         cursor_right=\E[C,
    #         cursor_up=\E[A,
    #         cursor_visible=\E[?12;25h,
    #         parm_down_cursor=\E[%p1%dB,
    #         parm_left_cursor=\E[%p1%dD,
    #         parm_right_cursor=\E[%p1%dC,
    #         parm_up_cursor=\E[%p1%dA,
    #         restore_cursor=\E8,
    #         save_cursor=\E7,

    # Function keys doesn't work
    # $term == screen-256color
    # infocmp -L1 screen-256color | grep cursor
    #     cursor_address=\E[%i%p1%d;%p2%dH,
    #     cursor_down=\n,
    #     cursor_home=\E[H,
    #     cursor_invisible=\E[?25l,
    #     cursor_left=^H,
    #     cursor_normal=\E[34h\E[?25h,
    #     cursor_right=\E[C,
    #     cursor_up=\EM,
    #     cursor_visible=\E[34l,
    #     parm_down_cursor=\E[%p1%dB,
    #     parm_left_cursor=\E[%p1%dD,
    #     parm_right_cursor=\E[%p1%dC,
    #     parm_up_cursor=\E[%p1%dA,
    #     restore_cursor=\E8,
    #     save_cursor=\E7,

    # infocmp -L1 linux | grep cursor
    # cursor_visible=\E[?25h\E[?8c,

    # [ -z "${TMUX+x}" ] || { : "${TERM:="screen-256color"}" && export TERM; }

    # {
    #     [ "$TERM" = "linux" ] ||
    #     [ "$TERM" = "vt102" ] ||
    #     [ -z "${TERM##*"256color"*}" ]; } &&
    # {
    #     #     # cursor_code='\033[?12;0;255c'
    #     #     # cursor_code='\033[?16;143;255c'
    #     #     # cursor_code='\033[?112;0;255c'
    #     #     # cursor_code='\e[?112;0;64c'
    #     #     # cursor_code='\e[?112;0;112c'
    #     #     # cursor_code='\e[?16;143;255c'
    #     #     # cursor_code='\033[?12h'
    #     #
    #     #     # Underscore blinking
    #     #     # cursor_code='\033[?c'
    #     #
    #     #     # White/black bliking block
    #     #     # Black/white
    #     #     # cursor_code='\033[?6c'
    #     #     # Blue
    #     #     # cursor_code='\033[?121'
    #     #     # cursor_code='\033[?121c'
    #     #
    #     #     # Non-blink block
    #     #     # Black/white
    #     #     # cursor_code='\033[?121;0;255c'
    #     #     # Green
    #     #     cursor_code='\033[?112;0;64c'
    #     #
    #     #     # cursor_code='\e[?112c'
    #     #
    #     #     # Blue
    #     #     # cursor_code='\033[?112c'
    #     #
    #     #     # cursor_code='\033[34h'
    #     #     # cursor_code='\033[?25h'
    #     #
    #
    #     # cursor_code='\033[34l'
    #     # Won't work. \033 is ESC
    #     # cursor_code='\033[34h\033[?25h'
    #     # { [ "$TERM" = "linux" ] || [ "$TERM" = "vt102" ]; } &&
    #     # cursor_code='\033[25h\033[?112c'
    #     # cursor_code='\033[?25h\033[?0c'
    #
    #     cursor_code="$(infocmp -L1 "$TERM" |
    #     grep cursor_normal | sed -e 's/cursor_normal=//g' -e 's/,//g' -e 's/E/033/g')"
    #     # cursor_code="$(infocmp -L1 "$TERM" |
    #     # grep cursor_visible | sed -e 's/cursor_visible=//g' -e 's/,//g' -e 's/E/033/g')"
    #     # cursor_code="$(infocmp -L1 "$TERM" |
    #     # grep parm_left_cursor | sed -e 's/parm_left_cursor=//g' -e 's/,//g' -e 's/E/033/g')"
    #     # cursor_code="$(infocmp -L1 "$TERM" |
    #     # grep cursor_left | sed -e 's/cursor_left=//g' -e 's/,//g' -e 's/E/033/g')"
    #
    #     # [ -z "${TERM##*"256color"*}" ] && cursor_code='\033[34h\033[?25h'
    #
    #     #     # cursor_code='\033[?25h'
    #     #     # cursor_code='\033[?8c'
    #     #     # cursor_code='\033[25h'
    #     #     # cursor_code='\033[?112c'
    #     #     # cursor_code='\033[34h'
    #     #     # cursor_code='\033[25h\033[?112c'
    #     #     # cursor_code='\033[34h\033[?25h'
    #     #     # cursor_code='\033[25h'
    #     # cursor_code="$cursor_normal"
    #     # cursor_code="$cursor_left"
    #     #     # printf '%s' "$cursor_code"
    #     printf '%s' "$cursor_code"
    #     #
    #     #     # infocmp | sed 's/cnorm=[^,]*/cnorm=\\033[25h\\033[?112c/' | tic -
    #     #     # infocmp linux | sed 's/cnorm=[^,]*/cnorm=\\033[25h\\033[?112c/' | tic -
    #     #
    # } || {

    # infocmp screen-256color | sed -e 's/parm_index=[^,]*//' -e 's/parm_rindex=[^,]*//' | tic -
    # infocmp screen-256color | sed 's/indn=[^,]*//' | tic -

    # infocmp -L1 screen-256color > /mnt/screen-256color.info
    # Comment out parm_index, maybe parm_rindex also
    # tic /mnt/screen-256color.info
    # [ "$LOGNAME" = "root" ] ||
    # rsync -aqzL /home/$LOGNAME/.terminfo/. /root/.terminfo/
    # Add TERM=screen-256color to tmux env

    # infocmp -L1 linux > /mnt/linux.info
    # max_colors#0x8 -> max_colors#0x100
    # tic /mnt/linux.info
    # [ "$LOGNAME" = "root" ] ||
    # rsync -aqzL /home/$LOGNAME/.terminfo/. /root/.terminfo/
    # Remove TERM=screen-256color from tmux env

    # Frequency of cursor blinking
    # /working/kiss/sources/linux/drivers/tty/vt/vt.c
    # /working/kiss/sources/linux/drivers/video/fbdev/core/fbcon.c
    # 112 = 16 + 32 +64
    # Black/white blinking

    # p1="96"

    # p1="88"     # 8 + 16 + 64
    # p1="72"
    # p1="69"     # 5 + 64
    # p1="64"
    # p1="32"
    # p1="17"
    # p1="15"
    # p1="14"
    # p1="13"
    # p1="12"
    # p1="9"
    # p1="8"
    # p1="7"
    # p1="6"
    # Half height, blinking
    # p1="5"
    # short height, blinking
    # p1="99"
    # p1="3"
    # No cursor
    # p1="97"
    # p1="33"
    # p1="1"
    # Underscore blink

    # p1="98"

    # p1="2"
    # p1="0"
    # p1="34"
    # Block green non-blink
    # p1="31"
    # p1="30"
    # p1="29"
    # p1="28"
    # p1="27"
    # p1="26"
    # p1="25"
    # p1="24"
    # p1="23"
    # p1="22"

    # No cursor in $TERM == linux?
    p1=21

    # p1="20"
    # p1="19"
    # p1="18"
    # p1="17"
    # p1="16"

    # Block blue non-blink, wierd charater | No, depends on other parameters
    # Mask characters with strange characters
    # p1="120"    # 112 + 8
    # p1="117"    # 112 + 5
    # p1="116"
    # p1="115"
    # p1="114"
    # p1="113"
    # p1="112"
    # p1="118"    # 112 + 6

    # No cursor | p1="31"
    # p3="6"
    # p3="70"     # 6 + 64
    # Green block | set_cursor $((0x70 | 0x10 | 0x16 | 0x6))
    p3=64 # transparent | set_cursor 255
    # Red block | set_cursor 255
    # Green block | set_cursor $((0x70 | 0x10 | 0x16 | 0x6))
    # p3="200"
    # Special character | p1="31"

    # p3="255"

    set_cursor() {
        cursor_string="$(printf "?${p1};%d;${p3}c" "$((~ $1 & 255))")"
        cursor_code="$(printf '\033[%s' "$cursor_string")"
        # cursor_normal="$cursor_code"
        # echo -ne "$cursor_code"
        # printf "$cursor_code"
    }

    # $((soft block | change bg | foreground different | make them distinct))
    # set_cursor $((0x80 | 0x8  | 0x40 | 0x6))
    # set_cursor $((0x80 | 0x8  | 0x16 | 0x6))
    # 0x70 == 112 == (16 + 32 + 64)
    # set_cursor $((0x70 | 0x10 | 0x16 | 0x6))

    set_cursor 255
    # cursor_code='\033[?16;15;47c' # wiki.archlinux.org
    cursor_code='\033[?06;15;32c' # wiki.archlinux.org
    # cursor_hex=0x2f0f10
    cursor_hex=0x200f06
    # Should be set before tmux booting up
    # [ -z "${TMUX+x}" ] || {
    # Doesn't work
    # printf '\033Ptmux;\033]12;grey\007\033\\'
    # echo -en '\033Ptmux;\033]12;grey\007\033\\'
    # echo -en '\033Ptmux;\033]12;red\007\033\\'
    # echo -en '\033[ q'
    # echo -en '\033[?21;0;64c'

    # Disable cursor blinking

    local cursor_blink_key="/sys/class/graphics/fbcon/cursor_blink"
    cursor_default="/sys/module/vt/parameters/cur_default"
    export cursor_default
    [ "$UID" -eq 0 ] && {
        [ ! -f "$cursor_blink_key" ] ||
        [ "$(cat $cursor_blink_key)" -eq 0 ] ||
        echo 0 | tee "$cursor_blink_key"
        echo "$cursor_hex" | tee "$cursor_default" > /dev/null
    } ||
    {
        [ ! -f "$cursor_blink_key" ] ||
        [ "$(cat $cursor_blink_key)" -eq 0 ] ||
        {
            ! command -v "/usr/bin/doas" > /dev/null 2>&1 ||
            echo 0 | doas -u root -- tee "$cursor_blink_key"
            echo "$cursor_hex" | doas tee "$cursor_default" > /dev/null
        }
    }

    cursor_normal_string=$(infocmp -L1 "$term" | grep cursor_normal |
        awk "{print \$1}" | tr -d 'cursor_normal=' | tr -d ',' | tr -d ' ')
    # printf '%s %s\n' '$cursor_normal_string' "$cursor_normal_string"

    # Short blinking block when quit neovim in pure terminal
    # Works
    # Grey blinking block
    # Work
    # echo -en '\033[34l'
    # cursor_code='\033[ q'
    # cursor_code='\033[?8c'
    # cursor_code='\033[34l'
    # cursor_code='\033[?112c'
    # printf "$cursor_code"
    # infocmp linux | awk "{ sub(/cnorm=\\E\[?25h\\E\[?0c/, \"cnorm=\033\[?21;0;64c\") \
    # Won't work
    # infocmp linux | awk "{ sub(/cnorm=[^,]*/, \"cnorm=\\\E\[?21;0;64c\") \
    # If cursor code is just one code, cursor_normal are two codes
    # Doesn't work in tmux
    # infocmp linux | awk "{ sub(/cnorm=[^,]*/, \"cnorm=\\\E\[34h\\\E\[?25h\") \
    [ -z "${force_reset:+x}" ] ||
    [ '\E[?25h\E[?0' = "$cursor_normal_string" ] ||
    {
        printf '%s %s\n' 'reset cursor shape to' "$cursor_normal_string"
        infocmp "$term" | awk "{ sub(/cnorm=[^,]*/, \"cnorm=\\\E\[?25h\\\E\[?0c\") \
        sub(/colors#8/, \"colors#256\") }1" | tic -

        # infocmp "$term" | sed 's/cnorm=[^,]*/cnorm=\\033[25h\\033[?112c/' | tic -
        # infocmp "$term" | sed 's/cnorm=[^,]*/cnorm=\\033[25h\\033[?112c/' | tic -
    }

    # }
# }

    export cursor_hex
    export cursor_code
}

# [ -z "${TMUX+x}" ] ||
# {
    # xterm-256color
    # : "${TERM:="screen-256color"}" && export TERM
    # print '$TERM' "$TERM" | tee -a "$STEM_OUTPUT" > "$TTY"
    # : "${TERM:="xterm-256color"}" && export TERM
    # setterm: terminal xterm-256color  does not support --regtabs
    # setterm: terminal screen-256color does not support --regtabs
    # setterm: terminal tmux-256color   does not support --regtabs

    # TERM="tmux-256color" && export TERM #   Modify TERM outside tmux does not help but disable the F* keys

    # TERM="xterm-256color" && export TERM
    # TERM="linux" && export TERM
    # print '$TERM' "$TERM" | tee -a "$STEM_OUTPUT" > "$TTY"
# }
# [ -z "${TERM##*tmux*}" ] ||
reset_cursor_shape "$TERM"

# printf "$cursor_code"

[ -z "${SHELL_DEBUG+x}" ] || print "inside" "$HOME/.ashrc" > "$TTY"

# shellcheck source=/usr/include/kiss/prompt
type "prompt" > /dev/null 2>&1 || {
    . "${MNGR_ROOT-}/usr/include/kiss/prompt"

    script_name="$(script_name)"
    [ "$SCRIPT_NAME" = "$script_name" ] || SCRIPT_NAME="$script_name"
    # unset script_name
}

# tabstop
tabs -4
LESS="-x4" && export LESS

[ ! -f "$DOT_CONFIG/env" ] ||
{
    . $DOT_CONFIG/env

    script_name="$(script_name)"
    [ "$SCRIPT_NAME" = "$script_name" ] || SCRIPT_NAME="$script_name"
    # unset script_name
}

# Moved to /etc/profile.d
# [ -z "${IS_KISS:+x}" ] ||
# [ ! -f "$DOT_CONFIG/etc/profile.d/kiss-env" ] || . $DOT_CONFIG/etc/profile.d/kiss-env


[ -z "${IS_KISS+x}" ] || export DONT_USE_GREET=

designate_tty=7

# [ ! -z "${DONT_USE_GREET+x}" ] && designate_tty=7 || {
[ ! -z "${DONT_USE_GREET+x}" ] &&
    launcher=$(command -v swc-launch 2> /dev/null) ||
    launcher=$(command -v greeter 2> /dev/null) || # designate_tty=1

sway_socket=

# sway_socket() was put into $DOT_CONFIG/env
# Otherwise you will get "sway_socket: not found" in sway-launch
#
# printf '%s %s\n' '$WAYLAND_DISPLAY' "$WAYLAND_DISPLAY"
# printf '%s %s\n' '$DISPLAY' "$DISPLAY"

# Initialize wayland
# [ "$XDG_SESSION_TYPE" = "wayland" ] ||
# [ ! -d "$DOT_CONFIG" ] ||
# [ ! -z "${DISPLAY+x}" ] ||
{
    # wl-info | grep WAYLAND | awk -F= -v OFS="=" '{gsub(/[[:blank:]]/, "", $NF); print $NF}'
    [ ! -z "${SWAY_SOCKET+x}" ] && [ ! -z "${WAYLAND_DISPLAY+x}" ] && [ ! -z "${WAYLAND_ENV+x}" ]
} ||
{
    [ ! -z "${SWAY_SOCKET+x}" ] || [ "$designate_tty" != "$TTY_NUM" ]
} ||
{
# sway can boot as root user
# [ "$UID" -eq 0 ] || { # [ "$(id -nu)" = "root" ] || {
    # https://discourse.ubuntu.com/t/environment-variables-for-wayland-hackers/12750
    # https://unix.stackexchange.com/questions/330366/how-can-i-run-a-graphical-application-in-a-container-under-wayland
    # https://stackoverflow.com/questions/41736528/linux-wayland-display-multiple-user
    # XDG_RUNTIME_DIR defined in $HOME/.xdg_runtime_dir and sourced in $DOT_CONFIG/env
    # [ "$UID" -eq 0 ] || {

    # [ -d "/tmp/$LOGNAME/wayland" ] || \mkdir -p "/tmp/$LOGNAME/wayland"

    # [ -e "/tmp/$LOGNAME/wayland/.display" ] || touch "/tmp/$LOGNAME/wayland/.display"
    [ ! -z "${WAYLAND_CONFIG_HOME:+x}" ] ||
        { : ${WAYLAND_CONFIG_HOME:="${XDG_CONFIG_HOME:-$HOME/.config}/wayland"} && export WAYLAND_CONFIG_HOME; }
    print '$SHLVL' "$SHLVL" | tee $WAYL_OUTPUT > "$TTY" 2>&1
    # }

    # SWAY_SOCKET
    # SWAY_SOCKET="$([ ! -f "/tmp/$LOGNAME/wayland/.socket" ] || cat "/tmp/$LOGNAME/wayland/.socket" 2> /dev/null)"
    # SWAY_SOCKET="$(sway_socket "$launcher")"

    # / `sway_socket "$XDG_RUNTIME_DIR" | awk -F "$FS" -v RS="$RS" '{ print "SWAY_SOCKET=\""$1"\" WAYLAND_DISPLAY=\""$2"\""}' || printf "%s\n" "return 1"` ||
    / `sway_socket "$XDG_RUNTIME_DIR" | awk -F "$FS" -v RS="$RS" '{ print "SWAY_SOCKET=\""$1"\" WAYLAND_DISPLAY=\""$2"\""}'` ||
        print 'failed on' "sway_socket \"$XDG_RUNTIME_DIR\"" | tee -a "$STEM_OUTPUT" > $TTY

    print '$SWAY_SOCKET' "$SWAY_SOCKET" | tee -a "$STEM_OUTPUT" > $TTY

    {
        [ -z "${SWAY_SOCKET:+x}" ] ||
        [ ! -S "$SWAY_SOCKET" ]
    } &&
    # $DOT_CONFIG/velox-launch
        # { . $DOT_CONFIG/sway-launch; SWAY_SOCKET="$(sway_socket "$launcher")"; } ||
    . $DOT_CONFIG/sway-launch ||
    {
        [ ! -z "${WAYLAND_DISPLAY:+x}" ] ||
        swaymsg -s "$SWAY_SOCKET" reload
    }
    print '$SHLVL' "$SHLVL" | tee -a "$WAYL_OUTPUT" > "$TTY" 2>&1

    [ -z "${SWAY_SOCKET:+x}" ] &&
    {
        export SWAY_SOCK=
        export WAYLAND_DISPLAY=
        # : > $HOME/.wayland_display
        # : > /tmp/$LOGNAME/wayland/.display
    } # ||
    # [ "$sway_socket" = "$SWAY_SOCK" ] ||
    # {
        # SWAY_SOCK="$sway_socket"
        export SWAY_SOCK
    # }

    # WAYLAND_DISPLAY will only be assigned inside the subshell where sway exists
    # [ -z "${WAYLAND_DISPLAY:+x}" ] || {    }
}

# if [ ! -z "${WAYLAND_DISPLAY+x}" ] &&
#     [ -z "$(cat /tmp/$LOGNAME/wayland/.display)" ] &&
#     [ "$UID" -ne "0" ]; then

# [ "$UID" -eq 0 ] ||
[ ! -z "${SWAY_SOCKET+x}" ] || [ "$designate_tty" != "$TTY_NUM" ] ||
{
    # [ -d "/tmp/$LOGNAME/wayland" ] || \mkdir -p "/tmp/$LOGNAME/wayland"
    [ ! -z "${WAYLAND_CONFIG_HOME:+x}" ] ||
        { : ${WAYLAND_CONFIG_HOME:="${XDG_CONFIG_HOME:-$HOME/.config}/wayland"} && export WAYLAND_CONFIG_HOME; }

    # [ ! -z "${WAYLAND_DISPLAY+x}" ] || {
    #   WAYLAND_DISPLAY="$(cat /tmp/$LOGNAME/wayland/.display 2> /dev/null)"
    #   [ -z "${WAYLAND_DISPLAY+x}" ] || export WAYLAND_DISPLAY
    # }
    # {

    # Writting WAYLAND_DISPLAY to file
    # sway_socket="$([ ! -s "/tmp/$LOGNAME/wayland/.socket" ] || cat "/tmp/$LOGNAME/wayland/.socket" 2> /dev/null)"
    # wayland_display="$([ ! -s "/tmp/$LOGNAME/wayland/.display" ] || cat "/tmp/$LOGNAME/wayland/.display" 2> /dev/null)"
    # [ -d "/tmp/$LOGNAME/wayland" ] || mkdir -p "/tmp/$LOGNAME/wayland"
    # [ ! -f "/tmp/$LOGNAME/wayland/.display" ] ||
    # [ ! -z "${sway_socket:+x}" ]       &&
    # [ "$sway_socket" = "$SWAY_SOCK" ]  &&
    # [ ! -z "${wayland_display:+x}" ]   &&
    # [ "$wayland_display" = "$WAYLAND_DISPLAY" ] ||
    # {
        [ ! -z "${SWAY_SOCK:+x}" ] &&
        [ ! -z "${WAYLAND_DISPLAY:+x}" ] ||
        {

            # Reading SWAY_SOCK from file
            # sway_socket="$([ ! -f "/tmp/$LOGNAME/wayland/.socket" ] || cat "/tmp/$LOGNAME/wayland/.socket" 2> /dev/null)"
            # sway_socket="$(sway_socket "$launcher")"

            # / `sway_socket  "$XDG_RUNTIME_DIR" | awk -F "$FS" -v RS="$RS" '{ print "SWAY_SOCKET=\""$1"\" WAYLAND_DISPLAY=\""$2"\""}' || printf "%s\n" "return 1"` ||
            / `sway_socket  "$XDG_RUNTIME_DIR" | awk -F "$FS" -v RS="$RS" '{ print "SWAY_SOCKET=\""$1"\" WAYLAND_DISPLAY=\""$2"\""}'` ||
                print 'failed on' "sway_socket \"$XDG_RUNTIME_DIR\"" | tee -a "$STEM_OUTPUT" > $TTY

            print '$SWAY_SOCKET' "$SWAY_SOCKET" | tee -a "$STEM_OUTPUT" > $TTY

            print '$WAYLAND_DISPLAY' "$WAYLAND_DISPLAY" | tee -a $WAYL_OUTPUT > "$TTY" 2>&1
            export SWAY_SOCKET
            export WAYLAND_DISPLAY
            # printf '%s\n' "${WAYLAND_DISPLAY}" > $HOME/.wayland_display
            # [ -d "/tmp/$LOGNAME/wayland" ] || \mkdir -p "/tmp/$LOGNAME/wayland"
            # printf '%s\n' "${WAYLAND_DISPLAY}" > /tmp/$LOGNAME/wayland/.display

            # [ -z "${DISPLAY+x}" ] || unset DISPLAY
            # DISPLAY=${WAYLAND_DISPLAY}
            # export DISPLAY
        }
    # }

    # Try again
    # {
    #   # [ -f "/tmp/$LOGNAME/wayland/.socket" ] &&
    #   # [ -n "$(cat /tmp/$LOGNAME/wayland/.socket 2> /dev/null)" ] &&
    #   [ ! -z "${sway_socket:+x}" ] && [ -S "$sway_socket" ]
    # } || # sway_socket
    #   # { . $DOT_CONFIG/sway-launch; sway_socket=sway_socket "$launcher"; } || :
    #   . $DOT_CONFIG/sway-launch || :

    [ ! -z "${SWAY_SOCKET:+x}" ] ||
    {
        export SWAY_SOCK=
        export WAYLAND_DISPLAY=
        # : > $HOME/.wayland_display
        # : > /tmp/$LOGNAME/wayland/.display
    } # ||
    # [ "$sway_socket" = "$SWAY_SOCK" ] ||
    #   { SWAY_SOCK="$sway_socket"; export SWAY_SOCK; }

    # }
    [ ! -z "${WAYLAND_ENV+x}" ] ||
    [ ! -f "$WAYLAND_CONFIG_HOME/env" ] ||
    {
        print "$WAYLAND_CONFIG_HOME/env" "sourced" > "$TTY"
        set -a
        # shellcheck disable=SC1090
        . "$WAYLAND_CONFIG_HOME/env"
        set +a
    }
    [ -z "${DISPLAY+x}" ] || unset DISPLAY
}

# elif [ -n "$(cat /tmp/$LOGNAME/wayland/.display)" ] && [ -z ${WAYLAND_DISPLAY+x} ]; then
#     # Not a reliable operation
#     export WAYLAND_DISPLAY="$(cat /tmp/$LOGNAME/wayland/.display)"
# fi

# [ ! -s "$HOME/.luaver/luaver" ] || . $HOME/.luaver/luaver
# Moved to $DOT_CONFIG/env
# [ ! -f "$DOT_CONFIG/toolchain/env" ] || . $DOT_CONFIG/toolchain/env

# Default wireless link might be not what you want
# [ "$UID" -eq 0 ] ||
# [ -f "/tmp/wpa.lock" ] ||
# # [ ! -x "/mnt/local/bin/wpa" ] ||
# ! command -v "/mnt/local/bin/wpa" > /dev/null 2>&1 ||
# "/mnt/local/bin/wpa" >> $HOME/.config/wpa_supplicant/.wpa.log 2>&1
#

# tmux init
  export TINIT_HOME_DIR="$DOT_CONFIG/terminal"
  export TMUX_PLUGIN_MANAGER_PATH=${TINIT_HOME_DIR}/tmux/plugins
# export TMUX_DIR=$HOME/.tmux
  export TMUX_DIR=$DOT_CONFIG/terminal/tmux

: ${HOSTNAME="$( \
    [ -f "/etc/hostname" ] &&
    cat /etc/hostname ||
    [ ! -f "/etc/os-release" ] ||
    {
        awk -F = '$1 == "ID" {print $2}' < /etc/os-release | tr '[A-Z]' '[a-z]'
        return 0
    }
    command -v hostname > /dev/null 2>&1 ||
    {
        hostname
        return 0
    }
    # printf '%s %s\n' 'HOSTNAME' 'could not get defined'
    print 'HOSTNAME' 'could not get defined' > "$TTY"
    return 1
)"} && export HOSTNAME || :
# Use hostname in TMUX_TMPDIR as $HOME may be on nfs.
# tmux display -p '#{socket_path}'
# export TMUX_TMPDIR="${TMPDIR}/tmux-${HOST}-${UID}"
# export TMUX_TMPDIR="${TMPDIR}/tmux-${HOSTNAME}-$UID"
  export TMUX_TMPDIR="${TMPDIR}/${HOSTNAME}"
# export TMUX_TMPDIR="${TMPDIR}"
# If tmux boot operation failed, run: rm -rf $HOME/tmp/tmux-*
# export VISUAL="vi" \
#   EDITOR="vi" \
#   TERM="linux" \
#   COLORTERM="truecolor" \
#   TMUX_PLUGIN_MANAGER_PATH="$TMUX_PLUGIN_MANAGER_PATH" \
#   WAYLAND_DISPLAY="${WAYLAND_DISPLAY-}"
_tmux() {
    command rm -f "$HOME/tmux*.log"
    [ -d "${TMUX_TMPDIR}" ] || command mkdir -p "${TMUX_TMPDIR}"
    : > "$TMUX_TMPDIR/tmux.log"

    # printf '%s' "$cursor_code"
    #
    # TMUX_TMPDIR="${TMUX_TMPDIR}" command tmux -2 -u 2>&1
    #
    # default-terminal terminal
    #         Set the default terminal for new windows created in this session
    #         - the default value of the TERM environment variable.  For tmux
    #         to work correctly, this must be set to `screen', `tmux' or a
    #         derivative of them.

    # env TERM="screen-256color" sh -c "exec tmux new -As ."

    # TERM="screen-256color"
    # export TERM
    # env TERM="tmux-256color" sh -c "exec tmux new -As ."

    # tmux-256color won't work correctly on cursor displaying:
    # Got grreen comments on $TERM == linux/tmux-256color in tmux
    # env TERM="xterm-256color" \
    # env TERM="tmux-256color" \
    # env TERM="screen-256color" \
    # exec env TERM="screen-256color" \
    # TERM="screen-256color" \

    # TERM == linux version
    # TERM="linux" \

    # TERM == tmux version
    # TERM="tmux-256color" \
    # TINIT_HOME_DIR="$TINIT_HOME_DIR" \
    # TMUX_DIR="$TMUX_DIR" \
    # TMUX_TMPDIR="${TMUX_TMPDIR}" \
    # Not set currently
    # TMUX="$TMUX" \
    # Not set currently
    # TERM_PROGRAM="$TERM_PROGRAM" \
    # TERM="screen-256color" \
    #   Modify TERM outside tmux does not help but disable the F* keys
    exec \
        env \
        TMUX_TMPDIR="$TMUX_TMPDIR" \
        VISUAL="vi" \
        EDITOR="vi" \
        TERM="$TERM" \
        COLORTERM="truecolor" \
        TMUX_PLUGIN_MANAGER_PATH="$TMUX_PLUGIN_MANAGER_PATH" \
        WAYLAND_DISPLAY="${WAYLAND_DISPLAY-}" \
        XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR-}" \
        \tmux -T UTF-8 -T 256 -f "$DOT_CONFIG/terminal/tmux/tmux.conf" new -As . > "$TMUX_TMPDIR/tmux.log" 2>&1 || :
    #   \tmux -T UTF-8,256,ccolour,clipboard,extkeys,focus,usstyle -f "$DOT_CONFIG/terminal/tmux/tmux.conf" new -As . > "$TMUX_TMPDIR/tmux.log" 2>&1 || :
    #     sh -c 'printf '%s' "$cursor_code"; \tmux -T UTF-8 -T 256 new -As .' 2>&1 || :
    # ENV=$HOME/.profile sh -$-l > /dev/tty

    # tmux new -As .
    # tmux -2u new -As . 2>&1
    # command tmux -2 -u 2>&1
}

[ ! -z "${TMUX+x}" ] && [ "${TERM_PROGRAM-}" = "tmux" ] &&
case "$(type "tmux" >/dev/null 2>&1 && type "tmux")" in *"alias"*) unalias tmux ;; esac ||
# unalias tmux ||
alias tmux='_tmux'

# alias tmux="tmux -2"

# https://stackoverflow.com/questions/5687446/how-can-i-shortern-my-command-line-prompts-current-directory
# : "${PWD_LENGTH:=13}" && export PWD_LENGTH
env_reset PWD_LENGTH 13

# TRIMMED='tmux source-file ${HOME}/.tmux.conf; tmux select-pane -T "#{pane_title}";
# printf "%s" $PWD | sed -re "s|(~?/[^/]*/).*(.{$PWD_LENGTH})|\1...\2|"'
# : ${TRIMMED:='printf "$cursor_code"; printf "%s" $PWD | sed -re "s|(~?/[^/]*/).*(.{$PWD_LENGTH})|\1...\2|"'}
# : ${TRIMMED:='printf "%s" $PWD | sed -re "s|(~?/[^/]*/).*(.{$PWD_LENGTH})|\1...\2|"'}


[ -z "${TMUX:+x}" ] &&
{
    [ "${TRIMMED-}" = 'printf "%s" $PWD' ] ||
    _TRIMMED='printf "%s" $PWD'
} || {
    [ "${TRIMMED-}" = 'printf "%s" $PWD; command tmux refresh-client -t #{pane_id}' ] ||
    # Without tmux resize-pane, shell outputs will erase $PS1!
    # No line continuation here!
    _TRIMMED='printf "%s" $PWD; command tmux refresh-client -t #{pane_id}'
    # TRIMMED=$TRIMMED'; command tmux select-pane -T "#{pane_title}";
    # # command tmux resize-pane -t $(command tmux display-message -p #{pane_id})
    # -y $(tmux display-message -p '#{pane_height}') -x $(tmux display-message -p '#{pane_width}')'
    # command tmux capturep -e -J -p -S- -E-'
}
unset TRIMMED
alias TRIMMED='_TRIMMED'
export TRIMMED

# Prompt left/right alignment test
# length_trim="$(eval $TRIMMED | wc -m)"
# margin=$((length_trim - 25 > 0 ? length_trim - 25 : 25 - length_trim))
# export margin
# printf '%s %s\n' '$margin' "$margin"

# Inside kiss conversation. Sourcing init script does not help
# Put to an individual script file?
# /bin/ash: environment_prompt: not found
# alias environment_prompt='_environment_prompt'
# _environment_prompt() {
environment_prompt() {
    # This is running in a seubshell
    # unset SHELL_OPTIONS
    # SHELL_OPTIONS=$- && export SHELL_OPTIONS

    # case "$(type kiss)" in
    #   *"/usr/bin/kiss"*) printf %2.2d%s "${SHLVL}" " " ;;
    #   *) printf %2.2s%s '//' " " ;;
    # esac
    # [ -z "${TMUX:+x}" ] || command tmux refresh-client -t #{pane_id}
    [ -z "${TMUX:+x}" ] && [ -z "${TERM_PROGRAM:+x}" ] &&
        printf %1.1s " " ||
        {
            # command tmux refresh-client -t "$(tmux display -p "#{pane_id}")"
            # command tmux refresh-client -t "\\$(tmux display -p "#{session_id}"):$(tmux display -p "#{window_id}").$TMUX_PANE"
            command tmux refresh-client
            printf %1.1s "t"
        }
    case "$(type kiss > /dev/null 2>&1 && type kiss || :)" in
        *"alias"*|*"/usr/bin/kiss"*|*"/bin/kiss"*)
        # *"/usr/bin/kiss"*)
            printf %1.1s " " ;;
        *)
            # kiss sourced
            printf %1.1s "k"
    esac
    printf %2.2d "$TTY_NUM"
    printf %2.2s "$(tty | tr -d /[[:alpha:]])"
    printf %2.2d%s "${SHLVL}" " "
    # printf "\033[?8c"
    # printf \033[34l
    # printf "\033[ q"
    # printf "$cursor_code"
}

environment_prompt='
[ -z "${TMUX:+x}" ] && [ -z "${TERM_PROGRAM:+x}" ] &&
    printf %1.1s " " || {
    # command tmux refresh-client -t "#{session_id}:#{window_id}.$TMUX_PANE"
    command tmux refresh-client
    printf %1.1s "t"
}
case "$(type kiss > /dev/null 2>&1 && type kiss || :)" in
    *"alias"*|*"/usr/bin/kiss"*|*"/bin/kiss"*)
        printf %1.1s " " ;;
    *)
        printf %1.1s "k"
esac
printf %2.2d "$TTY_NUM"
printf %2.2s "$(tty | tr -d /[[:alpha:]])"
printf %2.2d%s "${SHLVL}" " "
# printf "$cursor_code"
[ "$(id -u)" -eq 0 ] &&
echo "$cursor_hex" | tee "$cursor_default" > /dev/null ||
echo "$cursor_hex" | doas tee "$cursor_default" > /dev/null
'
# (// silent_state || pipe_boot "$TTY" & :)
export environment_prompt

back_ground_root='
[ -z "${TMUX:+x}" ] && [ -z "${TERM_PROGRAM:+x}" ] &&
color="\033[1;031m" ||
color="\033[1;043m"
case "$(type kiss > /dev/null 2>&1 && type kiss || :)" in
    *"ENV"*)
        ;;
    *)
        color="\033[1;104m"
esac
printf %s "$color"
'
export back_ground_root

back_ground_user='
[ -z "${TMUX:+x}" ] && [ -z "${TERM_PROGRAM:+x}" ] &&
color="\033[1;121m" ||
color="\033[38;5;14m"
case "$(type kiss > /dev/null 2>&1 && type kiss || :)" in
    *"ENV"*)
        ;;
    *)
        color="\033[38;5;9m"
esac
printf %s "$color"
'
export back_ground_user

# In GUI, their terminal settings will change the behavior
# https://andidittrich.com/2019/10/busybox-fancy-cli-color-prompt-ps1.html
# If not running interactively, don't do anything
case "$-" in *"i"*) ;;
# [ -z "${-##*i*}" ]  || return
*) return
esac
# [ ! -z "${PS1+x}" ] || return
# set a fancy prompt (non-color, overwrite the one in /etc/profile)
[ "$UID" -eq 0 ] &&
    # root user
    # export PS1='\n\e[31m\e[1m\u@\h\e[0m \e[94m\w\n \e[31m\e[1m#\e[0m\e[0m\e[39m\e[49m '
    # export PS1='\e[31m\e[1m\u@\h\e[0m \e[94m\w\n \e[31m\e[1m#\e[0m\e[0m\e[39m\e[49m '
    # export PS1="[\e[1;31m\u\e[m@\e[1;24m${HOSTNAME}\e[m] [\$(date +%a\ %b\ %d,\ %H:%M:%S\ %Z\ %Y)]\n\e[0;39m[\w]\e[m \$ "
    # export PS1="[\e[1;31m\u\e[m@\e[1;24m${HOSTNAME}\e[m] \e[0;39m[\w]\e[m [\$(date +%a\ %b\ %d,\ %H:%M:%S\ %Z\ %Y)]\n\$ "
    # https://superuser.com/questions/301353/escape-non-printing-characters-in-a-function-for-a-bash-prompt/301355
    # https://stackoverflow.com/questions/19092488/custom-bash-prompt-is-overwriting-itself

    # If you want a \ output, you need \\\\
    # Left/right alignment simultaneously
#     export PS1='\[\e[1;91m\]\u\[\e[m\]@\[\e[1;31m\]${HOSTNAME}\[\e[m\]:\
# \[\e[0;33m\]$(eval $TRIMMED)\[\e[m\]\
# $(printf "%$(($(tput cols) - 14 - $(eval $TRIMMED | wc -m)))s" \
# " -- $(date +%a\ %b\ %d,\ %H:%M:%S\ %Z\ %Y)") \[\e[1;5m\]#$(printf %2.2d $SHLVL)\[\e[m\]\n'

#     export PS1='\[\e[1;5m\]#$(printf %2.2d $SHLVL)\[\e[m\] \
# -- $(date +%a\ %b\ %d,\ %H:%M:%S\ %Z\ %Y)\n\
# \[\e[1;91m\]\u\[\e[m\]@\[\e[1;31m\]${HOSTNAME}\[\e[m\]:\
# \[\e[0;33m\]$(eval $TRIMMED)\[\e[m\]\n'

# date moved to tmux border
#     export PS1='\[\e[1;5m\]#$(printf "%s " "$(curl http://ipinfo.io/ip 2>/dev/null)"
#     printf %2.2d "$SHLVL"; command tmux refresh-client -t #{pane_id})\[\e[m\] \

#     export PS1='\[\e[1;5m\]#$(printf %2.2d "$SHLVL"; [ -z "${TMUX:+x}" ] || command tmux refresh-client -t #{pane_id})\[\e[m\] \
# \[\e[0;91m\]\u\[\e[m\]@\[\e[0;31m\]${HOSTNAME}\[\e[m\]:\
# \[\e[0;33m\]\w\[\e[m\]\n'

# \[\e[0;33m\]$(eval $TRIMMED)\[\e[m\]\n'

    # export PS1="[\[\e[1;5m\]\u\[\e[m\]@\[\e[1;24m\]${HOSTNAME}\[\e[m\]] \
    # \[\e[0;39m\][\w]\[\e[m\] [\$(date +%a\ %b\ %d,\ %H:%M:%S\ %Z\ %Y)]\n$(printf %s "$cursor_code")"

    # printf %2.2d%s "${SHLVL}" " "
    # "sh: environment_prompt: not found" when tmux kill-server
    # export PS1='\[\033[1;101m\]#$(environment_prompt)\[\033[m\]\

    # export PS1='\[\033[1;101m\]#$(environment_prompt
    # )\[\033[m\]\[\033[1;101m\]\u@${HOSTNAME}:\[\033[m\]\[\033[1;101m\]\w \[\033[m\]\n'

    export PS1='\[$(eval "$back_ground_root")\]$(eval "$environment_prompt"
    )\[\033[m\]\[$(eval "$back_ground_root")\]\u@${HOSTNAME}:\[\033[m\]\[$(eval "$back_ground_root")\]\w \[\033[m\]\n' ||

    # non root
    # export PS1='\n\e[92m\e[1m\u@\h\e[0m \e[94m\w\n \e[92m\e[1m$\e[0m\e[0m\e[39m\e[49m '
    # export PS1='\e[92m\e[1m\u@\h\e[0m \e[94m\w\n \e[92m\e[1m$\e[0m\e[0m\e[39m\e[49m '
    # export PS1="[\e[1;36m\u\e[m@\e[1;33m${HOSTNAME}\e[m] [\$(date +%a\ %b\ %d,\ %H:%M:%S\ %Z\ %Y)]\n\e[0;32m[\w]\e[m \$ "
    # export PS1="[\e[1;36m\u\e[m@\e[1;33m${HOSTNAME}\e[m] \e[0;32m[\w]\e[m [\$(date +%a\ %b\ %d,\ %H:%M:%S\ %Z\ %Y)]\n\$ "
    # https://stackoverflow.com/questions/19092488/custom-bash-prompt-is-overwriting-itself

#     export PS1='\[\e[1;5m\]#$(printf %2.2d $SHLVL)\[\e[m\] \
# -- $(date +%a\ %b\ %d,\ %H:%M:%S\ %Z\ %Y)\n\
# \[\e[1;96m\]\u\[\e[m\]@\[\e[1;94m\]${HOSTNAME}\[\e[m\]:\
# \[\e[0;32m\]$(eval $TRIMMED)\[\e[m\]\n'

# date moved to tmux border
#     export PS1='\[\e[1;5m\]#$(printf "%s " "$(curl http://ipinfo.io/ip 2>/dev/null)"
#     printf %2.2d "$SHLVL"; command tmux refresh-client -t #{pane_id})\[\e[m\] \

#     export PS1='\[\e[1;5m\]#$(printf %2.2d "$SHLVL"; [ -z "${TMUX:+x}" ] || command tmux refresh-client -t #{pane_id})\[\e[m\] \
# \[\e[0;92m\]\u\[\e[m\]@\[\e[0;32m\]${HOSTNAME}\[\e[m\]:\
# \[\e[0;94m\]\w\[\e[m\]\n'

# \[\e[0;32m\]$(eval $TRIMMED)\[\e[m\]\n'

    # export PS1="[\[\e[1;5m\]\u\[\e[m\]@\[\e[1;33m\]${HOSTNAME}\[\e[m\]] \
    # \[\e[0;32m\][\w]\[\e[m\] [\$(date +%a\ %b\ %d,\ %H:%M:%S\ %Z\ %Y)]\n$(printf %s "$cursor_code")"

    # printf %2.2d%s "${SHLVL}" " "

    # export PS1='\[\033[1;121m\]#$(environment_prompt
    # )\[\033[m\]\[\033[1;121m\]\u@${HOSTNAME}:\[\033[m\]\[\033[1;121m\]\w \[\033[m\]\n'

    export PS1='\[$(eval "$back_ground_user")\]$(eval "$environment_prompt"
    )\[\033[m\]\[$(eval "$back_ground_user")\]\u@${HOSTNAME}:\[\033[m\]\[$(eval "$back_ground_user")\]\w \[\033[m\]\n'


is_pts() {
    case "$1" in *"pts"*) return 0;;
        *) return 1
    esac
}

# Function keys doesn't work when using tmux/screen as TERM
# In tmux.conf
# set-option -g default-command "env TERM=linux ${SHELL} -l"
# print '$TTY_NUM' "$TTY_NUM" > "$TTY"
# read -r

# [ ! -z "${-:+x}" ] && [ ! -z "${-##*i*}" ] ||
[ "$UID" -eq 0 ] ||
# { [ ! -z "${TTY_NUM:+x}" ] && [ 1 -eq "$TTY_NUM" ] && ! is_child_of "foot"; } ||
{ [ ! -z "${TTY_NUM:+x}" ] && [ 1 -eq "$TTY_NUM" ] && ! is_pts "$TTY"; } ||
[ "${TERM_PROGRAM-}" = "tmux" ] || is_child_of "tmux" ||
is_chrooted ||
# [ ! -z "${TMUX+x}" ] || # [ -n "$(cat $DOT_CONFIG/.tmux_lock)" ] ||
#   {
#       {
#           [ -z "${WAYLAND_DISPLAY:+x}" ] || [ -z "${DISPLAY:+x}" ]
#       } &&
#           [ "$TTY_NUM" -eq 1 ]
#       } ||

_tmux

# {
#   command rm -f "$HOME/tmux*.log"
#   [ -d "${TMUX_TMPDIR}" ] || command mkdir -p "${TMUX_TMPDIR}"
#
#   # printf '%s' "$cursor_code"
#
#   # TMUX_TMPDIR="${TMUX_TMPDIR}" command tmux -2 -u 2>&1
#
# # default-terminal terminal
# #         Set the default terminal for new windows created in this session
# #         - the default value of the TERM environment variable.  For tmux
# #         to work correctly, this must be set to `screen', `tmux' or a
# #         derivative of them.
#
#   # env TERM="screen-256color" sh -c "exec tmux new -As ."
#
#   # TERM="screen-256color"
#   # export TERM
#   # env TERM="tmux-256color" sh -c "exec tmux new -As ."
#
#   # tmux-256color won't work correctly on cursor displaying:
#   # Got green comments on $TERM == linux/tmux-256color in tmux
#   # exec env TERM="xterm-256color" \
#   # exec env TERM="tmux-256color" \
#   # exec env TERM="screen-256color" \
#       # TERM="screen-256color" \
#   exec env \
#       VISUAL="vi" \
#       TERM="linux" \
#       COLORTERM="truecolor" \
#       TMUX_TMPDIR="$TMUX_TMPDIR" \
#       TINIT_HOME_DIR="$TINIT_HOME_DIR" \
#       TMUX_PLUGIN_MANAGER_PATH="$TMUX_PLUGIN_MANAGER_PATH" \
#       TMUX_DIR="$TMUX_DIR" \
#       WAYLAND_DISPLAY="$WAYLAND_DISPLAY" \
#       \tmux -T UTF-8 -T 256 new -As . 2>&1 || :
#   #     sh -c 'printf '%s' "$cursor_code"; \tmux -T UTF-8 -T 256 new -As .' 2>&1 || :
#   # ENV=$HOME/.profile sh -$-l > /dev/tty
#
#       # tmux new -As .
#       # tmux -2u new -As . 2>&1
# }

# Endless creating new panes
# tmux split-window -t _

# [ -d "/tmp/tmux" ] || mkdir -p "/tmp/tmux"
# [ -e "/tmp/tmux/.lock" ] || touch "/tmp/tmux/.lock"
# if [ ! -z "${TMUX+x}" ] && [ -z "$(cat $DOT_CONFIG/.tmux_lock)" ]; then
#     printf '%s' "${TMUX}" > $DOT_CONFIG/.tmux_lock
# elif [ -n "$(cat $DOT_CONFIG/.tmux_lock)" ] && [ -z ${TMUX+x} ]; then
#     export TMUX="$(cat $DOT_CONFIG/.tmux_lock)"
# fi

# [ -s ~/.luaver/luaver ] && . ~/.luaver/luaver
#

SCRIPT_NAME="$SCRIPT_SCOPE"
SCRIPT_SCOPE="$script_scope"

# set ts=4 sw=4 tw=0 noet :
#
#
#
#
#
#
#

