#! /bin/sh
# set -x
# Definition sequence
# doas.conf->share->/etc/profile->login shell->.profile->.ashrc->env

# alias /='eval'

# env_reset() {
#   local env_key_name="${1:?"Must give a key"}"
#   local env_value="${2:?"Must give a value"}"
#   / "[ \"\${$env_key_name-}\" = \"$env_value\" ]" || {
#       / "echo \"Original \\$\$env_key_name = \${$env_key_name-}\""
#       / "$env_key_name=$env_value" && / 'export $env_key_name'
#   }
# }

# user="$(whoami)"
# [ "$USER" = "$user" ] || USER="$user" && export USER
env_reset USER "$(whoami)"
# https://unix.stackexchange.com/questions/32041/checking-if-path-contains-home-mydir-and-adding-it-if-not-all-in-a-script
# https://tldp.org/LDP/abs/html/parameter-substitution.html
# "grep -q" "$? -eq 0" could be a good solution?
prepend() {
	local key="${1}"
	# CONTAINER_VALUE="$(eval echo "\$${1}")"
	local value="${2}"
	[ ! -d "${value}" ] || {
		# echo "prepend \$key   = $key"
		# echo "prepend \$CONTAINER_VALUE = $(eval echo "\$${key}")"
		case ":$(eval echo "\$${key}"):" in
			*":${value}:"*) :;;
			*) eval "export $key=${value}\${$key:+\":\$$key\"}" ;;
		esac
	}
}
# prepend PATH "/build/os"

# https://superuser.com/questions/39751/add-directory-to-path-if-its-not-already-there
# # prepend to PATH
# _path_prepend "$XDG_DATA_HOME/phpenv/bin"
#
# # prepend to MANPATH
# _path_prepend MANPATH "$XDG_DATA_HOME/shell-installer/man"
#
# # prepend to PERL5LIB
# _path_prepend PERL5LIB "$PERL_LOCAL_LIB_ROOT/lib/perl5"
#
# Features
#
#     POSIX compliant
#     Doesn't use Bash's declare -n

prepend_path() {
	if [ -n "$2" ]; then
		case ":$(eval "echo \$$1"):" in
			*":$2:"*) :;;
			*) eval "export $1=$2\${$1:+\":\$$1\"}" ;;
		esac
	else
		case ":$PATH:" in
			*":$1:"*) :;;
			*) export PATH="$1${PATH:+":$PATH"}" ;;
		esac
	fi
}

append_path() {
	if [ -n "$2" ]; then
		case ":$(eval "echo \$$1"):" in
			*":$2:"*) :;;
			*) eval "export $1=\${$1:+\"\$$1:\"}$2" ;;
		esac
	else
		case ":$PATH:" in
			*":$1:"*) :;;
			*) export PATH="${PATH:+"$PATH:"}$1" ;;
		esac
	fi
}

# https://unix.stackexchange.com/questions/4965/keep-duplicates-out-of-path-on-source
# Define path_append and path_prepend to add directory to target path, e.g.
# PATH, MANPATH
# Add to the end of a target path
_path_append() {
	[ ! -z "${1:+x}" ] || return
	local extend=":$(eval "echo \$$1"):"
	# echo "\$2 = $2"
	# echo "test=${extend##*:$2:*}"
	# [ -d "$2" ] || {
	[ -d "$2" ] || return
		# eval test -z "\"\${$1##*:$2:*}\"" -o -z "\"\${$1%%*:$2}\"" \
		# -o -z "\"\${$1##$2:*}\"" -o -z "\"\${$1##$2}\"" ||
		[ -z "${extend:+x}" ] && eval "export $1=$2" ||
		[ -z "${extend##*:$2:*}" ] || eval "export $1=\$$1:$2"
	# }
}
alias path_append='_path_append'

# Add to the front of a target path
_path_prepend() {
	[ ! -z "${1:+x}" ] || return
	local extend=":$(eval "echo \$$1"):"
	# echo "\$2 = $2"
	# echo "test=${extend##*:$2:*}"
	# [ ! -d "$2" ] || {
	[ -d "$2" ] || return
		# eval test -z "\"\${$1##*:$2:*}\"" -o -z "\"\${$1%%*:$2}\"" \
		# -o -z "\"\${$1##$2:*}\"" -o -z "\"\${$1##$2}\"" ||
		[ -z "${extend:+x}" ] && eval "export $1=$2" ||
		[ -z "${extend##*:$2:*}" ] || eval "export $1=$2:\$$1"
	# }
}
alias path_prepend='_path_prepend'
path_prepend PATH "$SHARE_PREFIX/init"

# echo "\$TERM = $TERM"
#
set_font() {
# Set font when running in console. For hidpi screen
# If you want to change font in tmux, just detach it and attach again
	# { [ "$TERM" = "linux" ] || [ -z "${TERM##*"vt"*}" ]; } || return 0
	# [ -z "${TMUX+x}" ] || return 0
	case "$(tty)" in
		*"tty"*)
			# This case doesn't mean it is realy a tty, jist can run setfont on it
			# Bright(and fat face)  Normal
			# ter-v24b.psf.gz       ter-v24n.psf.gz
			font=
			# terminus-font
			if [ -f "/mnt/setfont/ter-v24n.psf.gz" ]; then
				font="/mnt/setfont/ter-v24n.psf.gz"
			elif [ -f "/mnt/setfont/consolefonts/ter-v24n.psf.gz" ]; then
				font="/mnt/setfont/consolefonts/ter-v24n.psf.gz"
			else
				consolefonts="$(find /mnt/setfont -type d -name \
					"consolefonts" 2> /dev/null)"
				[ -n "${consolefonts:+x}" ] ||
				# Might be permission denied
				consolefonts="$(find /usr/share -type d -name \
					"consolefonts" 2> /dev/null)"
				# consolefonts="/usr/share/consolefonts"
				# consolefonts="/usr/share/kdb/consolefonts"

				[ -n "${consolefonts:+x}" ] || return 0
				if  [ -f "$consolefonts/ter-v24n.psf.gz" ]; then
					font="$consolefonts/ter-v24n.psf.gz"
					# font="${consolefonts}/ter-v28b.psf.gz"
					# Use default font
				elif [ -f "$consolefonts/LatGrkCyr-12x22.psfu.gz" ]; then
					font="$consolefonts/LatGrkCyr-12x22.psfu.gz"
				fi
			fi
			[ -z "${font:+x}" ] || {
				setfont "$font" ||
				printf 'Font %s setting failed\n' "$font"
			}
		#     ;;
		# *"not"*|*"Not"*)
		# *)
		#     printf '%s\n' "Not a tty" ;;
	esac
}

{ [ "$TERM" != "linux" ] && [ -n "${TERM##*"vt"*}" ]; } ||
[ -n "${TMUX+x}" ] || set_font

path_prepend PATH "/usr/share/easy-rsa"
# path_prepend PATH "/build/os"

# path_prepend PATH $macPortsDir/sbin
# path_prepend MANPATH $macPortsDir/man


# NOTE: To enable 'ccache' add this to your
#       '.shellrc' or '.profile'.
#
# -> export PATH=/usr/lib/ccache/bin:$PATH
#
# NOTE: GCC is not supported out-of-the-box.
#       The following symlinks need to be created.
#
# -> ln -s /usr/bin/ccache /usr/lib/ccache/bin/gcc
# -> ln -s /usr/bin/ccache /usr/lib/ccache/bin/g++

path_prepend PATH "/usr/lib/ccache/bin"

# # For chroot tools I put it there
# path_prepend PATH "/mnt"

path_prepend PATH "${SHARE_PREFIX}/local/bin"


export SRC_PREFIX="/working"
export BUILD_PREFIX="/build"

export HISTFILE="${HOME}/.ash_history"
export HISTSIZE="640000"
export SAVEHIST="${HISTSIZE}"

# export EDITOR="/usr/bin/nvim"
export TMP="$HOME/tmp"
export TEMP="$TMP"
export TMPDIR="$TMP"

# Locales!
export LANG="en_US.UTF-8"
export LC_COLLATE="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"
export LC_MESSAGES="en_US.UTF-8"
export LC_MONETARY="en_US.UTF-8"
export LC_NUMERIC="en_US.UTF-8"
export LC_TIME="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

export LESS="-RX"

[ -d "${TMP}" ] || mkdir "${TMP}"

if [ -f "/etc/hostname" ]; then
	export HOSTNAME=$(cat /etc/hostname)
else
	[ ! -f "/etc/os-release" ] ||
		export HOSTNAME=$(cat /etc/os-release | grep ^ID | sed 's/ID=//' | sed 's/"//g')
fi


# https://stackoverflow.com/questions/229551/how-to-check-if-a-string-contains-a-substring-in-bash/229585#229585
path_prepend PATH "${HOME}/bin"
# https://firefox-source-docs.mozilla.org/setup/linux_build.html
# ${HOME}/.local
PYTHON_BASE="$(python3 -m site --user-base)"
PYTHON_BASE_REFINED=$(echo "${PYTHON_BASE}" | sed 's#/#\\/#g' | \
		sed 's#\.#\\.#g')
path_prepend PATH "${PYTHON_BASE}/bin"
path_prepend PATH "${PYTHON_BASE_REFINED}/bin"
path_prepend PATH "${HOME}/.local/bin"
path_prepend PATH "${HOME}/.emacs.d/bin"

# For npm
path_prepend PATH "${HOME}/node/bin"

SHARE_PREFIX_REFINED=$(echo "${SHARE_PREFIX}" | sed 's#/#\\/#g' | \
		sed 's#\.#\\.#g')

[ ! -d "${SHARE_PREFIX}/deno/bin" ] || {
	export DENO_INSTALL="${SHARE_PREFIX}/deno"
	path_prepend PATH "${SHARE_PREFIX}/deno/bin"
}

export RUSTFLAGS="-Clink-arg=-Wl,--dynamic-linker=/usr/lib/libc.so"

[ "$(id -u)" -ne "0" ] || {
	[ ! -f "${HOME}/.cargo/env" ] || . "${HOME}/.cargo/env"
	[ ! -f "${HOME}/.local/share/cargo/env" ] ||
	. "${HOME}/.local/share/cargo/env"

	export CARGO_HOME="$XDG_DATA_HOME"/cargo
	[ -d "${CARGO_HOME}" ] || \mkdir -p "${CARGO_HOME}"

	[ ! -d  "${HOME}/.cargo/bin" ] ||
	path_prepend PATH "${HOME}/.cargo/bin"
	[ ! -d "${HOME}/.local/share/cargo/bin" ] ||
	path_prepend PATH "${HOME}/.local/share/cargo/bin"
}

# luarocks sucks when on a system with gcc
[ -z "${LUAROCKS_DEFINED_LUA+x}" ] ||
! command -v /usr/bin/luarocks > /dev/null 2>&1 || {
	[ -d "${HOME}/.cache/luarocks" ] || mkdir -p "${HOME}/.cache/luarocks"
	# https://github.com/luarocks/luarocks/wiki/Using-LuaRocks
	# eval $(luarocks path)
	# eval "$(luarocks-5.1 path --bin)"
	eval '$(/usr/bin/luarocks path --append --bin)'

	# echo "double quote" "$(/usr/bin/luarocks path --append --bin)"
	# echo 'single quote' '$(/usr/bin/luarocks path --append --bin)'

	export PATH=$(echo $PATH | sed "s/'//g")
	# https://stackoverflow.com/questions/273909/how-do-i-manipulate-path-elements-in-shell-scripts
	# https://unix.stackexchange.com/questions/40749/remove-duplicate-path-entries-with-awk-command/40973#40973
	# export PATH=$(echo "${PATH}" | sed "s/:/\n/g" | uniq | tr "\n" ":" | sed 's|:$||')
	# https://unix.stackexchange.com/questions/124444/how-can-i-cleanly-add-to-path
	# export PATH=$(echo "${PATH}" | sed "s/:/\n/g" | uniq | tr "\n" ":" | sed -e's/:$/\n/')
	export LUA_PATH=$(echo $LUA_PATH | sed "s/'//g")
	# export LUA_PATH=$(echo "${LUA_PATH}" | sed "s/;/\n/g" | uniq | tr "\n" ":" | sed -e's/:$/\n/')
	export LUA_CPATH=$(echo $LUA_CPATH | sed "s/'//g")
	# export LUA_CPATH=$(echo "${LUA_CPATH}" | sed "s/;/\n/g" | uniq | tr "\n" ":" | sed -e's/:$/\n/')

}

# Without this, source functions will not work
path_prepend PATH "."

# : "${USE_ENV=}"
# [ -z "${USE_ENV+x}" ] || {
#
# Turn the default shell into a kiss debugging environment
# It's hard to make "env" to work with it
# Neither the log folder nor the pipes are created at this moment.
# So don't use the log functions until user_output and pipes/listeners are ready

# [ "$KISS_TMPDIR" = "/tmp/$USER/kiss" ] || KISS_TMPDIR="/tmp/$USER/kiss" && export KISS_TMPDIR
env_reset KISS_TMPDIR "/tmp/$USER/kiss"
# [ "$CACHE_ROOT" = "/tmp" ] || CACHE_ROOT="/tmp" && export CACHE_ROOT
# env_reset CACHE_ROOT "/dev/shm"
env_reset PKG_MNG_ROOT "/working/os/kiss"
# : "${DEBUG_AT_BACKGROUND=}"
# [ -d "$KISS_TMPDIR" ] || mkdir -p "$KISS_TMPDIR"
# log_dir="$KISS_TMPDIR/logs"
# [ -d "$log_dir" ] || mkdir -p "$log_dir"
# : "${USER_OUTPUT:="$KISS_TMPDIR/logs/build.log"}" && export USER_OUTPUT
# # [ -z "${USE_SAY_PIPE+x}" ] || unset USE_SAY_PIPE
# [ -z "${INNER_PIPE_ID+x}" ] || unset INNER_PIPE_ID
# [ -z "${mute_err+x}" ] || unset mute_err
# [ -z "${KEEP_DEPRECATED+x}" ] || unset KEEP_DEPRECATED
# # [ -n "${HEADER+x}" ] ||
# [ ! -f "/usr/include/kiss-share" ] ||
# . /usr/include/kiss-share > /dev/null 2>&1
# # exec 1023>&2
# exec 2>"$ERR_OUTPUT"
# . /working/test/shell/subshell
# # alias kiss='. /usr/bin/kiss'
# kiss() { (. /usr/bin/kiss "$@"); }
# kiss() { ENV=/usr/include/kiss-share $SHELL; }
# : "${ERR_OUTPUT:="$KISS_TMPDIR/logs/err.log"}"      && export ERR_OUTPUT
env_reset ERR_OUTPUT "$KISS_TMPDIR/logs/err.log"
# : "${INIT_OUTPUT:="$KISS_TMPDIR/logs/init.log"}"  && export INIT_OUTPUT
env_reset INIT_OUTPUT "$KISS_TMPDIR/logs/init.log"
# : "${USER_OUTPUT:="$KISS_TMPDIR/logs/build.log"}" && export USER_OUTPUT
env_reset USER_OUTPUT "$KISS_TMPDIR/logs/build.log"
env_reset SHELL_OPTIONS $(printf '%s' $-)
export USE_SAY_PIPE=
export KISS_AS_LIBRARY=

# kiss() { ENV=/usr/bin/kiss $SHELL -l; }
[ -z "${KISS_AS_LIBRARY+x}" ] || {
	[ "$(awk '$5=="/" {print $1}' < /proc/1/mountinfo)" \
		!= "$(awk '$5=="/" {print $1}' < /proc/$$/mountinfo)" ] &&
	# kiss() { ENV=/usr/bin/kiss $SHELL -$-; } ||
	alias kiss=' KISS_AS_LIBRARY= SHELL_OPTIONS=$-i ENV=/usr/bin/kiss $SHELL -$-i "$@" ' ||
	# kiss() { ENV=/usr/bin/kiss $SHELL -$-l; }

	# alias kiss=' SHELL_OPTIONS=$- ENV=/usr/bin/kiss $SHELL -$-l "$@" '
	alias kiss=' KISS_AS_LIBRARY= SHELL_OPTIONS=$-i ENV=/usr/bin/kiss $SHELL -$-li "$@" '
}
#
# alias kiss='copy "$CACHE_ROOT";
# path_prepend PATH $CACHE_ROOT/usr/bin;
# command -v $CACHE_ROOT/usr/bin/kiss > /dev/null 2>&1 &&
#   unalias kiss &&
#   alias kiss='$CACHE_ROOT/usr/bin/kiss' &&
#   kiss "$@" ||
#   printf %s\\n "kiss is not loaded"'

# alias kiss='
# path_prepend PATH $PKG_MNG_ROOT/usr/bin;
# command -v $PKG_MNG_ROOT/usr/bin/kiss > /dev/null 2>&1 &&
#   unalias kiss &&
#   alias kiss='$PKG_MNG_ROOT/usr/bin/kiss' &&
#   kiss "$@" ||
#   printf %s\\n "kiss is not loaded"'

# How to debug kiss
# SHELL_OPTIONS=x$- kiss p luajit
# Redefine kiss like this in command line:
# kiss() { ENV=/usr/bin/kiss $SHELL -x; }
# alias kiss=' ENV=/usr/bin/kiss $SHELL -x "$@" '
# Or,
# set -x
# kiss
#
# }

# Colors.
   red='\e[0;31m'
   RED='\e[1;31m'
 green='\e[0;32m'
 GREEN='\e[1;32m'
yellow='\e[0;33m'
YELLOW='\e[1;33m'
  blue='\e[0;34m'
  BLUE='\e[1;34m'
purple='\e[0;35m'
PURPLE='\e[1;35m'
  cyan='\e[0;36m'
  CYAN='\e[1;36m'
	   NC='\e[0m'

# Aliases
alias cp='cp -iv'
alias rcp='rsync -v --progress'
alias rmv='rsync -v --progress --remove-source-files'
alias mv='mv -iv'
alias rm='rm -iv'
alias rmdir='rmdir -v'
alias ln='ln -v'
alias chmod='chmod -c'
alias chown='chown -c'
alias mkdir='mkdir -v'
# git config --global --replace-all core.pager '/usr/bin/less -R -F -X'
alias git='git -P'
# alias dotconfig='doas /usr/bin/git --git-dir=/home/dotconfig --work-tree=/home'

if command -v diff > /dev/null 2>&1; then
	alias diff='diff -Nuar'
elif command -v colordiff > /dev/null 2>&1; then
	alias diff='colordiff -Nuar'
fi


# # shortcuts
# alias la='ls $LS_OPTIONS -all -h'

# alias grep='grep --colour=auto'
# alias egrep='egrep --colour=auto'
# alias ls='ls --color=auto --human-readable --group-directories-first --classify'
alias ls='ls --color=auto -h --group-directories-first -F'

# "parm_index" needs to be removed from terminfo -L1 screen-256color (look into "$SHARE_PREFIX/init/ashrc")
# [ ! -z "${TMUX+x}" ] && {
# # alias ll='ls --color=auto --human-readable --group-directories-first --classify -l'
#     case "$(type "ll" 2>/dev/null)" in *"alias"*) unalias ll ;; esac
#     # alias ll='sh -c "ls --color=auto -h --group-directories-first -F -la;
#     # tmux copy-mode; tmux send-keys -X -t #{pane_id} cancel"'
#     alias ll='sh -c "ls --color=auto -h --group-directories-first -F -la;
#     tmux copy-mode; tmux send-keys \#{pane_id} q"'
# } ||
alias ll='ls --color=auto -h --group-directories-first -F -la'

alias la='ls --color=auto -h --group-directories-first -F -lathr'

alias   nv='[ ! -f "$HOME/.vim/"*".tmp" ] || rm -f "$HOME/.vim*.tmp"; /usr/bin/nvim'
alias nivm='[ ! -f "$HOME/.vim/"*".tmp" ] || rm -f "$HOME/.vim*.tmp"; /usr/bin/nvim'
alias nvim='[ ! -f "$HOME/.vim/"*".tmp" ] || rm -f "$HOME/.vim*.tmp"; /usr/bin/nvim'

if [ -e "/usr/bin/vim-huge" ]; then
   alias vim='[ ! -f "$HOME/.vim/"*".tmp" ] || rm -f "$HOME/.vim*.tmp"; /usr/bin/vim-huge'
elif [ -e "/usr/bin/vim" ]; then
   alias vim='[ ! -f "$HOME/.vim/"*".tmp" ] || rm -f "$HOME/.vim*.tmp"; /usr/bin/vim'
fi
# This is nvi on current system. /usr/bin/vi is part of busybox
# alias vi="/usr/bin/vi"


# alias history='history 1 -1'

# https://stackoverflow.com/questions/3701809/how-to-detect-using-of-wildcard-asterisk-as-parameter-for-shell-script
glob_stop() {
	[ "$2" != "*" ] || {
		echo "You can not use a wildcard"
		return
	}
	set +f
	"$@";
}
alias q='set -f; glob_stop /mnt/local/bin/q'

export INPUT_METHOD=fcitx
export GTK_IM_MODULE=fcitx    # export GTK_IM_MODULE=wayland
export QT_IM_MODULE=fcitx
export QT4_IM_MODULE=fcitx
export XMODIFIERS="@im=fcitx"
export XIM_SERVERS=fcitx

export QT_QPA_PLATFORMTHEME=qt5ct
export QT_PLATFORM_PLUGIN=qt5ct
export QT_PLATFORMTHEME=qt5ct
export QT_WAYLAND_DISABLE_WINDOWDECORATION="1"
# export QT_WAYLAND_FORCE_DPI=physical
export QT_WAYLAND_FORCE_DPI=0

export QT_AUTO_SCREEN_SCALE_FACTOR=0
export QT_SCALE_FACTOR=1

# GDK_SCALE allows only Integer values, GDK_DPI_SCALE=x allows decimal values such as . GDK_DPI_SCALE=0.66
# export GDK_SCALE=0
# export GDK_SCALE=2.0
export GDK_DPI_SCALE=2.0
export GDK_DPI_SCALE=0.75


# https://forum.obarun.org/viewtopic.php?id=855
[ "$DBUS_SESSION_ADDRESS" = "unix:path=$XDG_RUNTIME_DIR/bus" ] ||
# export DBUS_SESSION_ADDRESS=unix:path=/run/usr/${UID}/bus
DBUS_SESSION_ADDRESS=unix:path=$XDG_RUNTIME_DIR/bus &&
	export DBUS_SESSION_ADDRESS

[ "$DBUS_SESSION_BUS_ADDRESS" = "unix:path=$XDG_RUNTIME_DIR/bus" ] ||
	# export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/${UID}/bus
DBUS_SESSION_BUS_ADDRESS="unix:path=$XDG_RUNTIME_DIR/bus" &&
	export DBUS_SESSION_BUS_ADDRESS

export KWIN_DRM_USE_EGL_STREAMS=1

[ "$TERM" != "xterm" ] || export TERM=xterm-256color

# # [Running ncurses program that uses funky glyphs in alacritty freezes sway](https://github.com/swaywm/sway/issues/5417)
export WLR_DRM_NO_ATOMIC=1
export WLR_DRM_NO_MODIFIERS=1

# XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
# export XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}

# export QT_STYLE_OVERRIDE=gtkexport

# export QT_STYLE_OVERRIDE=qt5ct-style

# export QT_GRAPHICSSYSTEM=native
# export QT_GRAPHICSSYSTEM=native
# export QT_GRAPHICSSYSTEM=raster
export QT_GRAPHICSSYSTEM=opengl
export QT_WAYLAND_DISABLE_WINDOWDECORATION=1
export QT_SCREEN_SCALE_FACTORS=1
# https://doc.qt.io/qt-6/qtwaylandcompositor-index.html
export QT_QPA_PLATFORMTHEME=qt5ct
export QT_SCALE_FACTOR=0
# True or False
# export QT_AUTO_SCREEN_SCALE_FACTOR=1
export QT_AUTO_SCREEN_SCALE_FACTOR=0
export QT_WAYLAND_FORCE_DPI=0
# https://docs.voidlinux.org/config/graphical-session/wayland.html
# https://news.ycombinator.com/item?id=24236003
export MOZ_ENABLE_WAYLAND=1
export MOZ_WEBRENDER=1
export MOZ_USE_XINPUT2=1
export MOZ_DBUS_REMOTE=1

export XDG_SCREENSHOTS_DIR=$HOME/pictures/screenshots
export XDG_PICTURES_DIR=$HOME/pictures/screenshots

# # https://voidlinux.miraheze.org/wiki/GNOME/Keyring_-
# [ -z "${DESKTOP_SESSION:+x}" ] || {
#     eval $(gnome-keyring-daemon --start)
#     export SSH_AUTH_SOCK
# }

export LIBGL_ALWAYS_SOFTWARE=1
export FONTCONFIG_PATH=/etc/fonts

# https://vim.fandom.com/wiki/Using_vim_as_a_man-page_viewer_under_Unix
# https://muru.dev/2015/08/28/vim-for-man.html
# ~/.vim/ftplugin/man.vim

# neovim is not stable and light-weight
! command -v /usr/bin/nvim > /dev/null 2>&1 || {
	  # export MANPAGER='/usr/bin/nvim --clean +Man!'
	  export MANPAGER='/usr/bin/nvim +Man!'
#
#     # Unterminated quoted string
#     # export MANPAGER="/bin/sh -c \"unset MANPAGER; col -b | vim -c 'set ft=man ts=4 nomod nolist nonu' -\""

# man: SYSERR: exec: : No such file or directory
#     export MANPAGER=$'
#     /bin/sh -c "
#     unset MANPAGER; col -b -x |
# nvim -R
# -c \'set ft=man ts=4 nomod nolist nonu\'
# -c \'nnoremap q :q<cr>\'
# -c \'nnoremap <space> <c-d>\'
# -c \'nnoremap , <c-d>\'
# -c \'nnoremap u <c-u>\'
# -c \'nnoremap <c-u> u\'
# -c \'nnoremap K :Man <c-r>=expand(\\\"<cword>\\\")<cr><cr>\'
# -c \'+Man! $*\'
# "
# '
	# Works
	# man() {
	#     unset MANPAGER
	#     col -b -x | \
	#     nvim --clean \
	#         -c 'filetype plugin on' \
	#         -c 'set ft=man ts=4 nomod nolist nonu' \
	#         -c 'nnoremap q :q<cr>' \
	#         -c 'nnoremap <space> <c-d>' \
	#         -c 'nnoremap , <c-d>' \
	#         -c 'nnoremap u <c-u>' \
	#         -c 'nnoremap <c-u> u' \
	#         -c 'nnoremap K :Man <c-r>=expand(\\\"<cword>\\\")<cr><cr>' \
	#         -c "Man $*"
	# }
}

export MANWIDTH=999


# https://superuser.com/questions/852914/reload-all-running-zsh-instances
TRAPUSR1() {
	case "$(printf %s "$-")" in
		*"i"*)
			# [ ! -o INTERACTIVE ] || {
			# {echo; echo execute a new shell instance } 1>&2
			exec "${SHELL}"
			# }
	esac
}

# export XKB_DEFAULT_LAYOUT=us,cn
export XKB_DEFAULT_LAYOUT=us
# export XKB_DEFAULT_VARIANT=us

# export XKB_DEFAULT_MODEL=pc105
export XKB_DEFAULT_MODEL=pc101

export XKB_DEFAULT_OPTIONS=grp:win_space_toggle


# vim/nvim init
export VINIT_HOME_DIR="${SHARE_PREFIX}/init/editor"

[ ! -d "${SHARE_PREFIX}/.void-packages" ] ||
export XBPS_DISTDIR="${SHARE_PREFIX}/.void-packages"


# https://github.com/caenrique/nvim-toggle-terminal
# _vi () {
#     NVIM=$(which nvim)
#     if test -z $NVIM_LISTEN_ADDRESS; then
#         $NVIM $@
#     else
#         # if test -z $@; then
#         if "$#" -eq "0"; then
#             nvr -l -c new
#         else
#             nvr -l $@
#         fi
#     fi
# }
# alias vi=_vi
export EDITOR=nvim

export INITRAMFS=/build/os/initramfs
export PIP_CERT=$HOME/.cert/python-cert.pem

[ -n "${WAYLAND_CONFIG_HOME:+x}" ] ||
WAYLAND_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}/wayland"
export WAYLAND_CONFIG_HOME
[ ! -f "${SHARE_PREFIX}/init/etc/chrome_dev.conf" ] || {
	set -a
	. "${SHARE_PREFIX}/init/etc/chrome_dev.conf"
	set +a
}

# set ts=4 sw=4 tw=0 noet :
