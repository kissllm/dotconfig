#!/usr/bin/env sh

# In busybox, $SHELL != $0
# [ "${SHELL}" != "${0}" ] && export SHELL=$0
# command -v "${SHELL}" > /dev/null 2>&1 || {
export SHELL=$(which ash)
# }
export _PATH_BSHELL=$(which ash)

# Set font when running in console. For hidpi screen
{ { [ "$TERM" = "linux" ] || [ "$TERM" = "vt102" ]; } && [ -z "$TMUX" ]; } && {
    tty_name="$(tty)"
    case $tty_name in
        *"tty"*)
            consolefonts_dir="$(find /usr/share -type d -name "consolefonts")"
            # terminus-font
            if [ -f "${consolefonts_dir}/ter-124b.psf.gz" ]; then
                setfont "${consolefonts_dir}/ter-124b.psf.gz"
            elif [ -f "/mnt/setfont/consolefonts/ter-124b.psf.gz" ]; then
                setfont /mnt/setfont/consolefonts/ter-124b.psf.gz
                # Use default font
            elif [ -f "${consolefonts_dir}/LatGrkCyr-12x22.psfu.gz" ]; then
                setfont "${consolefonts_dir}/LatGrkCyr-12x22.psfu.gz"
            fi
    esac
}

[ -z "$CC" ]  && CC=/usr/bin/clang
[ -z "$CXX" ] && CXX=/usr/bin/clang++

search_config=$(find /usr/include -type f -name "__config" -exec echo {} +)
HAS_LIBCXX=0
for file in $search_config ;
do [ -f "$file" ] && {
    key_word=$(printf "#include <$file>\nint main () { return 0;}" | $CC -E -stdlib=libc++ -x c++ -dM - | grep _LIBCPP_VERSION | awk '{print $2}');
    [ "$key_word" = "_LIBCPP_VERSION" ] && {
        export HAS_LIBCXX=1
        break
    }
}
done

# https://unix.stackexchange.com/questions/32041/checking-if-path-contains-home-mydir-and-adding-it-if-not-all-in-a-script
# https://tldp.org/LDP/abs/html/parameter-substitution.html
# "grep -q" "$? -eq 0" could be a good solution?
prepend () {
    CONTAINER_KEY="${1}"
    CONTAINER_VALUE="$(eval echo $"${1}")"
    PREPEND_VALUE="${2}"
    [ -n "${PREPEND_VALUE}" ] && [ -d "${PREPEND_VALUE}" ] && {
        # echo "prepend \$CONTAINER_KEY   = $CONTAINER_KEY"
        # echo "prepend \$CONTAINER_VALUE = $CONTAINER_VALUE"
        case ":$CONTAINER_VALUE:" in
            *":${PREPEND_VALUE}:"*) :;;
            *) eval "export $CONTAINER_KEY=${PREPEND_VALUE}\${$CONTAINER_KEY:+\":\$$CONTAINER_KEY\"}" ;;
        esac
    }
}
prepend PATH "/build/os"

# https://superuser.com/questions/39751/add-directory-to-path-if-its-not-already-there
# # prepend to PATH
# _path_prepend "$XDG_DATA_HOME/phpenv/bin"
#
# # prepend to MANPATH
# _path_prepend MANPATH "$XDG_DATA_HOME/shell-installer/man"
#
# # prepend to PERL5LIB
# _path_prepend PERL5LIB "$PERL_LOCAL_LIB_ROOT/lib/perl5"
#
# Features
#
#     POSIX compliant
#     Doesn't use Bash's declare -n

_path_prepend() {
    if [ -n "$2" ]; then
        case ":$(eval "echo \$$1"):" in
            *":$2:"*) :;;
            *) eval "export $1=$2\${$1:+\":\$$1\"}" ;;
        esac
    else
        case ":$PATH:" in
            *":$1:"*) :;;
            *) export PATH="$1${PATH:+":$PATH"}" ;;
        esac
    fi
}

_path_append() {
    if [ -n "$2" ]; then
        case ":$(eval "echo \$$1"):" in
            *":$2:"*) :;;
            *) eval "export $1=\${$1:+\"\$$1:\"}$2" ;;
        esac
    else
        case ":$PATH:" in
            *":$1:"*) :;;
            *) export PATH="${PATH:+"$PATH:"}$1" ;;
        esac
    fi
}

# https://unix.stackexchange.com/questions/4965/keep-duplicates-out-of-path-on-source
# define path_append and path_prepend to add directory paths, e.g. PATH, MANPATH
# add to end of path
path_append () {
    ! eval test -z "\"\${$1##*:$2:*}\"" -o -z "\"\${$1%%*:$2}\"" -o -z "\"\${$1##$2:*}\"" -o -z "\"\${$1##$2}\"" && {
        eval "$1=\$$1:$2"
    }
}

# add to front of path
path_prepend () {
    ! eval test -z "\"\${$1##*:$2:*}\"" -o -z "\"\${$1%%*:$2}\"" -o -z "\"\${$1##$2:*}\"" -o -z "\"\${$1##$2}\"" && {
        eval "$1=$2:\$$1"
    }
}
# path_prepend PATH $macPortsDir/sbin
# path_prepend MANPATH $macPortsDir/man


# NOTE: To enable 'ccache' add this to your
#       '.shellrc' or '.profile'.
#
# -> export PATH=/usr/lib/ccache/bin:$PATH
#
# NOTE: GCC is not supported out-of-the-box.
#       The following symlinks need to be created.
#
# -> ln -s /usr/bin/ccache /usr/lib/ccache/bin/gcc
# -> ln -s /usr/bin/ccache /usr/lib/ccache/bin/g++
path_prepend PATH "/usr/lib/ccache/bin"

# For chroot tools I put it there
path_prepend PATH "/mnt"

# share folder initialization
# if [ -d "/opt/init" ]; then
#     export SHARE_PREFIX="/opt"
# elif [ -d "/mnt/init" ]; then
if [ -d "/mnt/init" ]; then
    export SHARE_PREFIX="/mnt"
    path_prepend PATH "/mnt/init"
fi

path_prepend PATH "${SHARE_PREFIX}/local/bin"


export SRC_PREFIX="/working"
export BUILD_PREFIX="/build"

export HISTFILE="${HOME}/.ash_history"
export HISTSIZE="640000"
export SAVEHIST="${HISTSIZE}"

# export EDITOR="/usr/bin/nvim"
export TMP="$HOME/tmp"
export TEMP="$TMP"
export TMPDIR="$TMP"

# Locales!
export LANG="en_US.UTF-8"
export LC_COLLATE="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"
export LC_MESSAGES="en_US.UTF-8"
export LC_MONETARY="en_US.UTF-8"
export LC_NUMERIC="en_US.UTF-8"
export LC_TIME="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

export LESS="-RX"

[ ! -d "${TMP}" ] && mkdir "${TMP}"

if [ -f "/etc/hostname" ]; then
    export HOSTNAME=$(cat /etc/hostname)
else
    [ -f "/etc/os-release" ] && {
        export HOSTNAME=$(cat /etc/os-release | grep ^ID | sed 's/ID=//' | sed 's/"//g')
    }
fi


# https://stackoverflow.com/questions/229551/how-to-check-if-a-string-contains-a-substring-in-bash/229585#229585
path_prepend PATH "${HOME}/bin"
# https://firefox-source-docs.mozilla.org/setup/linux_build.html
# ${HOME}/.local
PYTHON_BASE="$(python3 -m site --user-base)"
# PYTHON_BASE_REFINED=$(echo "${PYTHON_BASE}" | sed 's#/#\\/#g' | sed 's#\.#\\.#g')
# [ "${PATH}" = "${PATH/${PYTHON_BASE_REFINED}\/bin/}" ] && [ -d "${PYTHON_BASE}/bin" ] && {
#     export PATH="${PYTHON_BASE}/bin:$PATH"
# }
path_prepend PATH "${PYTHON_BASE}/bin"
path_prepend PATH "${HOME}/.local/bin"
path_prepend PATH "${HOME}/.emacs.d/bin"

# For npm
path_prepend PATH "${HOME}/node/bin"

SHARE_PREFIX_REFINED=$(echo "${SHARE_PREFIX}" | sed 's#/#\\/#g' | sed 's#\.#\\.#g')

[ -d "${SHARE_PREFIX}/deno/bin" ] && {
    export DENO_INSTALL="${SHARE_PREFIX}/deno"
}
path_prepend PATH "${SHARE_PREFIX}/deno/bin"

[ -f "${HOME}/.cargo/env" ] && . "${HOME}/.cargo/env"
[ -f "${HOME}/.local/share/cargo/env" ] && . "${HOME}/.local/share/cargo/env"

export CARGO_HOME="$XDG_DATA_HOME"/cargo
[ ! -d "${CARGO_HOME}" ] && mkdir -p "${CARGO_HOME}"
path_prepend PATH "${HOME}/.cargo/bin"
path_prepend PATH "${HOME}/.local/share/cargo/bin"


# command -v /usr/bin/luarocks > /dev/null 2>&1 && {
#     [ ! -d "${HOME}/.cache/luarocks" ] && mkdir -p "${HOME}/.cache/luarocks"
#     # https://github.com/luarocks/luarocks/wiki/Using-LuaRocks
#     # eval $(luarocks path)
#     # eval "$(luarocks-5.1 path --bin)"
#     eval '$(/usr/bin/luarocks path --append --bin)'
#
#     # echo "double quote" "$(/usr/bin/luarocks path --append --bin)"
#     # echo 'single quote' '$(/usr/bin/luarocks path --append --bin)'
#
# }

export PATH=$(echo $PATH | sed "s/'//g")
# https://stackoverflow.com/questions/273909/how-do-i-manipulate-path-elements-in-shell-scripts
# https://unix.stackexchange.com/questions/40749/remove-duplicate-path-entries-with-awk-command/40973#40973
# export PATH=$(echo "${PATH}" | sed "s/:/\n/g" | uniq | tr "\n" ":" | sed 's|:$||')
# https://unix.stackexchange.com/questions/124444/how-can-i-cleanly-add-to-path
# export PATH=$(echo "${PATH}" | sed "s/:/\n/g" | uniq | tr "\n" ":" | sed -e's/:$/\n/')
export LUA_PATH=$(echo $LUA_PATH | sed "s/'//g")
# export LUA_PATH=$(echo "${LUA_PATH}" | sed "s/;/\n/g" | uniq | tr "\n" ":" | sed -e's/:$/\n/')
export LUA_CPATH=$(echo $LUA_CPATH | sed "s/'//g")
# export LUA_CPATH=$(echo "${LUA_CPATH}" | sed "s/;/\n/g" | uniq | tr "\n" ":" | sed -e's/:$/\n/')

# Colors.
red='\e[0;31m'
RED='\e[1;31m'
green='\e[0;32m'
GREEN='\e[1;32m'
yellow='\e[0;33m'
YELLOW='\e[1;33m'
blue='\e[0;34m'
BLUE='\e[1;34m'
purple='\e[0;35m'
PURPLE='\e[1;35m'
cyan='\e[0;36m'
CYAN='\e[1;36m'
NC='\e[0m'

# Aliases
alias cp="cp -iv"
alias rcp="rsync -v --progress"
alias rmv="rsync -v --progress --remove-source-files"
alias mv="mv -iv"
alias rm="rm -iv"
alias rmdir="rmdir -v"
alias ln="ln -v"
alias chmod="chmod -c"
alias chown="chown -c"
alias mkdir="mkdir -v"
# alias dotconfig="doas /usr/bin/git --git-dir=/home/dotconfig --work-tree=/home"

if command -v diff > /dev/null 2>&1; then
    alias diff="diff -Nuar"
elif command -v colordiff > /dev/null 2>&1; then
    alias diff="colordiff -Nuar"
fi

# https://andidittrich.com/2019/10/busybox-fancy-cli-color-prompt-ps1.html
# If not running interactively, don't do anything
[ -z "$PS1" ] && return
# set a fancy prompt (non-color, overwrite the one in /etc/profile)
if [ $(id -u) -eq 0 ]; then
    # root user
    # export PS1='\n\e[31m\e[1m\u@\h\e[0m \e[94m\w\n \e[31m\e[1m#\e[0m\e[0m\e[39m\e[49m '
    # export PS1='\e[31m\e[1m\u@\h\e[0m \e[94m\w\n \e[31m\e[1m#\e[0m\e[0m\e[39m\e[49m '
    # export PS1="[\e[1;31m\u\e[m@\e[1;24m${HOSTNAME}\e[m] [\$(date +%a\ %b\ %d,\ %H:%M:%S\ %Z\ %Y)]\n\e[0;39m[\w]\e[m \$ "
    export PS1="[\e[1;31m\u\e[m@\e[1;24m${HOSTNAME}\e[m] \e[0;39m[\w]\e[m [\$(date +%a\ %b\ %d,\ %H:%M:%S\ %Z\ %Y)]\n\$ "
    # export PS1="[\e[1;31m\u\e[m@\e[1;24m${HOSTNAME}\e[m] \e[0;39m[\w]\e[m \$ "
else
    # non root
    # export PS1='\n\e[92m\e[1m\u@\h\e[0m \e[94m\w\n \e[92m\e[1m$\e[0m\e[0m\e[39m\e[49m '
    # export PS1='\e[92m\e[1m\u@\h\e[0m \e[94m\w\n \e[92m\e[1m$\e[0m\e[0m\e[39m\e[49m '
    # export PS1="[\e[1;36m\u\e[m@\e[1;33m${HOSTNAME}\e[m] [\$(date +%a\ %b\ %d,\ %H:%M:%S\ %Z\ %Y)]\n\e[0;32m[\w]\e[m \$ "
    export PS1="[\e[1;36m\u\e[m@\e[1;33m${HOSTNAME}\e[m] \e[0;32m[\w]\e[m [\$(date +%a\ %b\ %d,\ %H:%M:%S\ %Z\ %Y)]\n\$ "
    # export PS1="[\e[1;36m\u\e[m@\e[1;33m${HOSTNAME}\e[m] \e[0;32m[\w]\e[m \$ "
fi

# # shortcuts
# alias la='ls $LS_OPTIONS -all -h'

# alias grep="grep --colour=auto"
# alias egrep="egrep --colour=auto"
# alias ls="ls --color=auto --human-readable --group-directories-first --classify"
alias ls="ls --color=auto -h --group-directories-first -F"
# alias ll="ls --color=auto --human-readable --group-directories-first --classify -l"
alias ll="ls --color=auto -h --group-directories-first -F -la"
alias la="ls --color=auto -h --group-directories-first -F -lathr"

# alias vim="/usr/bin/vim-huge"

alias nv="/usr/bin/nvim"

if [ -e "/usr/bin/vim-huge" ]; then
   alias vi="/usr/bin/vim-huge"
elif [ -e "/usr/bin/vim" ]; then
   alias vi="/usr/bin/vim"
fi
# This is nvi on current system
# alias vi="/usr/bin/vi"

# Use hostname in TMUX_TMPDIR as $HOME may be on nfs.
# export TMUX_TMPDIR="${TMPDIR}/tmux-${HOST}-${UID}"
export TMUX_TMPDIR="${TMPDIR}/tmux-${HOSTNAME}-$(id -u)"
# export TMUX_TMPDIR="${TMPDIR}-${HOSTNAME}"
# export TMUX_TMPDIR="${TMPDIR}"
# if [ ! -d "${TMUX_TMPDIR}" ]; then command mkdir -p "${TMUX_TMPDIR}"; fi
# If tmux boot operation failed, run: rm -rf $HOME/tmp/tmux-*
alias tmux='[ ! -d "${TMUX_TMPDIR}" ] && \mkdir -p "${TMUX_TMPDIR}"; TMUX_TMPDIR="${TMUX_TMPDIR}" \tmux -2 2>&1 '
# alias tmux="tmux -2"

alias history="history 1 -1"

# https://stackoverflow.com/questions/3701809/how-to-detect-using-of-wildcard-asterisk-as-parameter-for-shell-script
glob_stop() {
    [ "$2" = "*" ] && {
        echo "You can not use a wildcard"
        return
    }
    set +f
    "$@";
}
alias q="set -f; glob_stop /mnt/local/bin/q"

export INPUT_METHOD=fcitx
export GTK_IM_MODULE=fcitx    # export GTK_IM_MODULE=wayland
export QT_IM_MODULE=fcitx
export QT4_IM_MODULE=fcitx
export XMODIFIERS="@im=fcitx"
export XIM_SERVERS=fcitx

export QT_QPA_PLATFORMTHEME=qt5ct
export QT_PLATFORM_PLUGIN=qt5ct
export QT_PLATFORMTHEME=qt5ct
export QT_WAYLAND_DISABLE_WINDOWDECORATION="1"
# export QT_WAYLAND_FORCE_DPI=physical
export QT_WAYLAND_FORCE_DPI=0

export QT_AUTO_SCREEN_SCALE_FACTOR=0
export QT_SCALE_FACTOR=1

# GDK_SCALE allows only Integer values, GDK_DPI_SCALE=x allows decimal values such as . GDK_DPI_SCALE=0.66
# export GDK_SCALE=0
export GDK_SCALE=2.0
# export GDK_DPI_SCALE=0
export GDK_DPI_SCALE=0.75


# https://forum.obarun.org/viewtopic.php?id=855
# export DBUS_SESSION_ADDRESS=unix:path=/run/usr/${UID}/bus
export DBUS_SESSION_ADDRESS=unix:path=/run/usr/$(id -u)/bus
# export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/${UID}/bus
export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus
export KWIN_DRM_USE_EGL_STREAMS=1

[ $TERM == xterm ] && export TERM=xterm-256color

# # [Running ncurses program that uses funky glyphs in alacritty freezes sway](https://github.com/swaywm/sway/issues/5417)
export WLR_DRM_NO_ATOMIC=1
export WLR_DRM_NO_MODIFIERS=1

# XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
export XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}

# export QT_STYLE_OVERRIDE=gtkexport
export QT_STYLE_OVERRIDE=qt5ct-style
# export QT_GRAPHICSSYSTEM=native
# export QT_GRAPHICSSYSTEM=native
# export QT_GRAPHICSSYSTEM=raster
export QT_GRAPHICSSYSTEM=opengl
export QT_WAYLAND_DISABLE_WINDOWDECORATION=1
export QT_SCREEN_SCALE_FACTORS=1
# https://doc.qt.io/qt-6/qtwaylandcompositor-index.html
export QT_QPA_PLATFORMTHEME=qt5ct
export QT_SCALE_FACTOR=0
# True or False
# export QT_AUTO_SCREEN_SCALE_FACTOR=1
export QT_AUTO_SCREEN_SCALE_FACTOR=0
export QT_WAYLAND_FORCE_DPI=0
# https://docs.voidlinux.org/config/graphical-session/wayland.html
# https://news.ycombinator.com/item?id=24236003
export MOZ_ENABLE_WAYLAND=1
export MOZ_WEBRENDER=1
export MOZ_USE_XINPUT2=1
export MOZ_DBUS_REMOTE=1

# https://discourse.ubuntu.com/t/environment-variables-for-wayland-hackers/12750
# https://unix.stackexchange.com/questions/330366/how-can-i-run-a-graphical-application-in-a-container-under-wayland
# https://stackoverflow.com/questions/41736528/linux-wayland-display-multiple-user
# XDG_RUNTIME_DIR defined in /etc/profile.d/xdg_runtime_dir.sh
[ ! -f "$HOME/.wayland_display" ] && touch "$HOME/.wayland_display"
if [ -n "${WAYLAND_DISPLAY}" ] && [ -z "$(cat $HOME/.wayland_display)" ]; then
    # echo "WAYLAND_DISPLAY=${WAYLAND_DISPLAY}"
    echo "${WAYLAND_DISPLAY}" > $HOME/.wayland_display
elif [ -n "$(cat $HOME/.wayland_display)" ] && [ -z "${WAYLAND_DISPLAY}" ]; then
    export WAYLAND_DISPLAY="$(cat $HOME/.wayland_display)"
fi

export XDG_SCREENSHOTS_DIR=$HOME/pictures/screenshots
export XDG_PICTURES_DIR=$HOME/pictures/screenshots

# # https://voidlinux.miraheze.org/wiki/GNOME/Keyring_-
# if [ -n "$DESKTOP_SESSION" ];then
#     eval $(gnome-keyring-daemon --start)
#     export SSH_AUTH_SOCK
# fi

export LIBGL_ALWAYS_SOFTWARE=1
export FONTCONFIG_PATH=/etc/fonts

# https://vim.fandom.com/wiki/Using_vim_as_a_man-page_viewer_under_Unix
# https://muru.dev/2015/08/28/vim-for-man.html
# ~/.vim/ftplugin/man.vim
export MANPAGER='/usr/bin/nvim --clean +Man!'
export MANWIDTH=999

# https://superuser.com/questions/852914/reload-all-running-zsh-instances
TRAPUSR1() {
    [ -o INTERACTIVE ] && {
        # {echo; echo execute a new shell instance } 1>&2
        exec "${SHELL}"
    }
}

# export XKB_DEFAULT_LAYOUT=us,cn
export XKB_DEFAULT_LAYOUT=us
# export XKB_DEFAULT_VARIANT=us

# export XKB_DEFAULT_MODEL=pc105
export XKB_DEFAULT_MODEL=pc101

export XKB_DEFAULT_OPTIONS=grp:win_space_toggle


# vinit
export VINIT_HOME_DIR="${SHARE_PREFIX}/vinit"
# tinit
export TINIT_HOME_DIR="${SHARE_PREFIX}/tinit"
export TMUX_PLUGIN_MANAGER_PATH=${TINIT_HOME_DIR}/tmux/plugins
# export TMUX_DIR=$HOME/.tmux
export TMUX_DIR=${SHARE_PREFIX}/tinit/tmux

[ -d "${SHARE_PREFIX}/.void-packages" ] && export XBPS_DISTDIR="${SHARE_PREFIX}/.void-packages"

. "${SHARE_PREFIX}/init/share"


# https://github.com/caenrique/nvim-toggle-terminal
_v () {
    NVIM=`which nvim`
    if test -z $NVIM_LISTEN_ADDRESS; then
        $NVIM $@
    else
        if test -z $@; then
            nvr -l -c new
        else
            nvr -l $@
        fi
    fi
}
alias v=_v
export EDITOR=v

export INITRAMFS=/build/os/initramfs

# [ -z "$TMUX" ] && [ ! $(id -u) -eq 0 ] && ! ( [ -z $DISPLAY ] && [ $tty_num = "1" ] )  && exec tmux new -As .

# set ts=4 sw=4 tw=0 et :
