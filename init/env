#! /bin/sh
# set -x
# Definition sequence
# doas.conf->share->/etc/profile->login shell->.profile->.ashrc->env

script_scope=${SCRIPT_SCOPE:-${SCRIPT_NAME:-"$0"}}
SCRIPT_SCOPE="${SCRIPT_NAME:-"$0"}"

type "script_name" > /dev/null 2>&1 ||
	# shellcheck source=/usr/include/kiss/name
	. "${MNGR_ROOT-}/usr/include/kiss/name"
SCRIPT_NAME="$(script_name)"

# enable colors:
force_color_prompt=yes

type "delegate" > /dev/null 2>&1 && [ ! -z "${FUNC+x}" ] ||
	# shellcheck source=/usr/include/kiss/func
	. "${MNGR_ROOT-}/usr/include/kiss/func"

script_name="$(script_name)"
[ "$SCRIPT_NAME" = "$script_name" ] || SCRIPT_NAME="$script_name"
# unset script_name

env_reset DOT_CONFIG "$(dot_config)"

# Should be inside ${MNGR_ROOT-}
# [ ! -f "$DOT_CONFIG/toolchain/env" ] || {
# 	. "$DOT_CONFIG/toolchain/env"
#
# 	script_name="$(script_name)"
# 	[ "$SCRIPT_NAME" = "$script_name" ] || SCRIPT_NAME="$script_name"
# 	# unset script_name
# }

# user="$(id -nu)"
# [ "$USER" = "$user" ] || USER="$user" && export USER
env_reset LOGNAME "$(id -nu)"

path_prepend PATH "$DOT_CONFIG"

# echo "\$TERM = $TERM"
#
set_font() {
	local font_size="$1"
# Set font when running in console. For hidpi screen
# If you want to change font in tmux, just detach it and attach again
	# { [ "$TERM" = "linux" ] || [ -z "${TERM##*"vt"*}" ]; } || return 0
	# [ -z "${TMUX+x}" ] || return 0
	# case "$(tty)" in
	case "${TTY:="$(tty)"}" in
		*"tty"*)
			# This case doesn't mean it is realy a tty, jist can run setfont on it
			# Bright(and fat face)  Normal
			# ter-v${font_size}b.psf.gz       ter-v${font_size}n.psf.gz
			font=
			# terminus-font
			if [ -f "/mnt/setfont/ter-v${font_size}n.psf.gz" ]; then
				font="/mnt/setfont/ter-v${font_size}n.psf.gz"
			elif [ -f "/mnt/setfont/consolefonts/ter-v${font_size}n.psf.gz" ]; then
				font="/mnt/setfont/consolefonts/ter-v${font_size}n.psf.gz"
			else
				fonts_dir="$(find /mnt/setfont -type d -name \
					"consolefonts" 2> /dev/null)"
				[ -n "${fonts_dir:+x}" ] ||
				# Might be permission denied
				fonts_dir="$(find /usr/share -type d -name \
					"consolefonts" 2> /dev/null)"
				# fonts_dir="/usr/share/consolefonts"
				# fonts_dir="/usr/share/kdb/consolefonts"

				[ -n "${fonts_dir:+x}" ] || return 0
				if  [ -f "$fonts_dir/ter-v${font_size}n.psf.gz" ]; then
					font="$fonts_dir/ter-v${font_size}n.psf.gz"
					# font="${fonts_dir}/ter-v28b.psf.gz"
					# Use default font
				elif [ -f "$fonts_dir/LatGrkCyr-12x22.psfu.gz" ]; then
					font="$fonts_dir/LatGrkCyr-12x22.psfu.gz"
				fi
			fi
			[ -z "${font:+x}" ] || {
				setfont "$font" ||
				printf 'Font %s setting failed\n' "$font"
			}
		#     ;;
		# *"not"*|*"Not"*)
		# *)
		#     printf '%s\n' "Not a tty" ;;
	esac
}

{ [ "$TERM" != "linux" ] && [ -n "${TERM##*"vt"*}" ]; } ||
[ -n "${TMUX+x}" ] || set_font 22

[ ! -d "/usr/share/easy-rsa" ] ||
path_prepend PATH "/usr/share/easy-rsa"
# path_prepend PATH "/build/os"

# path_prepend PATH $macPortsDir/sbin
# path_prepend MANPATH $macPortsDir/man


# NOTE: To enable 'ccache' add this to your
#       '.shellrc' or '.profile'.
#
# -> export PATH=/usr/lib/ccache/bin:$PATH
#
# NOTE: GCC is not supported out-of-the-box.
#       The following symlinks need to be created.
#
# -> ln -s /usr/bin/ccache /usr/lib/ccache/bin/gcc
# -> ln -s /usr/bin/ccache /usr/lib/ccache/bin/g++

path_prepend PATH "/usr/lib/ccache/bin"

# # For chroot tools I put it there
# path_prepend PATH "/mnt"

path_prepend PATH "/mnt/local/bin"

export SRC_PREFIX="/working"
export BUILD_PREFIX="/build"

export HISTFILE="${HOME}/.ash_history"
export HISTSIZE="640000"
export SAVEHIST="${HISTSIZE}"

# export EDITOR="/usr/bin/nvim"
export    TMP="$HOME/tmp"
export   TEMP="$TMP"
export TMPDIR="$TMP"

# Locales!
export        LANG="en_US.UTF-8"
export  LC_COLLATE="en_US.UTF-8"
export    LC_CTYPE="en_US.UTF-8"
export LC_MESSAGES="en_US.UTF-8"
export LC_MONETARY="en_US.UTF-8"
export  LC_NUMERIC="en_US.UTF-8"
export     LC_TIME="en_US.UTF-8"
export      LC_ALL="en_US.UTF-8"

export LESS="${LESS-} -RX"

[ -d "${TMP}" ] || mkdir "${TMP}"

if [ -f "/etc/hostname" ]; then
	export HOSTNAME=$(cat /etc/hostname)
else
	[ ! -f "/etc/os-release" ] ||
		export HOSTNAME=$(cat /etc/os-release | grep ^ID | sed 's/ID=//' | sed 's/"//g')
fi


# https://stackoverflow.com/questions/229551/how-to-check-if-a-string-contains-a-substring-in-bash/229585#229585
path_prepend PATH "${HOME}/bin"
# https://firefox-source-docs.mozilla.org/setup/linux_build.html
# ${HOME}/.local
PYTHON_BASE="$(python3 -m site --user-base)"
PYTHON_BASE_REFINED="$(echo "${PYTHON_BASE}" | sed 's#/#\\/#g' | sed 's#\.#\\.#g')"
path_prepend PATH "${PYTHON_BASE}/bin"
[ ! -d "${PYTHON_BASE_REFINED}/bin" ] ||
path_prepend PATH "${PYTHON_BASE_REFINED}/bin"
path_prepend PATH "${HOME}/.local/bin"
path_prepend PATH "${HOME}/.emacs.d/bin"

# For npm
path_prepend PATH "${HOME}/node/bin"

SHARE_PREFIX_REFINED=$(echo "$DOT_CONFIG" | sed 's#/#\\/#g' | sed 's#\.#\\.#g')

[ ! -d "/mnt/deno/bin" ] || {
	export DENO_INSTALL="/mnt/deno"
	path_prepend PATH "/mnt/deno/bin"
}

export RUSTFLAGS="-Clink-arg=-Wl,--dynamic-linker=/usr/lib/libc.so"

[ "$(id -u)" -ne "0" ] || {
	[ ! -f "${HOME}/.cargo/env" ] || . "${HOME}/.cargo/env"
	[ ! -f "${HOME}/.local/share/cargo/env" ] ||
	. "${HOME}/.local/share/cargo/env"

	export CARGO_HOME="$XDG_DATA_HOME"/cargo
	[ -d "${CARGO_HOME}" ] || \mkdir -p "${CARGO_HOME}"

	[ ! -d  "${HOME}/.cargo/bin" ] ||
	path_prepend PATH "${HOME}/.cargo/bin"
	[ ! -d "${HOME}/.local/share/cargo/bin" ] ||
	path_prepend PATH "${HOME}/.local/share/cargo/bin"
}

# luarocks sucks when on a system with gcc
[ -z "${LUAROCKS_DEFINED_LUA+x}" ] ||
! command -v /usr/bin/luarocks > /dev/null 2>&1 || {
	[ -d "${HOME}/.cache/luarocks" ] || mkdir -p "${HOME}/.cache/luarocks"
	# https://github.com/luarocks/luarocks/wiki/Using-LuaRocks
	# / $(luarocks path)
	# / "$(luarocks-5.1 path --bin)"
	/ '$(/usr/bin/luarocks path --append --bin)'

	# echo "double quote" "$(/usr/bin/luarocks path --append --bin)"
	# echo 'single quote' '$(/usr/bin/luarocks path --append --bin)'

	export PATH=$(echo $PATH | sed "s/'//g")
	# https://stackoverflow.com/questions/273909/how-do-i-manipulate-path-elements-in-shell-scripts
	# https://unix.stackexchange.com/questions/40749/remove-duplicate-path-entries-with-awk-command/40973#40973
	# export PATH=$(echo "${PATH}" | sed "s/:/\n/g" | uniq | tr "\n" ":" | sed 's|:$||')
	# https://unix.stackexchange.com/questions/124444/how-can-i-cleanly-add-to-path
	# export PATH=$(echo "${PATH}" | sed "s/:/\n/g" | uniq | tr "\n" ":" | sed -e's/:$/\n/')
	export LUA_PATH=$(echo $LUA_PATH | sed "s/'//g")
	# export LUA_PATH=$(echo "${LUA_PATH}" | sed "s/;/\n/g" | uniq | tr "\n" ":" | sed -e's/:$/\n/')
	export LUA_CPATH=$(echo $LUA_CPATH | sed "s/'//g")
	# export LUA_CPATH=$(echo "${LUA_CPATH}" | sed "s/;/\n/g" | uniq | tr "\n" ":" | sed -e's/:$/\n/')

}

path_prepend PATH "$HOME/.local/share/nvim/mason/bin"
# Without this, source functions will not work

# : "${USE_ENV=}"
# [ -z "${USE_ENV+x}" ] || {
#
# Turn the default shell into a kiss debugging environment
# It's hard to make "env" to work with it
# Neither the log folder nor the pipes are created at this moment.
# So don't use the log functions until user_output and pipes/listeners are ready

# [ "$KISS_TMPDIR" = "/tmp/$LOGNAME/kiss" ] || KISS_TMPDIR="/tmp/$LOGNAME/kiss" && export KISS_TMPDIR
  : ${KISS_TMPDIR:="/tmp/$SESSION_USER/kiss"}           && export KISS_TMPDIR
  : ${LOG_DIR:="$KISS_TMPDIR/logs/${TTY##*/}"}          && export LOG_DIR
  : ${ERRO_OUTPUT:="$LOG_DIR/erro.log"}                 && export ERRO_OUTPUT
# env_reset ERRO_OUTPUT  "$LOG_DIR/erro.log"
  : ${INIT_OUTPUT:="$LOG_DIR/init.log"}                 && export INIT_OUTPUT
# env_reset INIT_OUTPUT  "$LOG_DIR/init.log"
  : ${USER_OUTPUT:="$LOG_DIR/make.log"}                 && export USER_OUTPUT
  : ${PIPE_OUTPUT:="$LOG_DIR/pipe.log"}                 && export PIPE_OUTPUT
# env_reset USER_OUTPUT  "$LOG_DIR/make.log"
# [ "$CACHE_ROOT" = "/tmp" ] || CACHE_ROOT="/tmp"       && export  CACHE_ROOT
# env_reset CACHE_ROOT "/dev/shm"
[ ! -z "${MNGR_ROOT:+x}" ] ||
env_reset MNGR_ROOT    "/mnt/os/kiss"
# : "${DEBUG_AT_BACKGROUND=}"
# [ -d "$KISS_TMPDIR" ] || mkdir -p "$KISS_TMPDIR"
# log_dir="$KISS_TMPDIR/logs"
# [ -d "$log_dir" ] || mkdir -p "$log_dir"
# : "${USER_OUTPUT:="$LOG_DIR/make.log"}" && export USER_OUTPUT
# # [ -z "${USE_SAY_PIPE+x}" ] || unset USE_SAY_PIPE
# [ -z "${INNER_PIPE_ID+x}" ] || unset INNER_PIPE_ID
# [ -z "${mute_err+x}" ] || unset mute_err
# [ -z "${KEEP_DEPRECATED+x}" ] || unset KEEP_DEPRECATED
# # [ -n "${HEADER+x}" ] ||
# [ ! -f "/usr/include/kiss-share" ] ||
# . /usr/include/kiss-share > /dev/null 2>&1
# # exec 1023>&2
# exec 2>"$ERRO_OUTPUT"
# . /working/test/shell/subshell
# # alias kiss='. /usr/bin/kiss'
# kiss() { (. /usr/bin/kiss "$@"); }
# kiss() { ENV=/usr/include/kiss-share $SHELL; }
env_reset SHELL_OPTIONS $(printf '%s' $-)
export USE_SAY_PIPE=
export KISS_AS_LIBRARY=

# kiss() { ENV=/usr/bin/kiss $SHELL -l; }
[ -z "${KISS_AS_LIBRARY+x}" ] || {
	# [ "$(awk '$5=="/" {print $1}' < /proc/1/mountinfo)" \
	#   != "$(awk '$5=="/" {print $1}' < /proc/$$/mountinfo)" ] &&

	# is_chrooted &&
	#
	# kiss() { ENV=/usr/bin/kiss $SHELL -$-; } ||

	# alias kiss=' KISS_AS_LIBRARY= SHELL_OPTIONS=$-i ENV=/usr/bin/kiss $SHELL -$-i "$@" ' ||

	# alias kiss=' (kiss-kill "$@" && clear && reset) || :; KISS_AS_LIBRARY= SHELL_OPTIONS=$-i ENV=/usr/bin/kiss $SHELL -$-i "$@" '
	  alias kiss=' KISS_AS_LIBRARY= SHELL_OPTIONS=$-i ENV=/usr/bin/kiss $SHELL -$-si "$@" '
	# alias kiss=' KISS_AS_LIBRARY= SHELL_OPTIONS=$-i ENV=/usr/bin/kiss $SHELL -$-l "$@" '

	# kiss() { ENV=/usr/bin/kiss $SHELL -$-l; }

	# alias kiss=' SHELL_OPTIONS=$- ENV=/usr/bin/kiss $SHELL -$-l "$@" '

	# alias kiss=' KISS_AS_LIBRARY= SHELL_OPTIONS=$-i ENV=/usr/bin/kiss $SHELL -$-li "$@" '
}
#
# alias kiss='copy "$CACHE_ROOT";
# path_prepend PATH $CACHE_ROOT/usr/bin;
# command -v $CACHE_ROOT/usr/bin/kiss > /dev/null 2>&1 &&
#   unalias kiss &&
#   alias kiss='$CACHE_ROOT/usr/bin/kiss' &&
#   kiss "$@" ||
#   printf %s\\n "kiss is not loaded"'

# alias kiss='
# path_prepend PATH $MNGR_ROOT/usr/bin;
# command -v $MNGR_ROOT/usr/bin/kiss > /dev/null 2>&1 &&
#   unalias kiss &&
#   alias kiss='$MNGR_ROOT/usr/bin/kiss' &&
#   kiss "$@" ||
#   printf %s\\n "kiss is not loaded"'

# How to debug kiss
# SHELL_OPTIONS=x$- kiss p luajit
# Redefine kiss like this in command line:
# kiss() { ENV=/usr/bin/kiss $SHELL -x; }
# alias kiss=' ENV=/usr/bin/kiss $SHELL -x "$@" '
# Or,
# set -x
# kiss
# kiss-debug
# kiss-strace
# }

# Colors.
   red='\e[0;31m'
   RED='\e[1;31m'
 green='\e[0;32m'
 GREEN='\e[1;32m'
yellow='\e[0;33m'
YELLOW='\e[1;33m'
  blue='\e[0;34m'
  BLUE='\e[1;34m'
purple='\e[0;35m'
PURPLE='\e[1;35m'
  cyan='\e[0;36m'
  CYAN='\e[1;36m'
	   NC='\e[0m'

# if [ "$TERM" = "linux" ]; then
#    echo -en "\e]P0232323" #black
#    echo -en "\e]P82B2B2B" #darkgrey
#    echo -en "\e]P1D75F5F" #darkred
#    echo -en "\e]P9E33636" #red
#    echo -en "\e]P287AF5F" #darkgreen
#    echo -en "\e]PA98E34D" #green
#    echo -en "\e]P3D7AF87" #brown
#    echo -en "\e]PBFFD75F" #yellow
#    echo -en "\e]P48787AF" #darkblue
#    echo -en "\e]PC7373C9" #blue
#    echo -en "\e]P5BD53A5" #darkmagenta
#    echo -en "\e]PDD633B2" #magenta
#    echo -en "\e]P65FAFAF" #darkcyan
#    echo -en "\e]PE44C9C9" #cyan
#    echo -en "\e]P7E5E5E5" #lightgrey
#    echo -en "\e]PFFFFFFF" #white
#    clear #for background artifacting
# fi

# Aliases
alias cp='cp -iv'
alias rcp='rsync -v --progress'
alias rmv='rsync -v --progress --remove-source-files'
alias mv='mv -iv'
alias rm='rm -iv'
alias rmdir='rmdir -v'
alias ln='ln -v'
alias chmod='chmod -c'
alias chown='chown -c'
alias mkdir='mkdir -v'
# git config --global --replace-all core.pager '/usr/bin/less -R -F -X'
alias git='git -P'
# alias dotconfig='doas /usr/bin/git --git-dir=/home/dotconfig --work-tree=/home'

if command -v diff > /dev/null 2>&1; then
	alias diff='diff -Nuar'
elif command -v colordiff > /dev/null 2>&1; then
	alias diff='colordiff -Nuar'
fi


# # shortcuts
# alias la='ls $LS_OPTIONS -all -h'

# alias grep='grep --colour=auto'
# alias egrep='egrep --colour=auto'
# alias ls='ls --color=auto --human-readable --group-directories-first --classify'
[ -z "${IS_LINUX+x}" ] &&
alias ls='ls --color=always -h -F' ||
alias ls='ls --color=always -h --group-directories-first -F'

# "parm_index" needs to be removed from terminfo -L1 screen-256color (look into "$DOT_CONFIG/ashrc")
# [ ! -z "${TMUX+x}" ] && {
# # alias ll='ls --color=auto --human-readable --group-directories-first --classify -l'
#     case "$(type "ll" 2>/dev/null)" in *"alias"*) unalias ll ;; esac
#     # alias ll='sh -c "ls --color=auto -h --group-directories-first -F -la;
#     # tmux copy-mode; tmux send-keys -X -t #{pane_id} cancel"'
#     alias ll='sh -c "ls --color=auto -h --group-directories-first -F -la;
#     tmux copy-mode; tmux send-keys \#{pane_id} q"'
# } ||
[ -z "${IS_LINUX+x}" ] &&
alias ll='ls --color=always -h -F -la' ||
alias ll='ls --color=always -h --group-directories-first -F -la'

[ -z "${IS_LINUX+x}" ] &&
alias la='ls --color=always -h -F -lathr' ||
alias la='ls --color=always -h --group-directories-first -F -lathr'

_vim="$(which vim)"
_nvim="$(which nvim)"

alias   nv="[ ! -f "$HOME/.vim/"*".tmp" ] || rm -f "$HOME/.vim*.tmp"; $_nvim"
alias nivm="[ ! -f "$HOME/.vim/"*".tmp" ] || rm -f "$HOME/.vim*.tmp"; $_nvim"
alias nvim="[ ! -f "$HOME/.vim/"*".tmp" ] || rm -f "$HOME/.vim*.tmp"; $_nvim"

_vim_huge="$(which vim-huge 2> /dev/null || :)"
if [ -e "$_vim_huge" ]; then
   alias vim="[ ! -f "$HOME/.vim/"*".tmp" ] || rm -f "$HOME/.vim*.tmp"; $_vim_huge"
elif [ -e "$_vim" ]; then
   alias vim="[ ! -f "$HOME/.vim/"*".tmp" ] || rm -f "$HOME/.vim*.tmp"; $_vim"
fi
# This is nvi on current system. /usr/bin/vi is part of busybox
# alias vi="/usr/bin/vi"


# alias history='history 1 -1'

# https://stackoverflow.com/questions/3701809/how-to-detect-using-of-wildcard-asterisk-as-parameter-for-shell-script
glob_stop() {
	[ "$2" != "*" ] || {
		echo "You can not use a wildcard"
		return
	}
	set +f
	"$@";
}
alias q='set -f; glob_stop /mnt/local/bin/q'

export INPUT_METHOD=fcitx
export GTK_IM_MODULE=fcitx    # export GTK_IM_MODULE=wayland
export QT_IM_MODULE=fcitx
export QT4_IM_MODULE=fcitx
export XMODIFIERS="@im=fcitx"
export XIM_SERVERS=fcitx

export QT_QPA_PLATFORMTHEME=qt5ct
export QT_PLATFORM_PLUGIN=qt5ct
export QT_PLATFORMTHEME=qt5ct
export QT_WAYLAND_DISABLE_WINDOWDECORATION="1"
# export QT_WAYLAND_FORCE_DPI=physical
export QT_WAYLAND_FORCE_DPI=0

export QT_AUTO_SCREEN_SCALE_FACTOR=0
export QT_SCALE_FACTOR=1

[ "$UID" -ne "0" ] && {
	export GDK_SCALE=2.0
	export GDK_DPI_SCALE=0.75
} || {
	# GDK_SCALE allows only Integer values, GDK_DPI_SCALE=x allows decimal values such as . GDK_DPI_SCALE=0.66
	# export GDK_SCALE=0
	export GDK_SCALE=2.0
	export GDK_DPI_SCALE=2.0
	# export GDK_DPI_SCALE=0.75
}

# https://forum.obarun.org/viewtopic.php?id=855
# [ "${DBUS_SESSION_ADDRESS-}" = "unix:path=$XDG_RUNTIME_DIR/bus" ] ||
# export DBUS_SESSION_ADDRESS=unix:path=/run/usr/${UID}/bus
# : ${DBUS_SESSION_ADDRESS:="unix:path=$XDG_RUNTIME_DIR/bus"} &&
#   export DBUS_SESSION_ADDRESS
env_reset DBUS_SESSION_ADDRESS "unix:path=$XDG_RUNTIME_DIR/bus"

# [ "$DBUS_SESSION_BUS_ADDRESS" = "unix:path=$XDG_RUNTIME_DIR/bus" ] ||
	# export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/${UID}/bus
# : ${DBUS_SESSION_BUS_ADDRESS="unix:path=$XDG_RUNTIME_DIR/bus"} &&
#   export DBUS_SESSION_BUS_ADDRESS
env_reset DBUS_SESSION_BUS_ADDRESS "unix:path=$XDG_RUNTIME_DIR/bus"

export KWIN_DRM_USE_EGL_STREAMS=1

[ "$TERM" != "xterm" ] || export TERM=xterm-256color

# # [Running ncurses program that uses funky glyphs in alacritty freezes sway](https://github.com/swaywm/sway/issues/5417)
export WLR_DRM_NO_ATOMIC=1
export WLR_DRM_NO_MODIFIERS=1

# XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
# export XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}

# export QT_STYLE_OVERRIDE=gtkexport

# export QT_STYLE_OVERRIDE=qt5ct-style

# export QT_GRAPHICSSYSTEM=native
# export QT_GRAPHICSSYSTEM=native
# export QT_GRAPHICSSYSTEM=raster
export QT_GRAPHICSSYSTEM=opengl
export QT_WAYLAND_DISABLE_WINDOWDECORATION=1
export QT_SCREEN_SCALE_FACTORS=1
# https://doc.qt.io/qt-6/qtwaylandcompositor-index.html
export QT_QPA_PLATFORMTHEME=qt5ct
export QT_SCALE_FACTOR=0
# True or False
# export QT_AUTO_SCREEN_SCALE_FACTOR=1
export QT_AUTO_SCREEN_SCALE_FACTOR=0
export QT_WAYLAND_FORCE_DPI=0
# https://docs.voidlinux.org/config/graphical-session/wayland.html
# https://news.ycombinator.com/item?id=24236003
export MOZ_ENABLE_WAYLAND=1
export MOZ_WEBRENDER=1
export MOZ_USE_XINPUT2=1
export MOZ_DBUS_REMOTE=1

export XDG_SCREENSHOTS_DIR=$HOME/pictures/screenshots
export XDG_PICTURES_DIR=$HOME/pictures/screenshots

# # https://voidlinux.miraheze.org/wiki/GNOME/Keyring_-
# [ -z "${DESKTOP_SESSION:+x}" ] || {
#     / $(gnome-keyring-daemon --start)
#     export SSH_AUTH_SOCK
# }

export LIBGL_ALWAYS_SOFTWARE=1
export FONTCONFIG_PATH=/etc/fonts

# https://vim.fandom.com/wiki/Using_vim_as_a_man-page_viewer_under_Unix
# https://muru.dev/2015/08/28/vim-for-man.html
# ~/.vim/ftplugin/man.vim

_busybox="$(which busybox)"
[ -z "${_busybox:+x}" ] || {
	# export _busybox;
	alias vi="$_busybox vi"
}
[ ! -z "${_busybox:+x}" ] || {
	_nvi="$(which nvi)"
	[ -z "${_nvi:+x}" ] || { export _nvi; alias vi="$_nvi"; }
}

export MANPAGER='nvim +Man!'

[ ! -z "${manpager:+x}" ] ||
! command -v vi  > /dev/null 2>&1      || export manpager="vi"
[ ! -z "${manpager:+x}" ] ||
! command -v "$_vim"  > /dev/null 2>&1 || export manpager="vim"
# neovim is not stable and light-weight
[ ! -z "${manpager:+x}" ] ||
! command -v "$_nvim" > /dev/null 2>&1 || export manpager="nvim"
case "$manpager" in
	# "vim")
	#   export MANPAGER="/bin/sh -c \"col -b | vim -c 'set ft=man ts=4 nomod nolist nonu noma' -\""
	#   ;;
	"vim"|"nvim")
		# export MANPAGER='/usr/bin/nvim --clean +Man!'
		# export MANPAGER='/usr/bin/vim +Man!'
		#
		#     # Unterminated quoted string
		#     # export MANPAGER="/bin/sh -c \"unset MANPAGER; col -b | vim -c 'set ft=man ts=4 nomod nolist nonu noma' -\""

		# man: SYSERR: exec: : No such file or directory
		#     export MANPAGER=$'
		#     /bin/sh -c "
		#     unset MANPAGER; col -b -x |
		# nvim -R
		# -c \'set ft=man ts=4 nomod nolist nonu\'
		# -c \'nnoremap q :q<cr>\'
		# -c \'nnoremap <space> <c-d>\'
		# -c \'nnoremap , <c-d>\'
		# -c \'nnoremap u <c-u>\'
		# -c \'nnoremap <c-u> u\'
		# -c \'nnoremap K :Man <c-r>=expand(\\\"<cword>\\\")<cr><cr>\'
		# -c \'+Man! $*\'
		# "
		# '
		# Works for nvim
		man() {
			# unset MANPAGER
			col -b -x | \
				"$manpager" --clean \
				-c 'filetype plugin on' \
				-c 'set ft=man ts=4 nomod nolist nonu' \
				-c 'nnoremap q :q<cr>' \
				-c 'nnoremap <space> <c-d>' \
				-c 'nnoremap , <c-d>' \
				-c 'nnoremap u <c-u>' \
				-c 'nnoremap <c-u> u' \
				-c 'nnoremap K :Man <c-r>=expand(\\\"<cword>\\\")<cr><cr>' \
				-c "+Man! $*"
				# -c "Man $*"
			}
esac

export MANWIDTH=999


# https://superuser.com/questions/852914/reload-all-running-zsh-instances
TRAPUSR1() {
	case "$(printf %s "$-")" in
		*"i"*)
			# [ ! -o INTERACTIVE ] || {
			# {echo; echo execute a new shell instance } 1>&2
			exec "${SHELL}"
			# }
	esac
}

# export XKB_DEFAULT_LAYOUT=us,cn
export XKB_DEFAULT_LAYOUT=us
# export XKB_DEFAULT_VARIANT=us

# export XKB_DEFAULT_MODEL=pc105
export XKB_DEFAULT_MODEL=pc101

export XKB_DEFAULT_OPTIONS=grp:win_space_toggle


# vim/nvim init
export VINIT_HOME_DIR="$DOT_CONFIG/editor"

# [ ! -d "$DOT_CONFIG/.void-packages" ] ||
[ ! -d "${HOME}/.void-packages" ] ||
# export XBPS_DISTDIR="$DOT_CONFIG/.void-packages"
export XBPS_DISTDIR="${HOME}/.void-packages"


# https://github.com/caenrique/nvim-toggle-terminal
# _vi () {
#     NVIM=$(which nvim)
#     if test -z $NVIM_LISTEN_ADDRESS; then
#         $NVIM $@
#     else
#         # if test -z $@; then
#         if "$#" -eq "0"; then
#             nvr -l -c new
#         else
#             nvr -l $@
#         fi
#     fi
# }
# alias vi=_vi
# export EDITOR=nvim
# export EDITOR=vi
env_reset EDITOR vi

# export INITRAMFS=/build/os/initramfs
export PIP_CERT=$HOME/.cert/python-cert.pem

[ -n "${WAYLAND_CONFIG_HOME:+x}" ] ||
WAYLAND_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}/wayland"
export WAYLAND_CONFIG_HOME

# PRIVATE_PREFIX point to real users' private information
[ -z "${PRIVATE_PREFIX:+x}" ] ||
[ ! -f "$PRIVATE_PREFIX/etc/profile.d/chrome.conf" ] || {
	set -a
	. "$PRIVATE_PREFIX/etc/profile.d/chrome.conf"
	set +a
}

: ${WAYL_OUTPUT:="${WAYLAND_CONFIG_HOME}/.autolauncher.log"} && export WAYL_OUTPUT

wayland_display() {
	wl-info | grep WAYLAND_DISPLAY | awk -F = '{print $2}' | xargs
}

sway_socket() {
	local launcher="${1-}"
	[ -z "${launcher:+x}" ] ||
	print '$launcher' "$launcher [$LINENO : env]" | tee -a "$WAYL_OUTPUT" > /dev/null 2>&1
	# sock_id="$(ps -ef | grep "sway -d" | grep -v grep | \
	#   grep -v swc-launch | awk "{print \$1}" | tr -d " ")"
	# sock_id_list="$(ps -ef | grep "sway -d" | grep -v grep | \
	#   grep -v swc-launch | sort -rnk3 | awk "{print \$1}" | tr -d " ")"
	# # local index=0
	# for sock_id in $sock_id_list; do
	#    break
	# done
	# wl-info returns WAYLAND_DISPLAY
	# wl-info | grep WAYLAND | awk -F= -v OFS="=" '{gsub(/[[:blank:]]/, "", $NF); print $NF}'
	[ -z "${WAYLAND_DISPLAY+x}" ] || {
		print '$SHLVL' "$SHLVL" | tee -a "$WAYL_OUTPUT" > /dev/null 2>&1
		print '$WAYLAND_DISPLAY' "$WAYLAND_DISPLAY" | tee -a "$WAYL_OUTPUT" > /dev/null 2>&1
		export WAYLAND_DISPLAY
		printf '%s' "${WAYLAND_DISPLAY}" > $HOME/.wayland_display
		[ -d "/tmp/wayland" ] || \mkdir -p "/tmp/wayland"
		printf '%s' "${WAYLAND_DISPLAY}" > /tmp/wayland/.display
	}
	sock_id="$(for item in $( \
	ps -ef | grep "sway -d" | grep -v "grep" | awk "{print \$2}" 2> /dev/null)
	do
		[ -z "$(pstree -p "$item" | grep "$item" | grep "sway" 2> /dev/null)" ] &&
		continue || { printf '%s' "$item"; break; }
	done)"

	[ -n "${sock_id:+x}" ] || { printf '\n'; return 0; }
	# I3SOCK has the same value
	SWAY_SOCK="$XDG_RUNTIME_DIR/sway-ipc.$UID.$sock_id.sock"
	[ ! -S "$SWAY_SOCK" ] || {
		export SWAY_SOCK
		[ -d "/tmp/wayland" ] || mkdir -p "/tmp/wayland"
		printf '%s' "${SWAY_SOCK}" > /tmp/wayland/.socket

		print '$SWAY_SOCK' "$(cat "/tmp/wayland/.socket" 2> /dev/null)" | tee -a "$WAYL_OUTPUT" > /dev/null 2>&1
	}
	[ -z "${DISPLAY+x}" ] || unset DISPLAY
	# printf "$RS%s" "$SWAY_SOCK"
	printf '%s' "$SWAY_SOCK"
}

SCRIPT_NAME="$SCRIPT_SCOPE"
SCRIPT_SCOPE="$script_scope"

# set ts=4 sw=4 tw=0 noet :








