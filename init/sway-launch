#! /bin/sh
set -a

printf '%s %s\n' '$tty_num' "$tty_num [enter sway-launch]"

delegate() {
	[ "$1" != "--" ] || shift 1
	local value=
	# "$@" won't lose any empty arguments
	value="$("$@")" || { printf '\n'; exit 1; }
	# "$@" | tail -n 1
	# "$@" | awk 'END{print}'

	# Works
	# "$@" | awk 'BEGIN { RS = '\n' } END { print }'
	# printf '%s\n' "$value" | awk 'BEGIN { RS = '\n' } END { print }'
	printf '%s\n' "$(awk 'BEGIN { RS = "\n" } END { print; print "\n" }' << EOF || :
$value
EOF
)"
}

sway_socket() {
	local launcher="$1"
	printf '%s %s\n' '$launcher' "$launcher"
	# sock_id_list="$(ps -ef | grep "sway -d" | grep -v grep | \
	#   grep -v swc-launch | sort -rnk3 | awk "{print \$1}" | tr -d " ")"
	# # local index=0
	# for sock_id in $sock_id_list; do
	#    break
	# done

	sock_id="$(for item in $(
	ps -ef | grep "sway -d" | grep -v "grep" | awk "{print \$2}" 2> /dev/null)
	do
		[ -z "$(pstree -p "$item" | grep "$item" | grep "sway" 2> /dev/null)" ] &&
		continue || { printf '%s' "$item"; break; }
	done)"

	[ -n "${sock_id:+x}" ] || { printf '\n'; return 0; }

	SWAY_SOCK="$XDG_RUNTIME_DIR/sway-ipc.$UID.$sock_id.sock"
	[ ! -S "$SWAY_SOCK" ] || {
		export SWAY_SOCK
		[ -d "/tmp/wayland" ] || mkdir -p "/tmp/wayland"
		printf '%s' "${SWAY_SOCK}" > /tmp/wayland/.socket

		printf '%s %s\n' '$SWAY_SOCK' "$(cat "/tmp/wayland/.socket" 2> /dev/null)"
	}
	printf '\n%s' "$SWAY_SOCK"
}

# https://www.reddit.com/r/voidlinux/comments/mor7n5/getting_libseat_errors_when_starting_sway/
[ -n "${WAYLAND_CONFIG_HOME:+x}" ] ||
WAYLAND_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}/wayland"
export WAYLAND_CONFIG_HOME
[ -d "${WAYLAND_CONFIG_HOME}" ] || mkdir -p "$WAYLAND_CONFIG_HOME"

# "${SHARE_PREFIX}/init/share" has the file structure
# sway specific environment
[ ! -f "${WAYLAND_CONFIG_HOME}/env" ] || {
	set -a
	# shellcheck disable=SC1090
	. "${WAYLAND_CONFIG_HOME}/env"
	set +a
}

# Reference implementation:
# /usr/bin/sway -d > ${WAYLAND_CONFIG_HOME}/.autolauncher.log 2>&1
# exec /usr/bin/sway -d > ${WAYLAND_CONFIG_HOME}/.autolauncher.log 2>&1

# swc-launch is used in preference to dbus
launcher=$(which swc-launch 2> /dev/null || :)
printf '%s %s\n' '$launcher' "$launcher [$LINENO]"
{ [ ! -z "${launcher:+x}" ] ||
command -v "$launcher" > /dev/null 2>&1; } && {
	printf '%s %s\n' '$launcher' "$launcher [$LINENO]"
	# exec swc-launch -t /dev/tty7 -- /usr/bin/sway -d > ${WAYLAND_CONFIG_HOME}/.autolauncher.log 2>&1 &
	eval "nohup \"$launcher\" -t /dev/tty7 -- /usr/bin/sway -d \
		> ${WAYLAND_CONFIG_HOME}/.autolauncher.log 2>&1 &"
		# > ${WAYLAND_CONFIG_HOME}/.autolauncher.log && sway_socket "$launcher" 2>&1 &
		sock_sway="$(delegate -- sway_socket "$launcher")"
} || {
	launcher=$(which dbus-run-session 2> /dev/null || :)
	printf '%s %s\n' '$launcher' "$launcher [$LINENO]"
	[ -z "${launcher:+x}" ] ||
	command -v  "$launcher" > /dev/null 2>&1 && {
		# https://github.com/microsoft/WSL/issues/7915
		# doas killall dbus-daemon &&
	
		[ ! -z "$(id -u dbus 2> /dev/null)" ] || {
			command -v  "/usr/bin/adduser" > /dev/null 2>&1 && {
				doas addgroup -S dbus
				doas adduser -S -H -G dbus dbus
				[ ! -z "$(groups $USER | grep dbus)" ] || doas adduser -G dbus $USER
			} ||
			command -v  "/usr/bin/useradd" > /dev/null 2>&1 && {
				doas groupadd -r dbus
				doas useradd -r -M -G dbus dbus
				[ ! -z "$(groups $USER | grep dbus)" ] || doas useradd -G dbus $USER
			}
		}
		doas -u dbus dbus-daemon --session --address=$DBUS_SESSION_BUS_ADDRESS \
			--nofork --nopidfile --syslog-only &&
	
		# dbus-launch --sh-syntax --exit-with-session /usr/bin/sway -d > ${WAYLAND_CONFIG_HOME}/.autolauncher.log 2>&1
		# exec will not give sock_sway opportunities to run
		# exec  "$launcher" /usr/bin/sway -d \
		eval "nohup \"$launcher\" /usr/bin/sway -d |
			tee ${WAYLAND_CONFIG_HOME}/.autolauncher.log 2>&1 &"
			# > ${WAYLAND_CONFIG_HOME}/.autolauncher.log && sway_socket "$launcher" 2>&1 &
		# nohup dbus-run-session /usr/bin/sway -d > ${WAYLAND_CONFIG_HOME}/.autolauncher.log 2>&1 &
		sock_sway="$(delegate -- sway_socket "$launcher")"
	}
}

# [ -n "${sock_sway:+x}" ] || nohup river &

[ -z "${WAYLAND_DISPLAY+x}" ] || {
	printf '%s %s\n' '$SHLVL' "$SHLVL" >> ${WAYLAND_CONFIG_HOME}/.autolauncher.log 2>&1
	printf '%s %s\n' '$WAYLAND_DISPLAY' "$WAYLAND_DISPLAY" >> ${WAYLAND_CONFIG_HOME}/.autolauncher.log 2>&1
	export WAYLAND_DISPLAY
	printf '%s' "${WAYLAND_DISPLAY}" > $HOME/.wayland_display
	[ -d "/tmp/wayland" ] || \mkdir -p "/tmp/wayland"
	printf '%s' "${WAYLAND_DISPLAY}" > /tmp/wayland/.display

	sock_id="$(ps -ef | grep "sway -d" | grep -v grep | \
		grep -v swc-launch | awk "{print \$1}" | tr -d " ")"
	SWAY_SOCK="$XDG_RUNTIME_DIR/sway-ipc.$(id -u).$sock_id.sock"
	[ ! -S "$SWAY_SOCK" ] || {
		export SWAY_SOCK
		printf '%s' "${WAYLAND_DISPLAY}" > /tmp/wayland/.socket
	}

	[ -z "${DISPLAY+x}" ] || unset DISPLAY
	# DISPLAY=${WAYLAND_DISPLAY}
	# export DISPLAY
}
