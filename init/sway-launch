#! /bin/sh
set -a

script_scope=${SCRIPT_SCOPE:-${SCRIPT_NAME:-"$0"}}
SCRIPT_SCOPE="${SCRIPT_NAME:-"$0"}"

type "script_name" > /dev/null 2>&1 ||
	# shellcheck source=/usr/include/kiss/name
	. "${MNGR_ROOT-}/usr/include/kiss/name"
SCRIPT_NAME="$(script_name)"

print '$TTY_NUM' "$TTY_NUM [enter sway-launch]" >> "$WAYL_OUTPUT"

type "delegate" > /dev/null 2>&1 && [ ! -z "${FUNC+x}" ] ||
	# shellcheck source=/usr/include/kiss/func
	. "${MNGR_ROOT-}/usr/include/kiss/func"

	script_name="$(script_name)"
	[ "$SCRIPT_NAME" = "$script_name" ] || SCRIPT_NAME="$script_name"
	# unset script_name

env_reset DOT_CONFIG "$(dot_config)"

# alias /='eval'
# # bash does not recognize //
# alias //='lineno="$LINENO"'
#

# https://www.reddit.com/r/voidlinux/comments/mor7n5/getting_libseat_errors_when_starting_sway/
[ ! -z "${WAYLAND_CONFIG_HOME:+x}" ] ||
	{ : ${WAYLAND_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}/wayland"} && export WAYLAND_CONFIG_HOME; }
[ -d "$WAYLAND_CONFIG_HOME" ] || mkdir -p "$WAYLAND_CONFIG_HOME"

# "$DOT_CONFIG/share" has the file structure
# sway specific environment
[ ! -f "$WAYLAND_CONFIG_HOME/env" ] || {
	print "$WAYLAND_CONFIG_HOME/env" "sourced" >> "$WAYL_OUTPUT"
	set -a
	# shellcheck disable=SC1090
	. "$WAYLAND_CONFIG_HOME/env"
	set +a
}
	print '$SHLVL' "$SHLVL" | tee -a "$WAYL_OUTPUT" 2>&1

# [ ! -z "${sock_sway+x}" ] ||
# sock_sway=

[ -z "${DONT_USE_GREET+x}" ] && {
	[ ! -z "${launcher+x}" ] || launcher="greeter"
	insure_groups "dbus"
	insure_groups "_seatd"
	# [ ! -z "${IS_KISS+x}" ] ||
	insure_groups "_greeter"
} || {
	# Reference implementation:
	/usr/bin/sway -d > $WAYL_OUTPUT 2>&1
	# exec /usr/bin/sway -d > $WAYL_OUTPUT 2>&1
	sock_sway="$(sway_socket "$launcher")"
	[ ! -z "${sock_sway:+x}" ] || {
		launcher=$(which sway 2> /dev/null || :)
		print '$launcher' "$launcher [$LINENO : sway-launch]" >> "$WAYL_OUTPUT"
		[ -z "${launcher:+x}" ] ||
		command -v "$launcher" > /dev/null 2>&1 && {
			export launcher
			nohup "$launcher" -d \
				> $WAYL_OUTPUT 2>&1 & pid=$!
			wait $pid
			sock_sway="$(sway_socket "$launcher")"
		}
	}

	[ ! -z "${sock_sway:+x}" ] || {
		# swc-launch is used in preference to dbus
		launcher=$(which swc-launch 2> /dev/null || :)
		print '$launcher' "$launcher [$LINENO : sway-launch]" >> "$WAYL_OUTPUT"
		{ [ ! -z "${launcher:+x}" ] ||
		command -v "$launcher" > /dev/null 2>&1; } && {
			export launcher
			# printf '%s %s\n' '$launcher' "$launcher [$LINENO]"
			# exec swc-launch -t /dev/tty7 -- /usr/bin/sway -d > $WAYL_OUTPUT 2>&1 &
			# / "nohup \"$launcher\" -t /dev/tty7 -- /usr/bin/sway -d \
			# 	> $WAYL_OUTPUT 2>&1 &"
			nohup "$launcher" -t /dev/tty7 -- /usr/bin/sway -d \
				> $WAYL_OUTPUT 2>&1 & pid=$!
			wait $pid
			# > $WAYL_OUTPUT && sway_socket "$launcher" 2>&1 &
			sock_sway="$(sway_socket "$launcher")"
		}
	}

	# [ ! -z "${sock_sway:+x}" ] || {
	# 	launcher=$(which dbus-run-session 2> /dev/null || :)
	# 	print '$launcher' "$launcher [$LINENO : sway-launch]" >> "$WAYL_OUTPUT"
	# 	[ -z "${launcher:+x}" ] ||
	# 	command -v "$launcher" > /dev/null 2>&1 && {
	# 		export launcher
	# 		# https://github.com/microsoft/WSL/issues/7915
	# 		# doas killall dbus-daemon &&
	# 		#
	# 		# https://docs.voidlinux.org/config/graphical-session/graphics-drivers/intel.html
	# 		# https://www.reddit.com/r/voidlinux/comments/mc24te/starting_sway_problem/
	# 		# dbus-elogind/elogind/pam_rundir/mesa-dri
	# 		# [ ! -z "$(id -u dbus 2> /dev/null)" ] || {
	# 		insure_groups "dbus"
	# 		insure_groups "_seatd"
	# 		[ "$(\ls -dl "$XDG_RUNTIME_DIR" | awk '{print $3}')" = "dbus" ] ||
	# 			doas chown -R dbus:dbus "${XDG_RUNTIME_DIR}"
	# 		# }
	# 		doas -u dbus dbus-daemon --session --address=$DBUS_SESSION_BUS_ADDRESS \
	# 			--nofork --nopidfile --syslog-only &&
	# 		# dbus-launch --sh-syntax --exit-with-session /usr/bin/sway -d > $WAYL_OUTPUT 2>&1
	# 		# exec will not give sock_sway opportunities to run
	# 		# exec  "$launcher" /usr/bin/sway -d \
	# 		# / "nohup \"$launcher\" /usr/bin/sway -d |
	# 		# 	tee $WAYL_OUTPUT 2>&1 &"
	# 		nohup "$launcher" /usr/bin/sway -d \
	# 			> $WAYL_OUTPUT 2>&1 & pid=$!
	# 		wait $pid
	# 			# > $WAYL_OUTPUT && sway_socket "$launcher" 2>&1 &
	# 		# nohup dbus-run-session /usr/bin/sway -d > $WAYL_OUTPUT 2>&1 &
	# 		sock_sway="$(sway_socket "$launcher")"
	# 	}
	# }
}

# [ -n "${sock_sway:+x}" ] || nohup river &

[ -z "${WAYLAND_DISPLAY+x}" ] ||
[ ! -z "${sock_sway:+x}" ] ||
	sock_sway="$(sway_socket "$launcher")"

SCRIPT_NAME="$SCRIPT_SCOPE"
SCRIPT_SCOPE="$script_scope"







