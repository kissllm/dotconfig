
# remap prefix from 'C-b' to 'C-a'
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix


# set Zsh as your default Tmux shell
# set -g default-shell "/bin/zsh"
# set-option -g default-shell /bin/zsh
set-option -g default-shell "${SHELL}"

# https://github.com/tmux-plugins/tmux-resurrect/blob/master/docs/restoring_pane_contents.md
# Will load nothing if defined this
# set -g default-command "reattach-to-user-namespace -l $SHELL"
set -g default-command "${SHELL}"
# set -g default-command "/bin/zsh"
# set -g default-command "reattach-to-user-namespace -l zsh"
# # 1:1140/117:20
# # https://www.youtube.com/watch?v=5r6yzFEXajQ&t=660s



# set -g @plugin 'git@bitbucket.com:user/plugin'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'github_username/plugin_name'
# Other examples:

# smart pane switching with awareness of vim splits
# https://thoughtbot.com/blog/seamlessly-navigate-vim-and-tmux-splits
# # https://github.com/christoomey/vim-tmux-navigator
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/vim-tmux'
set -g @plugin 'tmux-plugins/vim-sidebar'
set -g @plugin 'tmux-plugins/tmux-pain-control'
set -g @plugin 'tmux-plugins/tmux-logging'
set -g @plugin 'tmux-plugins/vim-tmux-focus-events'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @plugin 'tmux-plugins/tmux-vim-exit'
# set -g @plugin 'ddelnano/tmux-vim-exit'
set -g @plugin 'run27017/tmux-vim-exit'
set -g @plugin 'roxma/vim-tmux-clipboard'
set -g @plugin 'tmux-plugins/tmux-copycat'

# List of plugins
# https://github.com/tmux-plugins/tpm
set -g @continuum-restore 'on'
set -g focus-events on
set -g @resurrect-capture-pane-contents 'on'
set -g @continuum-save-interval '0'
set-option -g @pane_resize "10"


set-window-option -g alternate-screen off
# https://github.com/tmux-plugins/tmux-resurrect/blob/master/docs/restoring_vim_and_neovim_sessions.md
set -g @resurrect-strategy-vim 'session'


set -g status-fg white
set -g status-bg colour240
# less colourful status
# https://medium.com/@findingedward/configuring-vim-and-tmux-to-boost-your-productivity-dab44ba7db11

set -g status-right '#{prefix_highlight} | %a %Y-%m-%d %H:%M'

bind - split-window -v -c "#{pane_current_path}"
bind | split-window -h -c "#{pane_current_path}"
unbind '"'
unbind %

# https://gist.github.com/MohamedAlaa/2961058
# reload config file (change file location to your the tmux.conf you want to use)
bind r source-file ~/.tmux.conf

# # switch panes using Alt-arrow without prefix
# bind -n M-Left select-pane -L
# bind -n M-Right select-pane -R
# bind -n M-Up select-pane -U
# bind -n M-Down select-pane -D
# 
# bind -n C-Left select-pane -L
# bind -n C-Right select-pane -R
# bind -n C-Up select-pane -U
# bind -n C-Down select-pane -D

# https://thoughtbot.com/blog/seamlessly-navigate-vim-and-tmux-splits
# smart pane switching with awareness of vim splits
# bind -n C-k  run "(tmux display-message -p '#{pane_current_command}' | grep -i vim && tmux send-keys C-k) || tmux select-pane -U"
# bind -n C-j  run "(tmux display-message -p '#{pane_current_command}' | grep -i vim && tmux send-keys C-j) || tmux select-pane -D"
# bind -n C-h  run "(tmux display-message -p '#{pane_current_command}' | grep -i vim && tmux send-keys C-h) || tmux select-pane -L"
# bind -n C-l  run "(tmux display-message -p '#{pane_current_command}' | grep -i vim && tmux send-keys C-l) || tmux select-pane -R"
# bind -n C-\\ run "(tmux display-message -p '#{pane_current_command}' | grep -i vim && tmux send-keys 'C-\\') || tmux select-pane -l"

bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -i '${EDITOR}' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -i '${EDITOR}' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -i '${EDITOR}' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -i '${EDITOR}' && tmux send-keys C-l) || tmux select-pane -R"
# C-\ will generate error: "Unkown key: C- run" -- use shell command t to reproduce it
# function t() { run_under_tmux rtorrent 'nice -n 19 ionice -c 3 rtorrent'; }
bind -n C-\\ run "(tmux display-message -p '#{pane_current_command}' | grep -i '${EDITOR}' && tmux send-keys 'C-\\') || tmux select-pane -l"

# bind -n 'C-k' run "(tmux display-message '#{pane_current_command}' |  grep -i vim && tmux send-keys C-k) || tmux select-pane -U"
# bind -n 'C-j' run "(tmux display-message '#{pane_current_command}' |  grep -i vim && tmux send-keys C-j) || tmux select-pane -D"
# bind -n 'C-h' run "(tmux display-message '#{pane_current_command}' |  grep -i vim && tmux send-keys C-h) || tmux select-pane -L"
# bind -n 'C-l' run "(tmux display-message '#{pane_current_command}' |  grep -i vim && tmux send-keys C-l) || tmux select-pane -R"
# bind -n 'C-\' run "(tmux display-message '#{pane_current_command}' |  grep -i vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# # https://gist.github.com/mislav/5189704
# bind -n C-k if "[ $(tmux display -p '#{pane_current_command}') = vim-huge ]" "send-keys C-w C-k" "select-pane -U"
# bind -n C-j if "[ $(tmux display -p '#{pane_current_command}') = vim-huge ]" "send-keys C-w C-j" "select-pane -D"
# bind -n C-h if "[ $(tmux display -p '#{pane_current_command}') = vim-huge ]" "send-keys C-w C-h" "select-pane -L"
# bind -n C-l if "[ $(tmux display -p '#{pane_current_command}') = vim-huge ]" "send-keys C-w C-l" "select-pane -R"

# bind -n C-k if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C-<" "select-pane -U"
# bind -n C-j if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C->" "select-pane -D"
# bind -n C-h if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C-," "select-pane -L"
# bind -n C-l if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C-." "select-pane -R"

# # works design
# bind -n C-k if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C-k" "select-pane -U"
# bind -n C-j if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C-j" "select-pane -D"
# bind -n C-h if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C-h" "select-pane -L"
# bind -n C-l if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys C-l" "select-pane -R"

bind -n M-k if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys M-k" "resize-pane -U 5" 
bind -n M-j if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys M-j" "resize-pane -D 5" 
bind -n M-h if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys M-h" "resize-pane -L 10"
bind -n M-l if "[ $(tmux display -p '#{pane_current_command}') = '${EDITOR}' ]" "send-keys M-l" "resize-pane -R 10"

# https://vi.stackexchange.com/questions/8538/how-to-remap-c-whjkl-to-navigate-tmux-panes-and-vim-splits
# https://github.com/christoomey/vim-tmux-navigator
# Smart pane switching with awareness of Vim splits.

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
        | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(?=view|n?vi?m?x?)(?=diff|huge)?$'"

# # is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
# #     | grep -iE 'vim'"
# 
# bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' 'select-pane -U'
# bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' 'select-pane -D'
# bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
# bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'


# bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-w C-h' 'select-pane -L'
# bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-w C-j' 'select-pane -D'
# bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-w C-k' 'select-pane -U'
# bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-w C-l' 'select-pane -R'

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Doesn't work
# bind-key -n C-w switch-client -T VIMWINDOWS
# bind-key -T VIMWINDOWS h if-shell "$is_vim" "send-keys C-a C-h" "select-pane -L"
# bind-key -T VIMWINDOWS j if-shell "$is_vim" "send-keys C-a C-j" "select-pane -D"
# bind-key -T VIMWINDOWS k if-shell "$is_vim" "send-keys C-a C-k" "select-pane -U"
# bind-key -T VIMWINDOWS l if-shell "$is_vim" "send-keys C-a C-l" "select-pane -R"

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l


bind C-l send-keys 'C-l'

bind -r 'C-k' run "tmux select-pane -U"
bind -r 'C-j' run "tmux select-pane -D"
bind -r 'C-h' run "tmux select-pane -L"
bind -r 'C-l' run "tmux select-pane -R"
# https://github.com/tmux/tmux/issues/1827
bind -r "C-\\" run "tmux select-pane -l"


# Smart pane resizing with awareness of Vim splits.
# See: https://github.com/RyanMillerC/better-vim-tmux-resizer
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# Edit values if you use custom resize_count variables
bind-key -n M-k if-shell "$is_vim" "send-keys M-k"  "resize-pane -U 5"
bind-key -n M-j if-shell "$is_vim" "send-keys M-j"  "resize-pane -D 5"
bind-key -n M-h if-shell "$is_vim" "send-keys M-h"  "resize-pane -L 10"
bind-key -n M-l if-shell "$is_vim" "send-keys M-l"  "resize-pane -R 10"

bind-key -T copy-mode-vi M-k resize-pane -U 5
bind-key -T copy-mode-vi M-j resize-pane -D 5
bind-key -T copy-mode-vi M-h resize-pane -L 10
bind-key -T copy-mode-vi M-l resize-pane -R 10


# better splitting
set -g pane-border-style 'fg=black,bg=black'
set -g pane-active-border-style 'fg=black,bg=black'
# set -g pane-active-border-style 'fg=colour51,bg=colour236'
# set -g pane-border-style 'fg=colour235,bg=colour238'

# border colours
# set -g pane-border-style 'fg=magenta'
#:set -g pane-active-border-style "bg=default fg=magenta"

# set the pane border colors

set -g window-style 'fg=colour247,bg=colour236'
# set -g window-style 'fg=colour145,bg=black'
set -g window-active-style 'fg=colour247,bg=colour234'
# set -g window-active-style 'fg=colour145,bg=black'

#set inactive/active window styles
# https://stackoverflow.com/questions/25532773/change-background-color-of-active-or-inactive-pane-in-tmux


# bind C-a send-prefix
# set -g prefix C-a
# unbind C-b
# better prefix key

# set-option -g SuppressDEC 12
set -g xterm-keys on
set -g mouse on
# https://www.guyrutenberg.com/2021/07/02/tmux-wayland-clipboard-integration/
set -s copy-command 'wl-copy'


# https://vi.stackexchange.com/questions/7112/tmux-messing-with-vim-highlighting
# https://stackoverflow.com/questions/45931164/duplicated-characters-and-non-updating-input-using-tmux-in-zsh
# https://github.com/alacritty/alacritty/issues/2487
# https://sunaku.github.io/vim-256color-bce.html

set -as terminal-overrides ',xterm*:sitm=\E[3m'
# set -as terminal-overrides "*-256color:Tc"
# set -ga terminal-overrides ",*256col*:Tc"
# set -g default-terminal "screen-256color"
set -g default-terminal "xterm-256color"
# set -g default-terminal "tmux-256color"

# set -g terminal-overrides ",alacritty:RGB"
set -g terminal-overrides ",alacritty:Tc"
# set -ga terminal-overrides ',xterm-256color:Tc'


# run-shell $HOME/.tmux/plugins/tmux-prefix-highlight/prefix-highlight.tmux
run-shell $HOME/.tmux/plugins/resurrect/resurrect.tmux
run-shell $HOME/.tmux/plugins/continuum/continuum.tmux
# run -b '~/.tmux/plugins/tpm/tpm'
run '$HOME/.tmux/plugins/tpm/tpm'
# run '/usr/bin/tpm'
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)

# run-shell -b '$HOME/.tmux/plugins/tmux-resurrect/scripts/restore.sh r'
# With the tmux-resurrect plugin registered in this configuration file, login tmux without parameters first, 
# tmux
# then press,
# <ctrl>br
# will restore the previous session

# # if run as "tmux attach", create a session if one does not already exist
# new-session -n "${HOST}"











