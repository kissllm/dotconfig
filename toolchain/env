#!/bin/sh

set -efE
# trap 'Wont handle the "$FUNCNAME" at line "$LINENO"' ERR
trap 'Wont handle the ERROR at line "$LINENO"' ERR

# Host toolchain root
HOST_ROOT=/usr
extend=":$PATH:"
[ -z "${extend##*:${HOST_ROOT}:*}" ] || eval "export PATH=${HOST_ROOT}\${PATH:+\":\$$PATH\"}"

CFLAGS=""
CXXFLAGS=""
CPPFLAGS=""
LDFLAGS=""

# share folder initialization
[ ! -z "${SHARE_PREFIX+x}" ] || {
    if [ -d "/mnt/init" ]; then
        export SHARE_PREFIX="/mnt"
    elif [ -d "/opt/init" ]; then
        export SHARE_PREFIX="/opt"
    fi
}

export ARCH=x86_64
export HOST=x86_64
export TARGET="x86_64-linux-musl"
export CROSS_COMPILE=${TARGET}

# Target toolchain root
export SYSROOT=${SHARE_PREFIX}/${TARGET}/sysroot
[ -d ${SYSROOT} ] || doas mkdir -p ${SYSROOT}

export INITRAMFS=${SHARE_PREFIX}/${TARGET}/initramfs
[ -d ${INITRAMFS} ] || doas mkdir -p ${INITRAMFS}

export DISTDIR=${SHARE_PREFIX}/${TARGET}/make
[ -d ${DISTDIR} ] || doas mkdir -p ${DISTDIR}

export XDG_BIN=${SHARE_PREFIX}/local/bin
extend=":$PATH:"
[ -z "${extend##*:${XDG_BIN}:*}" ] || eval "export PATH=${XDG_BIN}\${PATH:+\":\$$PATH\"}"

doas ln -sf `which lld`     $XDG_BIN/${CROSS_COMPILE}-ld
doas ln -sf `which lld`     $XDG_BIN/${CROSS_COMPILE}-ld.lld
doas ln -sf `which clang`   $XDG_BIN/${CROSS_COMPILE}-cc
doas ln -sf `which clang`   $XDG_BIN/${CROSS_COMPILE}-gcc
doas ln -sf `which clang`   $XDG_BIN/${CROSS_COMPILE}-clang
doas ln -sf `which clang++` $XDG_BIN/${CROSS_COMPILE}-c++
doas ln -sf `which clang++` $XDG_BIN/${CROSS_COMPILE}-g++
doas ln -sf `which clang++` $XDG_BIN/${CROSS_COMPILE}-clang++

for i in ar nm objcopy objdump ranlib strip;do
    doas ln -sf `which llvm-$i` $XDG_BIN/${CROSS_COMPILE}-$i
done

LDFLAGS="-fuse-ld=lld $LDFLAGS"
export LD=${HOST_ROOT}/bin/ld.lld
export HOSTLD=${HOST_ROOT}/bin/ld.lld

export CC=${HOST_ROOT}/bin/clang
export CXX=${HOST_ROOT}/bin/clang++


export HOSTCC=${HOST_ROOT}/bin/clang
export HOSTCXX=${HOST_ROOT}/bin/clang++

export AS=${HOST_ROOT}/bin/llvm-as
export HOSTAS=${HOST_ROOT}/bin/llvm-as

export AR=${AR:=${HOST_ROOT}/bin/llvm-ar}
export HOSTAR=${HOST_ROOT}/bin/llvm-ar

export NM=${NM:=${HOST_ROOT}/bin/llvm-nm}
export HOSTNM=${HOST_ROOT}/bin/llvm-nm

export RANLIB=${HOST_ROOT}/bin/llvm-ranlib
export HOSTRANLIB=${HOST_ROOT}/bin/llvm-ranlib

export STRIP=${HOST_ROOT}/bin/llvm-strip

export OBJCOPY=${HOST_ROOT}/bin/llvm-objcopy

export OBJDUMP=${HOST_ROOT}/bin/llvm-objdump

export READELF=${HOST_ROOT}/bin/llvm-readelf

# llvm-ranlib -> llvm-ar*
# llvm-lib -> llvm-ar*
# llvm-dlltool -> llvm-ar*
# llvm-strip -> llvm-objcopy*
# llvm-otool -> llvm-objdump*
# llvm-install-name-tool -> llvm-objcopy*
# llvm-bitcode-strip -> llvm-objcopy*
# llvm-windres -> llvm-rc*
# llvm-readelf -> llvm-readobj*
# llvm-addr2line -> llvm-symbolizer*

# https://docs.kernel.org/kbuild/llvm.html
export LLVM_IAS=1
export LLVM=1

export LLVM_BIN=${LLVM_BIN:=$(${HOST_ROOT}/bin/llvm-config --bindir)}
COMPILER_RESOURCE_DIR=$("$CC" --print-resource-dir)
# export CXXFLAGS="$CXXFLAGS -resource-dir=${COMPILER_RESOURCE_DIR} -B${LLVM_BIN} -Os -fPIC -mcpu=x86-64"
# x86 uses -march and -mtune instead of -mcpu.
# https://groups.google.com/g/llvm-dev/c/2_o0Hp_b3V8/m/Xqv6UnceCgAJ
export TOOL_CLANG_MAJOR_VERSION=$($CXX -dM -E -x c /dev/null | grep __clang_major__ | awk '{print $3}')
# HOST_CLANG_VERSION=$($CXX -v 2>&1 | grep version | awk '{print $4}')


CFLAGS="$CFLAGS -resource-dir=${COMPILER_RESOURCE_DIR} -B${LLVM_BIN}"
# if [ $TOOL_CLANG_MAJOR_VERSION -gt 12 ]; then
CXXFLAGS="$CFLAGS"
# export CPPFLAGS="$CPPFLAGS -resource-dir=${COMPILER_RESOURCE_DIR} -B${LLVM_BIN} -Os -fPIC -mcpu=x86-64"
CPPFLAGS="$CFLAGS"
# export CFLAGS="$CFLAGS -resource-dir=${COMPILER_RESOURCE_DIR} -B${LLVM_BIN} -Os -fPIC -mcpu=x86-64"
LDFLAGS="$LDFLAGS --rtlib=compiler-rt -flto=thin"
# else
# export CFLAGS="$CFLAGS --force-chr=${COMPILER_RESOURCE_DIR} -B${LLVM_BIN} -Os -fPIC -mtune=native"
# export CXXFLAGS="$CXXFLAGS --force-chr=${COMPILER_RESOURCE_DIR} -B${LLVM_BIN} -Os -fPIC -mtune=native"
# export CPPFLAGS="$CPPFLAGS --force-chr=${COMPILER_RESOURCE_DIR} -B${LLVM_BIN} -Os -fPIC -mtune=native"
# fi

CFLAGS="--target=x86_64-linux-musl -Os -pipe -fPIC -mtune=native"

CFLAGS=" --sysroot=${SYSROOT} $CFLAGS"

CXXFLAGS="$CFLAGS"

HOST_LLVM_VERSION=$(llvm-config --version)
# Don't worry, it is hard coded in LLVM
CXX_STANDARD_VER=c++20

[ ! -z "${CC+x}" ]  || CC=/usr/bin/clang
[ ! -z "${CXX+x}" ] || CXX=/usr/bin/clang++

search_config="/usr/include/c++/v1/__config"
[ ! -f "$search_config" ] ||
# search_config="$(grep -L "experimental" $(find /usr/include -type f -name "__config"))"
search_config="$(find /usr/include -type f -name "__config" | grep -v "experimental")"
# /usr/include/c++/v1/__config
# search_config="$(find /usr/include -type f -name "__config" -exec echo {} +)"
# /usr/include/c++/v1/experimental/__config
# /usr/include/c++/v1/__config
for config_file in $search_config; do
    [ ! -f "$config_file" ] || {
        _LIBCPP_VERSION=$(printf "#include <$config_file>\nint main () { return 0;}" |
        $CC -E -stdlib=libc++ -x c++ -dM - | grep " _LIBCPP_VERSION " |
        awk '{print $3}');
        [ -z "${_LIBCPP_VERSION+x}" ] || {
            export _LIBCPP_VERSION="$_LIBCPP_VERSION"
            break
        }
    }
done
# HAS_LIBCXX=$(printf "#include <ciso646>\nint main () {}" | $CC -E -stdlib=libc++ -x c++ -dM - | grep _LIBCPP_VERSION | awk '{print $2}')
# HAS_LIBCXX=$(printf "#include <__config>\nint main () {}" | $CXX -E -stdlib=libc++ -x c++ -dM - | grep _LIBCPP_VERSION | awk '{print $2}')

if [ ! -z "${_LIBCPP_VERSION+x}" ]; then
    LLVM_ENABLE_LIBCXX="ON"
    LLVM_ENABLE_LIBCXXABI="ON"
    LIBCXX_PREFIX=""
    CXXFLAGS="-D_LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE=1 $CXXFLAGS"
LDFLAGS="${LDFLAGS} \
-lc++ \
-lc++abi \
-Wl,-lunwind \
-unwindlib=libunwind \
"
else
    LIBCXX_PREFIX="std"
fi

CXXFLAGS="$CXXFLAGS -stdlib=lib${LIBCXX_PREFIX}c++"

[ ! -z "${OSTYPE+x}" ] ||
OSTYPE=$(ldd --version 2>&1 | grep musl | awk '{print $1}')
! expr "$OSTYPE" : "musl" 1>/dev/null ||
CXXFLAGS="-DLIBCXX_HAS_MUSL_LIBC=1 $CXXFLAGS"
# CXXFLAGS="-DLIBCXX_HAS_MUSL_LIBC=1 -D_LIBCPP_HAS_MUSL_LIBC=1 $CXXFLAGS"

export CFLAGS="$CFLAGS \
-nostartfiles \
-nostdinc \
-fvisibility=hidden \
-pthread \
-isystem ${HOST_ROOT}/include \
-I ${HOST_ROOT}/include \
-isystem /usr/lib/clang/$HOST_LLVM_VERSION/include \
"

# -nostdinc \
# -DSDL_DISABLE_IMMINTRIN_H \
# -Os -pipe -march=native \
# -I${HOST_ROOT}/include \

CXXFLAGS="$CXXFLAGS \
-nostartfiles \
-nostdinc++ \
-nostdlib \
-nodefaultlibs \
-fvisibility=hidden \
-pthread \
-isystem ${HOST_ROOT}/include/c++/v1 \
-isystem ${HOST_ROOT}/include \
-I ${HOST_ROOT}/include \
-isystem /usr/lib/clang/$HOST_LLVM_VERSION/include \
"

# -nostdinc++ \
# --std=$CXX_STANDARD_VER \
# -Os -pipe -march=native \
# -stdlib=lib${LIBCXX_PREFIX}c++ \
# -nostdinc \
# -I${HOST_ROOT}/include \
# -stdlib=libc++ \

HOST_LLVM_LIBDIR=$(llvm-config --libdir)
LDFLAGS="${LDFLAGS} \
-nostdlib \
-nodefaultlibs \
-lpthread \
-no-pie \
-Wl,-rpath-link ${HOST_LLVM_LIBDIR} \
-Wl,-rpath=${HOST_ROOT}/lib \
-Wl,-L ${HOST_LLVM_LIBDIR} \
-L${HOST_ROOT}/lib \
-lc \
"

# -lc++abi \
# -lc++ \
# -lpthread \
# -stdlib=libc++ \

# "uname -n" won't work in chroot
[ "$(cat /etc/os-release | grep ^ID | awk 'BEGIN{ RS = ""; FS = "=" }{print $NF}')" = "alpine" ] ||
LDFLAGS="${LDFLAGS} -L/lib"

#     export CC=${HOST_ROOT}/bin/gcc
#     export CXX=${HOST_ROOT}/bin/g++
#
#
#     export HOSTCC=${HOST_ROOT}/bin/gcc
#     export HOSTCXX=${HOST_ROOT}/bin/g++
#     LDFLAGS="-fuse-ld=bfd $LDFLAGS"
#     # export LDFLAGS="-fuse-ld=gold $LDFLAGS"
#     export LD=${HOST_ROOT}/bin/ld.bfd
#     export HOSTLD=${HOST_ROOT}/bin/ld.bfd

export CXXFLAGS="$CXXFLAGS"
CPPFLAGS="$CXXFLAGS"
export CPPFLAGS="$CXXFLAGS"
export LDFLAGS="${LDFLAGS}"

# [ -z "${USE_CMLFS+x}" ] || {
# # You may also set CFLAGS, CPPFLAGS, CXXFLAGS, and LDFLAGS
# # See build/toolchain/linux/unbundle/ in the Chromium source for more details.
# #
# # # Hack to allow clang to find the default cfi_blacklist.txt
# # export CXXFLAGS+=-resource-dir=$("$CC" --print-resource-dir)
# # export CPPFLAGS+=-resource-dir=$("$CC" --print-resource-dir)
# # export CFLAGS+=-resource-dir=$("$CC" --print-resource-dir)
# # declare -A CML
#     CMLFS=${SHARE_PREFIX}/cmlfs
#     CML_BIN_DIR=${SHARE_PREFIX}/cmlfs
#     export CMLFS=${CMLFS}
#     export CML_BIN_DIR=${SHARE_PREFIX}/cmlfs
#     [ -d ${CML_BIN_DIR} ] || doas mkdir -p ${CML_BIN_DIR}
# 
#     CML_BUILD_DIR=${BUILD_PREFIX}/toolchain/cmlfs
#     export CML_BUILD_DIR=${BUILD_PREFIX}/toolchain/cmlfs
#     [ -d ${CML_BUILD_DIR} ] || doas mkdir -p ${CML_BUILD_DIR}
# 
#     CML_SRC_DIR=${SRC_PREFIX}/toolchain/cmlfs
#     export CML_SRC_DIR=${SRC_PREFIX}/toolchain/cmlfs
# }
# 
# # For Chimera Linux
# [ -z "${USE_CHIMERA+x}" ] || export BOOTSTRAP_ROOT="sysroot"
