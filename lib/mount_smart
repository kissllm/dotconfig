#! /bin/sh --

# mount_smart target source
set -e

trace_line() {
	local func_name="$1"
	local lineo="$2"
	echo "Error on function '$func_name' at '$lineo'"
}

[ -z "${IS_KISS+x}" ] ||
{
	set -E
	trap 'trace_line "$FUNCNAME" "$LINENO"' ERR || :
}

# Usage
# mount "$(uuid_partition "24ec11cc-cf21-4b33-97c8-3c532ba68179")" /mnt/void
# mount_smart "$des/mnt"  "$(uuid_partition "b2a78449-0991-42fe-b555-876d243c3340")"
uuid_partition() {
	local uuid="$1"
	# doas blkid | grep 24ec11cc-cf21-4b33-97c8-3c532ba68179 | awk -F ":" '{print $1}'
	set --
	[ "$(id -u)" -eq 0 ] || set -- doas -u root --
	command -v blkid > /dev/null 2>&1 &&
	"$@" blkid | grep "$uuid" | awk -F ":" '{print $1}' ||
	# name="$(doas lsblk --fs | grep "$uuid" | awk '{print $1}' | tr -cd '[:alnum:]')"
	# device="/dev/$name"
	printf '%s' "/dev/$("$@" lsblk --fs | grep "$uuid" | awk '{print $1}' | tr -cd '[:alnum:]')"
}

# Usage
# target_exists "$des/working" || ...
target_exists () {
	# [ -z "${IS_KISS+x}" ] &&
	# 	set -e || set -eE
	# # trap 'trace_line "$FUNCNAME" "$LINENO"' ERR
	# local des="$1"
	# # echo "In target_exists, \$des = $des"
	# # alredy_mounts="$(lsblk | grep $des | rev | cut -d" " -f1 | rev | tr '\n' ' ')"
	# # https://stackoverflow.com/questions/9422461/check-if-directory-mounted-with-bash
	# local found=0
	# local result=1
	# for I in $(mount | grep "$des" | awk "{print \$3}"); do
	# 	[ "$I" != "$des" ] || : $(( $found += 1 ))
	# done
	# [ "$found" -eq "0" ] || result=0
	# echo "$des found $found time(s)" >&2

	# return $result

	# set --
	# [ "$(id -u)" -eq 0 ] || set -- doas -u root --
	# "$@" mount | grep -qiE "$1"
	mount | grep -qiE "$1"
}

# "src" mounted
# Usage
# src_mounted "$src"
src_mounted () {
	# [ -z "${IS_KISS+x}" ] &&
	# 	set -e || set -eE
	# # trap 'trace_line "$FUNCNAME" "$LINENO"' ERR
	# local src="${1:?"src must be given"}"
	# local result=1
	# # [ -z "$src" ] && return "$result" ||
	# [ -z "$(df "${src}" 2>/dev/null |
	# 	# grep -v "Filesystem" |
	# 	grep "${src}" | awk "{print \$1}")" ] || result=0
	# 	# echo $(df ${src} | grep ${src} | awk '{print $1}')

	# return $result
	df | grep "^$1" > /dev/null 2>&1
}

# "src" mounted and target match "des"
# Usage
# target_mounted "$target" "$src" || ...
target_mounted () {
	[ -z "${IS_KISS+x}" ] &&
		set -e || set -eE
	# trap 'trace_line "$FUNCNAME" "$LINENO"' ERR
	local des="${1:?"des must be given"}"
	local src="${2:?"src must be given"}"

	local des_mounted=
	local result=1
	local mapped=
	# https://stackoverflow.com/questions/762631/find-out-if-a-command-exists-on-posix-system

	! command -v findmnt > /dev/null ||
	{
		# mapped=("${(@f)$(findmnt --kernel -n --list | \
		# grep -v '\[' | grep $src | awk '{print $1}')}")
		# util-linux
		mapped="$(findmnt --kernel -n --list |
			grep -v '\[' | grep "$src" | awk "{print \$1}" | tr '\n' ' ')"

		for I in $mapped; do
			[ "$des" != '$I' ] || { des_mounted="$des"; return 0; }
		done
	}

	[ ! -z "$des_mounted" ] ||
	{
		mapped="$(df 2>/dev/null |
		# grep -v "Filesystem" |
		grep "${src}" | awk "{print \$6}" | tr '\n' ' ')"

		for I in $mapped; do
			[ "$des" != '$I' ] || { des_mounted="$des"; return 0; }
		done
	}

	[ "$des" != "$des_mounted" ] || result=0

	return $result
}

# mount_smart "$des" "$(uuid_partition "45def029-fe2c-4813-8403-1151c5ec731e")" ||
mount_smart () {
	[ -z "${IS_KISS+x}" ] &&
		set -e || set -eE
	local result=1
	# trap 'trace_line "$FUNCNAME" "$LINENO"' ERR
	local target="${1:?"target must be given"}"
	local src="${2:?"src must be given"}"
	[ -d "$target" ] ||
	{
		mkdir -p "$target"
		# chmod --quiet 0755 "$target"
		chmod 0755 "$target"
	}
	src_mounted "$src" ||
	# target_exists "$src" ||
	{
		mount $src $target
		printf '%s %s\n' "$src" "mounted on $target"
		return 0
	}
	target_mounted "$target" "$src" &&
	printf '%s %s\n' "$src" "mounted on $target" ||
	{
		[ -z "${3:+x}" ] && local option="-o bind" || local option="${3}"
		local des_mounted="$(df 2>/dev/null | \
				grep "${src}" | awk "{print \$6}" | tr '\n' ' ')"

		printf '%s %s\n' '$des_mounted' "$des_mounted"
		printf '%s %s\n' '$target' "$target"
		printf '%s %s\n' '$src' "$src"
		mount $option $des_mounted $target && result=$?
		printf '%s %s\n' "target=$target <- src=$src" "binded"
	}

	return $result
}









