#! /bin/sh --

# mount_smart target source
set -e

type print > /dev/null 2>&1 ||
alias print='printf "[%6.6d] %-$((${LENGTH_HEADER:-59} - 10))s '"'"'%s'"'"'\n" "$LINENO"'

[ -z "${IS_KISS+x}" ] ||
{
	set -E
	type trap_print > /dev/null 2>&1 &&
	trap_print | grep -q "ERR" ||
	type trace_line > /dev/null 2>&1 ||
	{
		trace_err() {
			local func_name="$1"
			local lineo="$2"
			echo "Error on function '$func_name' at '$lineo'"
		}
		trap 'trace_err "$FUNCNAME" "$LINENO"' ERR || :
	}
}

# Usage
# mount "$(uuid_partition "24ec11cc-cf21-4b33-97c8-3c532ba68179")" /mnt/void
# mount_smart "$target"  "$(uuid_partition "b2a78449-0991-42fe-b555-876d243c3340")"
uuid_partition() {
	local uuid="$1"
	# doas blkid | grep 24ec11cc-cf21-4b33-97c8-3c532ba68179 | awk -F ":" '{print $1}'
	set --
	[ "$(id -u)" -eq 0 ] || set -- doas -u root --
	command -v blkid > /dev/null 2>&1 &&
	"$@" blkid | grep "$uuid" | awk -F ":" '{print $1}' ||
	# name="$(doas lsblk --fs | grep "$uuid" | awk '{print $1}' | tr -cd '[:alnum:]')"
	# device="/dev/$name"
	printf '%s' "/dev/$("$@" lsblk --fs | grep "$uuid" | awk '{print $1}' | tr -cd '[:alnum:]')"
}

# Usage
# target_exists "$target" || ...
target_exists () {
	# [ -z "${IS_KISS+x}" ] && set -e || set -eE
	# # trap 'trace_err "$FUNCNAME" "$LINENO"' ERR
	# local target="$1"
	# # echo "In target_exists, \$target = $target"
	# # alredy_mounts="$(lsblk | grep $target | rev | cut -d" " -f1 | rev | tr '\n' ' ')"
	# # https://stackoverflow.com/questions/9422461/check-if-directory-mounted-with-bash
	# local found=0
	# local item result=1
	# for item in $(mount | grep "$target" | awk "{print \$3}"); do
	# 	[ "$item" != "$target" ] || : $(( $found += 1 ))
	# done
	# [ "$found" -eq "0" ] || result=0
	# echo "$target found $found time(s)" >&2

	# return $result

	local target="$1"
	set --
	[ "$(id -u)" -eq 0 ] || set -- doas -u root --
	"$@" mount | grep -qiE "$target"
}

# "src" mounted
# Usage
# src_mounted "$src"
src_mounted () {
	# [ -z "${IS_KISS+x}" ] && set -e || set -eE
	# # trap 'trace_err "$FUNCNAME" "$LINENO"' ERR
	# local src="${1:?"src must be given"}"
	# local result=1
	# # [ -z "$src" ] && return "$result" ||
	# [ -z "$(df "${src}" 2>/dev/null |
	# 	# grep -v "Filesystem" |
	# 	grep "${src}" | awk "{print \$1}")" ] || result=0
	# 	# echo $(df ${src} | grep ${src} | awk '{print $1}')

	# return $result
	local src="$1"
	set --
	[ "$(id -u)" -eq 0 ] || set -- doas -u root --
	"$@" df | grep "^$src" > /dev/null 2>&1
}

# "src" mounted and target match "$target"
# Usage
# target_mounted "$target" "$src" || ...
target_mounted () {
	# [ -z "${IS_KISS+x}" ] && set -e || set -eE
	# trap 'trace_err "$FUNCNAME" "$LINENO"' ERR
	local target="${1:?"target must be given"}"
	local src="${2:?"src must be given"}"
	set --
	[ "$(id -u)" -eq 0 ] || set -- doas -u root --

	local item src_mounted=
	local result=1
	local mapped_list=
	# https://stackoverflow.com/questions/762631/find-out-if-a-command-exists-on-posix-system

	! command -v findmnt > /dev/null 2>&1 ||
	{
		# mapped_list=("${(@f)$(findmnt --kernel -n --list | \
		# grep -v '\[' | grep $src | awk '{print $1}')}")
		# util-linux
		mapped_list="$("$@" findmnt --kernel -n --list |
			grep -v '\[' | grep "$src" | awk '{print $1}')"
			# grep -v '\[' | grep "$src" | awk "{print \$1}" | tr '\n' ' ')"

		for item in $mapped_list; do
			[ "$target" != "$item" ] ||
			{
				src_mounted="$target"
				print '$src_mounted' "$src_mounted"
				result=0
				return $result
			}
		done
	}

	[ ! -z "$src_mounted" ] ||
	{
		mapped_list="$("$@" df 2>/dev/null |
			grep "${src}" | awk '{print $6}')"
		# # grep -v "Filesystem" |
		# grep "${src}" | awk "{print \$6}" | tr '\n' ' ')"

		for item in $mapped_list; do
			[ "$target" != "$item" ] ||
			{
				src_mounted="$target"
				print '$src_mounted' "$src_mounted"
				result=0
				return $result
			}
		done
	}

	[ "$target" != "$src_mounted" ] || result=0
	print '$result' "$result"

	return $result
}

# mount_smart "$target" "$(uuid_partition "45def029-fe2c-4813-8403-1151c5ec731e")" ||
mount_smart () {
	# [ -z "${IS_KISS+x}" ] && set -e || set -eE
	local result=1
	# trap 'trace_err "$FUNCNAME" "$LINENO"' ERR
	local target="${1:?"target must be given"}"
	local src="${2:?"src must be given"}"
	# local option="${3-"-o bind"}"
	local option="${3-}"
	[ ! -z "$option" ] ||
	[ -z "${src##"/dev/"*}" ] || option="-o bind"
	# [ -z "${3:+x}" ] && local option="-o bind" || local option="${3}"
	set --
	[ "$(id -u)" -eq 0 ] || set -- doas -u root --
	[ -d "$target" ] ||
	{
		"$@" mkdir -p "$target"
		# chmod --quiet 0755 "$target"
		"$@" chmod 0755 "$target"
	}
	# src_mounted "$src" && target_exists "$target" ||
	src_mounted "$src" ||
	{
		"$@" mount $src $target
		print "$target <- $src" "mounted"
		result=0
		return $result
	}
	target_mounted "$target" "$src" &&
	{
		print "$src" "mounted on $target"
		result=0
	} ||
	{
		local src_mounted_list="$("$@" df 2>/dev/null | \
				grep "$src" | awk '{print $6}')"
				# grep "${src}" | awk "{print \$6}" | tr '\n' ' ')"
		local item
		for item in $src_mounted_list; do
			print '$src_mounted_list' "$item"
		done
		print '$option' "$option"
		print '$src'    "$src"
		print '$target' "$target"
		case " $src_mounted_list " in
			*" $target "*)
				;;
			*)
				# mount: mounting /dev/nvme1n1p4 on /mnt/void/home failed: Not a directory
				# when option == "-o bind" on /dev/something
				"$@" mount $option $src $target && result=$?
		esac
		[ "$result" -ne 0 ] ||
			print "target=$target <- src=$src" "binded"
	}

	return $result
}









